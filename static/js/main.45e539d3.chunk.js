(this.webpackJsonptemp=this.webpackJsonptemp||[]).push([[0],{1012:function(e,n,t){},1013:function(e,n,t){},1014:function(e,n,t){},1015:function(e,n,t){"use strict";t.r(n);var r,i=t(2),a=t(1),o=t.n(a),s=t(17),c=t.n(s),l=(t(266),t(267),t(268),t(269),t(170),t(98)),u=t.n(l),h=function(e){var n=e.sectionHeader,t=e.translateX,r=function(e){return{transform:e?"translateX(0px)":"translateX(750px)",transition:"all 1.5s ease-in-out"}},o=function(e){return{transform:e?t:"translateX(-750px)",transition:"all 1.5s ease-in-out"}},s=Object(a.useRef)();return Object(i.jsx)(u.a,{once:!0,children:function(e){return Object(i.jsxs)("div",{className:"section-header",ref:s,children:[Object(i.jsx)("span",{style:r(e),children:n}),Object(i.jsx)("div",{className:"section-header-line",style:o(e)})]})}})},d=t.p+"static/media/how-it-works-image.48b6ebba.jpg",f=(t(279),function(e){var n=function(n){return{transform:n?"translateY(0px)":e.yValue,transition:"all 1.0s ease-in-out"}};return Object(i.jsx)(u.a,{once:!0,children:function(t){return Object(i.jsx)("div",{className:e.classNameToUse,style:n(t),children:e.children})}})}),m=function(e){var n=e.icon,t=e.title,r=e.description;return Object(i.jsxs)(f,{classNameToUse:"step-container",yValue:"translateY(125px)",children:[Object(i.jsx)("div",{className:"step-picture",children:n}),Object(i.jsx)("p",{className:"step-title",children:t}),Object(i.jsx)("p",{className:"step-description",children:r})]})},p=t(68),j=t(227),b=t(130),g=[{icon:Object(i.jsx)(p.g,{size:70,color:"#11C2C9"}),title:"1. Select the Algorithm",description:"Visualize the algorithm of your choice."},{icon:Object(i.jsx)(p.b,{size:70,color:"#5466FF"}),title:"2. Select Settings",description:"Adjust the speed of the visualizer and array size."},{icon:Object(i.jsx)(j.a,{size:70,color:"#5466FF"}),title:"3. Start Sorting",description:"Press the play button to start the step by step sorting process."},{icon:Object(i.jsx)(b.b,{size:70,color:"#11C2C9"}),title:"4. Fast-forward, Backtrack, and Replay",description:"Replay the entire sorting process or walk through the algorithm one step at a time with these functions."}],x=function(){return Object(i.jsxs)("div",{id:"howItWorks",className:"how-it-works",children:[Object(i.jsx)(h,{sectionHeader:"How it Works",translateX:"translateX(28px)"}),Object(i.jsxs)("div",{className:"how-it-works-container",children:[Object(i.jsx)("img",{className:"how-it-works-picture",src:d,alt:""}),Object(i.jsx)("div",{className:"steps",children:g.map((function(e,n){return n%2===0?Object(i.jsx)(m,{icon:e.icon,title:e.title,description:e.description}):null}))}),Object(i.jsx)("div",{className:"steps",children:g.map((function(e,n){return n%2===1?Object(i.jsx)(m,{icon:e.icon,title:e.title,description:e.description}):null}))})]})]})},v=t(15),y=(t(280),t(1043)),O=t(1041),k=t(1046),S=t(253),w=t(116),N=t(233),A=t.n(N),C=t(1036),I=t(1044),T=t(1047),_=t(1045),z=t(238),P=t.n(z),B=function(e){var n=e.isShowMessage,t=e.setIsShowMessage,r=Object(C.a)((function(e){return{root:{backgroundColor:"#313131",color:"white"}}}))(),a=function(e,n){"clickaway"!==n&&t(!1)};return Object(i.jsx)(I.a,{open:n,autoHideDuration:5e3,anchorOrigin:{vertical:"bottom",horizontal:"left"},onClose:a,children:Object(i.jsx)(T.a,{onClose:a,className:r.root,color:"white",action:Object(i.jsx)(_.a,{"aria-label":"close",color:"inherit",size:"small",onClick:function(){return t(!1)},children:Object(i.jsx)(P.a,{fontSize:"inherit",className:"close-notification-button"})}),children:"Message sent."})})},D=function(){var e=Object(a.useState)("Type (Optional)"),n=Object(v.a)(e,2),t=n[0],r=n[1],o=Object(a.useState)(!1),s=Object(v.a)(o,2),c=s[0],l=s[1],u=Object(i.jsx)(y.a,{style:{transform:"translateY(-5px)"},children:[{type:"Type (Optional)",key:0},{type:"Improvement",key:1},{type:"Issue",key:2},{type:"Others",key:3}].map((function(e){var n=e.type,t=e.key;return Object(i.jsx)(y.a.Item,{onClick:function(){return function(e){r(e)}(n)},style:{color:"#8789B5"},children:n},t)}))}),h=w.a({name:w.b().required(),email:w.b().required().email("Invalid email").test("check if email is in use","Email has been registered",(function(e){return/^([a-zA-Z0-9_.-])+@(([a-zA-Z0-9-])+.)+([a-zA-Z0-9]{2,4})+$/.test(e)})),message:w.b().required()}),d="translateY(50px)";return Object(i.jsx)(S.a,{initialValues:{name:"",email:"",type:"",message:""},validationSchema:h,onSubmit:function(e,n){!function(e){var n={name:e.name,email:e.email,type:t,message:e.message};A.a.send("service_cslfpvq","template_gthvxem",n,"FYfQjLoT18Udtn59Y").then((function(e){}))}(e),r("Type (Optional)"),l(!0),setTimeout((function(){return l(!1)}),5e3),n.resetForm()},children:function(e){return Object(i.jsxs)(i.Fragment,{children:[Object(i.jsxs)("div",{className:"form-box",children:[Object(i.jsxs)("div",{className:"form-particulars",id:"form-particulars",children:[Object(i.jsxs)(f,{classNameToUse:"form-particular-error-holder",yValue:d,children:[Object(i.jsx)("div",{className:"form-particulars-holder",children:Object(i.jsx)("input",{placeholder:"Name",required:!0,onChange:e.handleChange,value:e.values.name,name:"name"})}),Object(i.jsx)("span",{children:e.touched.name&&e.errors.name&&"Name is a required field"})]}),Object(i.jsxs)(f,{classNameToUse:"form-particular-error-holder",yValue:d,children:[Object(i.jsx)("div",{className:"form-particulars-holder",children:Object(i.jsx)("input",{placeholder:"Email",required:!0,onChange:e.handleChange,value:e.values.email,name:"email"})}),Object(i.jsx)("span",{children:e.touched.email&&e.errors.email&&"Email is a required field"})]}),Object(i.jsx)(f,{classNameToUse:"form-particular-error-holder",yValue:d,children:Object(i.jsxs)("div",{className:"form-particulars-holder",children:[Object(i.jsx)("span",{children:t}),Object(i.jsx)(O.a,{overlay:u,trigger:["click"],placement:"bottomCenter",children:Object(i.jsx)("a",{className:"ant-dropdown-link",onClick:function(e){return e.preventDefault()},id:"drop-down-arrow-holder",children:Object(i.jsx)(k.a,{style:{transform:"translateX(-20px)"}})})})]})})]}),Object(i.jsx)(f,{classNameToUse:"form-details",yValue:d,children:Object(i.jsxs)("div",{className:"form-details-error-holder",children:[Object(i.jsx)("div",{className:"form-details-holder",children:Object(i.jsx)("textarea",{placeholder:"Message",required:!0,onChange:e.handleChange,value:e.values.message,name:"message"})}),Object(i.jsx)("span",{children:e.touched.message&&e.errors.message&&"Message is a required field"})]})}),Object(i.jsx)(f,{classNameToUse:"form-submit-button-box",yValue:d,children:Object(i.jsx)("button",{className:"form-submit-button",onClick:e.handleSubmit,type:"submit",children:Object(i.jsx)("span",{children:"SEND MESSAGE"})})})]}),Object(i.jsx)(B,{isShowMessage:c,setIsShowMessage:l})]})}})},M=(t(405),function(){return Object(i.jsxs)("div",{className:"footer-container",children:[Object(i.jsx)("div",{className:"triangle"}),Object(i.jsxs)("div",{className:"links-container",children:[Object(i.jsx)("div",{className:"footer-title",children:"About Us"}),Object(i.jsx)("a",{href:"#home",children:"Home"}),Object(i.jsx)("a",{href:"#howItWorks",children:"How It Works"}),Object(i.jsx)("a",{href:"#visualizer",children:"Visualizer"}),Object(i.jsx)("a",{href:"#team",children:"Team"}),Object(i.jsx)("a",{href:"#contactUs",children:"Contact Us"}),Object(i.jsxs)("div",{className:"copy-right",children:["Copyright ",Object(i.jsx)(b.a,{size:18,color:"white"})," 2022 Sorting Visualizer."]})]})]})}),F=(t(406),t(407),function(){var e=function(){return Object(i.jsx)("span",{children:"Do contact us if there is any error or improvement."})};return Object(i.jsxs)("div",{className:"contact-us-header-box",children:[Object(i.jsx)(h,{sectionHeader:"Contact Us",translateX:"translateX(23px)"}),Object(i.jsx)(e,{})]})}),H=function(){return Object(i.jsxs)("div",{id:"contactUs",className:"contact-us",children:[Object(i.jsx)(F,{}),Object(i.jsx)(D,{}),Object(i.jsx)(M,{})]})},L=(t(408),t(247)),R=t.n(L),q=(t(570),function(){var e=function(e){return{transform:e?"translateX(0px)":"translateX(750px)",transition:"all 1.5s ease-in-out"}},n=function(e){return{transform:e?"translate(0px)":"translateX(-750px)",transition:"all 1.5s ease-in-out"}},t=Object(a.useRef)();return Object(i.jsx)(u.a,{once:!0,children:function(r){return Object(i.jsxs)("div",{className:"content",ref:t,children:[Object(i.jsx)("div",{className:"title",style:e(r),children:"Sorting algorithms made easy"}),Object(i.jsx)("div",{className:"description",style:n(r),children:"Visualize the step by step process of popular sorting algorithms!"})]})}})}),E=function(){return Object(i.jsxs)("div",{id:"home",className:"home",children:[Object(i.jsx)(q,{}),Object(i.jsx)(R.a,{id:"particles",className:"wrapper",options:{background:{color:{value:"#5467ff"}},fpsLimit:60,interactivity:{detectsOn:"canvas",events:{resize:!0},modes:{bubble:{distance:400,duration:2,opacity:.8,size:40},push:{quantity:4},repulse:{distance:200,duration:.4}}},particles:{color:{value:"#fff"},collisions:{enable:!0},move:{direction:"none",enable:!0,outMode:"bounce",random:!1,speed:3,straight:!1},number:{density:{enable:!0,value_area:800},value:80},opacity:{value:.5},shape:{type:"circle"},size:{random:!0,value:5}},detectRetina:!0}})]})},J=(t(571),t.p+"static/media/Pratima.75454c6e.png"),U=t.p+"static/media/Purnima.6f099787.jpg",X=t.p+"static/media/Pri.a10eca37.jpg",V="Galgotias College of Engg & Technology",W=[{img:X,name:"Priyanshika Sharma",description:V,linkedInUrl:"https://www.linkedin.com/in/priyanshika",gitHubUrl:"https://github.com/Aditig2020"},{img:U,name:"Purnima Katiyar",description:V,linkedInUrl:"https://www.linkedin.com/in/purnima-katiyar-6a1a92134",gitHubUrl:"https://github.com/purnimakatiyar"},{img:J,name:"Pratima Kumari",description:V,linkedInUrl:"https://www.linkedin.com/in/pratima-kumari-8712b3227",gitHubUrl:""}],Q=t.p+"static/media/team-image.4c9c6ad8.jpg",Y=(t(572),t(105)),G=function(e){var n=e.img,t=e.name,r=e.description,a=e.linkedInLink,o=e.gitHubLink;return Object(i.jsxs)(f,{classNameToUse:"profile-container",yValue:"translateY(125px)",children:[Object(i.jsx)("img",{className:"picture",src:n,alt:""}),Object(i.jsxs)("div",{className:"profile-description-container",children:[Object(i.jsx)("p",{className:"profile-title",children:t}),Object(i.jsx)("p",{className:"profile-description",children:r}),Object(i.jsx)("a",{title:"LinkedIn",href:a,target:"_blank",rel:"noopener noreferrer",children:Object(i.jsx)(Y.c,{size:23,color:"#0e76a8"})}),Object(i.jsx)("a",{title:"GitHub",href:o,target:"_blank",rel:"noopener noreferrer",className:"github-logo",children:Object(i.jsx)(Y.b,{size:23,color:"#211F1F"})})]})]})},Z=function(){return Object(i.jsxs)("div",{className:"team",id:"team",children:[Object(i.jsx)(h,{sectionHeader:"Team",translateX:"translateX(13px)"}),Object(i.jsxs)("div",{className:"team-container",children:[Object(i.jsx)("img",{className:"team-picture",src:Q,alt:""}),Object(i.jsxs)("div",{className:"team-profile",children:[Object(i.jsx)("p",{className:"team-title",children:"Meet our team"}),Object(i.jsx)("p",{className:"team-description",children:"We are a group of highly motivated students from Galgotias College of Engineering & Technology that are invested in the field of Computer Science Engineering. Feel free to contact us."}),W.map((function(e,n){return Object(i.jsx)(G,{img:e.img,name:e.name,description:e.description,linkedInLink:e.linkedInUrl,gitHubLink:e.gitHubUrl},n)}))]})]})]})},K=t(24),$=(t(160),function(e){var n=e.color,t=e.description;return Object(i.jsxs)("div",{className:"legend-information",children:[Object(i.jsx)("div",{className:"legend-information-box-holder",children:Object(i.jsx)("div",{className:"legend-information-box-box",style:{backgroundImage:n}})}),Object(i.jsx)("div",{className:"legend-information-description-holder",children:Object(i.jsx)("span",{className:"legend-information-description-text",children:t})})]})}),ee=function(){return Object(i.jsxs)(i.Fragment,{children:[Object(i.jsx)("div",{className:"legend-header",children:Object(i.jsx)("span",{children:"Legend"})}),Object(i.jsx)("div",{className:"legend-header-line"})]})},ne=function(e){return"Counting Sort"===e},te=function(e){return"Radix Sort"===e},re=function(e){return"Bucket Sort"===e},ie=function(e){return te(e)||re(e)},ae=function(e){return"Merge Sort"===e},oe=function(e){return"Selection Sort"===e},se=function(e){return"Quick Sort"===e},ce=function(e){return"Bubble Sort"===e||"Insertion Sort"===e||"Selection Sort"===e||"Quick Sort"===e||"Heap Sort"===e||"Merge Sort"===e||"Shell Sort"===e},le=function(){var e=Object(a.useContext)(Rn).visualizerAlgorithm,n=[{color:"linear-gradient(45deg, #13B1B7, #11C2C9)",description:ae(e)?"Currently involved in the merge process":oe(e)?"Currently involved in selection process":"Currently involved in the swap process"},{color:"linear-gradient(45deg, #287ED0, #5466FF)",description:ae(e)?"Not involved in the merge process":oe(e)?"Not involved in the selection process":"Not involved in the swap process"}];return Object(i.jsx)("div",{className:"legend-box",children:ce(e)&&Object(i.jsxs)("div",{children:[Object(i.jsx)("div",{className:"legend-header-box",children:Object(i.jsx)(ee,{})}),Object(i.jsx)("div",{className:"legend-information-box",children:n.map((function(e,n){var t=e.color,r=e.description;return Object(i.jsx)($,{color:t,description:r},n)}))})]})})},ue=(t(161),function(e,n){return Math.floor(Math.random()*(n-e+1)+e)}),he=function(e){return+(Math.round(e+"e+2")+"e-2")},de=[{height:1,count:0},{height:2,count:0},{height:3,count:0},{height:4,count:0},{height:5,count:0},{height:6,count:0},{height:7,count:0},{height:8,count:0},{height:9,count:0}],fe=function(e,n,t,r,i){var a=e.id,o=e.height;return i&&t<=50||!i&&t>=50?(n[a].isShown=!1,r[o-1].count+=1):(n[a]=e,n[a].isShown=!0,r[o-1].count-=1),n},me=(t(573),[{value:0,array:[]},{value:1,array:[]},{value:2,array:[]},{value:3,array:[]},{value:4,array:[]},{value:5,array:[]},{value:6,array:[]},{value:7,array:[]},{value:8,array:[]},{value:9,array:[]}]),pe=function(){var e=Math.random();return e<.1?ue(1,9):e<.2?ue(10,99):e<=1?ue(100,999):void 0},je=function(e,n,t,r){var i=e.id;if(!(r^e.isDistributing)){n[i].isShown=!1;var a=e.location;r?t[a].array.push(e):t[a].array.unshift(e)}else{var o=e.location;n[i]=e,n[i].isShown=!0,r?t[o].array.shift():t[o].array.pop()}return n},be=t(28),ge=function(e,n,t){for(var r=0;r<e.length;r++){var i=-1===n&&e[r].prevPos===t,a=-1===t&&e[r].prevPos===n;if(i||a)return r}return-1},xe=function(e,n){var t=800/e.length,r=He(e),i=n[2],a=n[0],o=n[1],s=n[3],c=n[4];if(i){var l,u=n[5],h=Object(be.a)(u);try{for(h.s();!(l=h.n()).done;){var d=l.value;r[ge(r,d,-1)].isShift=!0}}catch(j){h.e(j)}finally{h.f()}}else{var f=ge(r,a,o),m=Math.abs(s-f);if(r[f].xDirection=s-f<=0?-m*t+10*(s-0):m*t+10*(s-0),r[f].isShift=!1,r[f].pos=s,c)for(var p=0;p<r.length;p++)r[p].prevPos=r[p].pos}return r},ve=function(e,n,t){var r=t[e];t[e]=t[n],t[n]=r},ye=function(e,n,t,r,i){var a=Fe(i,t);return function(e,n,t){t[e].isSwap=!0,t[n].isSwap=!0}(e,n,a),r?(ve(e,n,a),a):a},Oe=function(e,n,t,r){var i=e[0],a=e[1],o=e[2],s=ye(i,a,n,o,t);return r(s),s},ke="Insertion Sort",Se=function(e,n,t,r){return 4===e.length?we(e,t):void 0===e.isSort?je(e,n,t,r):Ne(e,t),n},we=function(e,n){var t=e[0],r=e[1],i=e[2],a=e[3];n[a].array=ye(t,r,n[a].array,i,ke)},Ne=function(e,n){var t=e.location;n[t].array=Fe(ke,n[t].array)},Ae=function(e){for(var n=e,t=[],r=n.length,i=1;i<r;i++){var a=n[i],o=i-1;for(t.push([i,i-1,!1]);o>=0&&n[o].height>a.height;)n[o+1]=n[o],t.push([o+1,o,!0]),--o>=0&&n[o].height>a.height&&t.push([o+1,o,!1]);n[o+1]=a}return t},Ce=function e(n,t,r,i){if(t<r){var a=function(e,n,t,r){for(var i=e[t].height,a=n-1,o=n;o<t;o++)e[o].height<i?(r.push([o,o,!1,t,"incI",a]),++a!==o&&(r.push([a,o,!0,t,"iToJ",a]),ve(a,o,e))):r.push([o,o,!1,t,"jToPivot",a]);return r.push([a+1,t,!0,t,"swapPivot",a]),ve(a+1,t,e),a+1}(n,t,r,i);e(n,t,a-1,i),e(n,a+1,r,i)}},Ie=function(e){var n=[];return Ce(e,0,e.length-1,n),n},Te=function(e){for(var n=e,t=[],r=n.length-1;r>=0;r--){for(var i=!0,a=0;a<r;a++)t.push([a+1,a,!1]),n[a].height>n[a+1].height&&(ve(a,a+1,n),t.push([a+1,a,!0]),i=!1);if(i)break}return t},_e=t(27),ze=function(e){var n,t=Object(_e.a)(Array(10)).map((function(){return[]})),r=[],i=0,a=Object(be.a)(e);try{for(a.s();!(n=a.n()).done;){var o=n.value,s=Math.floor(10*o.height);r.push({id:i,height:o.height,isShown:!0,location:s,isDistributing:!0}),i++,t[s].push(o)}}catch(b){a.e(b)}finally{a.f()}for(var c=function(e){r.push({isSort:!0,location:e});var n=Ae(t[e]).map((function(n){return[].concat(Object(_e.a)(n),[e])}));(r=r.concat(n)).push({isSort:!1,location:e})},l=0;l<10;l++)c(l);i=0;var u,h=0,d=Object(be.a)(t);try{for(d.s();!(u=d.n()).done;){var f,m=u.value,p=Object(be.a)(m);try{for(p.s();!(f=p.n()).done;){var j=f.value;r.push({id:i,height:j.height,isShown:!0,location:h,isDistributing:!1,isSwap:!1}),i++}}catch(b){p.e(b)}finally{p.f()}h++}}catch(b){d.e(b)}finally{d.f()}return r},Pe=function e(n,t,r,i){if(r<i){var a=Math.floor((r+i)/2);e(n,t,r,a),e(n,t,a+1,i),function(e,n,t,r,i){for(var a=t-n+1,o=r-t,s=[],c=[],l=[],u=0;u<a;u++)s.push(e[n+u]),l.push(n+u);for(var h=0;h<o;h++)c.push(e[t+1+h]),l.push(t+1+h);i.push([-1,-1,!0,-1,!1,l]);for(var d=0,f=0,m=n;d<a&&f<o;)s[d].height<=c[f].height?(i.push([n+d,-1,!1,m,!1]),e[m++]=s[d++]):(i.push([-1,t+1+f,!1,m,!1]),e[m++]=c[f++]);for(;d<a;)d+1===a?i.push([n+d,-1,!1,m,!0]):i.push([n+d,-1,!1,m,!1]),e[m++]=s[d++];for(;f<o;)f+1===o?i.push([-1,t+1+f,!1,m,!0]):i.push([-1,t+1+f,!1,m,!1]),e[m++]=c[f++]}(n,r,a,i,t)}},Be=[],De=function e(n,t){var i=2*t+1,a=2*t+2,o=t;i<r&&n[i].height>n[o].height&&(o=i),a<r&&n[a].height>n[o].height&&(o=a),Be.push([t,o,!1,!1]),o!==t&&(Be.push([t,o,!0,!1]),ve(t,o,n),e(n,o))},Me={"Insertion Sort":Ae,"Bubble Sort":Te,"Quick Sort":Ie,"Radix Sort":function(e){for(var n=e,t=[],r=10*Math.max.apply(Math,Object(_e.a)(n.map((function(e){return e.height})))),i=10;i<r;){var a,o=0,s=Object(_e.a)(Array(10)).map((function(){return[]})),c=Object(be.a)(n);try{for(c.s();!(a=c.n()).done;){var l=a.value,u=l.height,h=Math.floor(u%i/(i/10));s[h].push(l),t.push({id:o,height:l.height,isShown:!0,location:h,isDistributing:!0}),o++}}catch(x){c.e(x)}finally{c.f()}n=[].concat.apply([],s),o=0;var d,f=0,m=Object(be.a)(s);try{for(m.s();!(d=m.n()).done;){var p,j=d.value,b=Object(be.a)(j);try{for(b.s();!(p=b.n()).done;){var g=p.value;t.push({id:o,height:g.height,isShown:!0,location:f,isDistributing:!1}),o++}}catch(x){b.e(x)}finally{b.f()}f++}}catch(x){m.e(x)}finally{m.f()}i*=10}return t},"Bucket Sort":ze,"Counting Sort":function(e){for(var n=e,t=Object(_e.a)(Array(10)).map((function(){return 0})),r=0;r<n.length;r++)t[n[r].height]++;for(var i=0,a=0;a<t.length;a++)for(;0!==t[a];)n.push({id:i,height:a,isShown:!0}),i++,t[a]--;return n},"Selection Sort":function(e){for(var n=e,t=[],r=0;r<n.length-1;r++){for(var i=r,a=r+1;a<n.length;a++)t.push([i,a,!1]),n[a].height<n[i].height&&(i=a);r!==i&&(ve(i,r,n),t.push([i,r,!0]))}return t},"Merge Sort":function(e){var n=[];return Pe(e,n,0,e.length-1),n},"Shell Sort":function(e){for(var n=e.length,t=e,r=[],i=Math.floor(n/2);i>0;i=Math.floor(i/2))for(var a=i;a<n;a+=1){var o=t[a].height,s=void 0;for(s=a;s>=i&&(r.push([s-i,s,!1]),t[s-i].height>o);s-=i)r.push([s-i,s,!0]),ve(s-i,s,t)}return r},"Heap Sort":function(e){var n=e;r=n.length,Be=[];for(var t=Math.floor(r/2);t>=0;t-=1)De(n,t);for(var i=e.length-1;i>0;i--)Be.push([i,0,!0,!0]),ve(0,i,n),r--,De(n,0);return Be}},Fe=function(e,n){return ie(e)?He(n):He(n).map((function(n){var t=n;return ne(e)?t.isShown=!0:ae(e)?t.isShift=!1:t.isSwap=!1,t}))},He=function(e){return JSON.parse(JSON.stringify(e))},Le={"Insertion Sort":function(e){return qe(e)},"Bubble Sort":function(e){return qe(e)},"Quick Sort":function(e){return qe(e)},"Shell Sort":function(e){return qe(e)},"Heap Sort":function(e){return qe(e)},"Selection Sort":function(e){return qe(e)},"Merge Sort":function(e){return function(e){for(var n=[],t=0;t<e;t++)n.push({xDirection:10*t,pos:t,prevPos:t,height:ue(1,9),isShift:!1,id:t});return n}(e)},"Counting Sort":function(e){return function(e){for(var n=[],t=0;t<e;t++)n.push({id:t,height:ue(1,9),isShown:!0});return n}(e)},"Radix Sort":function(e){return function(e){for(var n=[],t=0;t<e;t++)n.push({id:t,height:pe(),isShown:!0});return n}(e)},"Bucket Sort":function(e){return function(e){for(var n=[],t=0;t<e;t++)n.push({id:t,height:+Math.random().toFixed(3),isShown:!0});return n}(e)}},Re=function(e,n){return Le[n](e)},qe=function(e){for(var n=[],t=0;t<e;t++)n.push({id:t,height:ue(5,20),isSwap:!1});return n},Ee=function(){var e=Object(a.useContext)(Rn),n=e.dataSize,t=e.setDataSize,r=e.isPlay,o=e.isInMidstOfSort,s=e.setIsReplay,c=e.setIsInMidstOfSort,l=e.setVisualizerAlgorithm,u=e.setArrayData,h=e.setAnimationPercentage,d=e.setIsReset,f=e.setCountArr,m=e.setStackArr,p=e.setHistoryArr,j=Object(a.useState)("Bubble Sort"),b=Object(v.a)(j,2),g=b[0],x=b[1],S=Object(i.jsx)(y.a,{children:[{algorithmName:"Bubble Sort",key:"0"},{algorithmName:"Insertion Sort",key:"1"},{algorithmName:"Selection Sort",key:"2"},{algorithmName:"Merge Sort",key:"3"},{algorithmName:"Quick Sort",key:"4"},{algorithmName:"Heap Sort",key:"5"},{algorithmName:"Shell Sort",key:"6"},{algorithmName:"Counting Sort",key:"7"},{algorithmName:"Radix Sort",key:"8"},{algorithmName:"Bucket Sort",key:"9"}].map((function(e){var r=e.algorithmName,a=e.key;return Object(i.jsx)(y.a.Item,{onClick:function(){return function(e){x(e),l(e),g!==e&&(o&&c(!1),n>10&&ie(e)?(u(Re(10,e)),t(10)):u(Re(n,e)),s(!1),d(!0),f(He(de)),m(He(me)),p([]),h(0))}(r)},style:{color:"#8789B5"},children:r},a)}))});return Object(i.jsx)("div",{className:"algorithm-selector-holder",style:{cursor:r?"not-allowed":"cursor"},children:Object(i.jsx)(O.a,{overlay:S,trigger:["click"],placement:"bottomCenter",disabled:r,children:Object(i.jsxs)("a",{className:"ant-dropdown-link",onClick:function(e){return e.preventDefault()},id:"algorithm-selector-drop-down-arrow",children:[g,Object(i.jsx)(k.a,{style:{transform:"translateX(5px)",cursor:r?"not-allowed":"cursor"}})]})})})},Je=t(1039),Ue=(t(574),function(e){var n=e.setData,t=e.min,r=e.max,o=e.name,s=Object(a.useContext)(Rn),c=s.isPlay,l=s.visualizerAlgorithm,u=ie(l)?10:r,h=Object(a.useState)((function(){return Math.floor((t+u)/2)})),d=Object(v.a)(h,2),f=d[0],m=d[1];return Object(i.jsxs)("div",{className:"selector-holder",children:[Object(i.jsxs)("span",{children:[o,": ",f]}),Object(i.jsx)(Je.a,{defaultValue:Math.floor((t+u)/2),min:t,max:u,onChange:function(e){return m(e)},onAfterChange:function(){return n(f)},disabled:c})]})}),Xe=(t(575),function(e,n,t,r){var i=e[1],a=e[0],o=e[3],s=e[2],c=Ve(i,a,o,n,s,t);return r(c),c}),Ve=function(e,n,t,r,i,a){var o=ye(e,n,r,i,a);return o[t].isSwap=!0,o},We={min:1,max:10,name:"Speed"},Qe={min:5,max:25,name:"Size"},Ye=t(1042),Ge=function(){var e=Object(a.useContext)(Rn).animationPercentage;return Object(i.jsx)("div",{style:{width:300,transform:"translateY(60px)"},children:Object(i.jsx)(Ye.a,{status:"normal",strokeColor:{"0%":"#287ED0","100%":"#5466FF"},percent:e})})},Ze=t(69),Ke=(t(95),t(89),function(e){var n=e.item,t=Object(a.useContext)(Rn).dataSize;return Object(i.jsx)("div",{className:"animated-block",style:{backgroundImage:"linear-gradient(45deg, #287ED0, #5466FF)",height:10*n.height+9,width:800/t,visibility:n.isShown?"visible":"hidden"},children:Object(i.jsx)("span",{children:n.height})})}),$e=(t(162),function(e){var n=e.referenceArray,t=e.BlockType;return Object(i.jsx)("div",{className:"horiz-arr",children:n.map((function(e){return Object(i.jsx)(t,{item:e},e.id)}))})}),en=function(e){var n=e.item,t=Object(a.useContext)(Rn).dataSize;return Object(i.jsxs)("div",{className:"fixed-array-container",children:[Object(i.jsx)("div",{className:"animated-block",style:{height:10*n.height+9,backgroundColor:["#B8B8B8","#b4d3de","#7AC1DB","#74a2d6","#7B9AD6","#6A8FDB","#5480D9","#3B6DD2","#3b5cd2","#274ac8","#1e41c8","#183cc6","#092ec8","#091cc8","#0600c3","#0600a0","#030062","#030030","#030016","#000000","#000000","#000000","#000000","#000000","#000000"][n.count],width:800/Math.max(t,9)},children:Object(i.jsx)("span",{children:n.height})}),Object(i.jsx)("span",{className:"count",children:n.count})]})},nn=function(){var e=Object(a.useContext)(Rn),n=e.referenceArray,t=e.countArr;return Object(i.jsxs)("div",{className:"container-one",children:[Object(i.jsx)($e,{referenceArray:n,BlockType:Ke}),Object(i.jsx)("div",{style:{marginTop:"6%"},children:Object(i.jsx)($e,{referenceArray:t,BlockType:en})})]})},tn=function(e,n,t){for(var r=function(e,n){return e<2*n?1:e<4*n?2:e<6*n?3:-1}(n,t),a=0,o=1,s=[];e>0;)a=e%10,s.push([a,r===o]),o++,e=Math.floor(e/10);return s.map((function(e){return Object(i.jsx)("span",{style:{fontWeight:e[1]&&"bold",color:e[1]&&"#fff"},children:e[0]})}))},rn=function(e){return Array.from(e.toString()).map((function(e){return Object(i.jsx)("span",{children:e})}))},an=function(e){var n=e.item,t=e.display,r=e.marginTop,o=Object(a.useContext)(Rn),s=o.idx,c=o.dataSize;return Object(i.jsx)("div",{className:"oval",style:{visibility:t||n.isShown?"visible":"hidden",marginTop:r},children:Object(i.jsx)("div",{className:"reversed-number",children:tn(n.height,s,c)})})},on=function(e){var n=e.individualStack;return Object(i.jsxs)("div",{className:"stack",children:[Object(i.jsx)("div",{className:"stack-boxes",children:n.array.map((function(e){return Object(i.jsx)(an,{item:e,display:!0,marginTop:10},e.id)}))}),Object(i.jsx)("div",{className:"number-with-line",children:n.value})]})},sn=function(){var e=Object(a.useContext)(Rn),n=e.referenceArray,t=e.stackArr;return Object(i.jsxs)("div",{className:"container-one",style:{justifyContent:"space-between",minHeight:370},children:[Object(i.jsx)($e,{referenceArray:n,BlockType:an}),Object(i.jsx)("div",{className:"stack-arr",children:t.map((function(e){return Object(i.jsx)(on,{individualStack:e},e.value)}))})]})},cn=t(61),ln=function(e){var n=e.item,t=e.props,r=t.y,a=Object(cn.a)(t,["y"]);return Object(i.jsx)(Ze.a.div,{className:"oval",style:Object(K.a)(Object(K.a)({},a),{},{height:40,backgroundImage:n.isSwap?"linear-gradient(45deg, #13B1B7, #11C2C9)":"linear-gradient(45deg, #287ED0, #5466FF)",transform:r.interpolate((function(e){return"translate3d(0,".concat(e,"px,0)")}))}),children:Object(i.jsx)("div",{className:"decimal",children:rn(n.height)})})},un=function(e){var n=e.individualStack,t=e.value,r=0,a=Object(Ze.b)(n.map((function(e){return Object(K.a)(Object(K.a)({},e),{},{y:10+(r-=10)})})),(function(e){return e.id}),{from:{height:0,opacity:1},leave:{height:0,opacity:1},enter:function(e){return{y:e.y,height:e.height,opacity:1}},update:function(e){return{y:e.y,height:e.height}}});return Object(i.jsxs)("div",{className:"stack",children:[Object(i.jsx)("div",{className:"stack-boxes",children:a.map((function(e){var n=e.item,t=e.props,r=t.y,a=Object(cn.a)(t,["y"]);return Object(i.jsx)(ln,{item:n,props:Object(K.a)({y:r},a)},n.id)}))}),Object(i.jsx)("div",{className:"number-with-line",children:t})]})},hn=function(e){var n=e.item;return Object(i.jsx)("div",{className:"oval",style:{visibility:n.isShown?"visible":"hidden"},children:Object(i.jsx)("div",{className:"decimal",children:rn(n.height)})})},dn=function(){var e=Object(a.useContext)(Rn),n=e.referenceArray,t=e.stackArr;return Object(i.jsxs)("div",{className:"spaced-out-container",children:[Object(i.jsx)($e,{referenceArray:n,BlockType:hn}),Object(i.jsx)("div",{className:"stack-arr",children:t.map((function(e){return Object(i.jsx)(un,{individualStack:e.array,value:e.value},e.value)}))})]})},fn=function(e){var n=e.item,t=e.props,r=t.x,a=Object(cn.a)(t,["x"]),o=e.length,s=e.index,c=e.isShift,l=e.width;return Object(i.jsx)(Ze.a.div,{className:"animated-block",style:Object(K.a)(Object(K.a)({},a),{},{height:10*n.height+9,width:l,zIndex:o-s,transform:c?r.interpolate((function(e){return"translate3d(".concat(e,"px, 150px,0)")})):r.interpolate((function(e){return"translate3d(".concat(e,"px,0,0)")})),backgroundImage:c?"linear-gradient(45deg, #13B1B7, #11C2C9)":"linear-gradient(45deg, #287ED0, #5466FF)",pos:n.pos,prevPos:n.prevPos}),children:Object(i.jsx)("span",{children:n.height})})},mn=function(e){return e>12?(e-12)*(200/e):0},pn=function(e){var n=e.transitions,t=e.dataSize;return Object(i.jsxs)("div",{className:"container-one",children:[Object(i.jsx)("div",{className:"list",style:{transform:"translateX(-".concat(mn(t),"px)")},children:n.map((function(e,n){var r=e.item,a=e.props,o=a.x,s=Object(cn.a)(a,["x"]);return Object(i.jsx)(fn,{item:r,props:Object(K.a)({x:o},s),index:n,length:t,isShift:r.isShift,width:800/t,pos:r.pos,prevPos:r.prevPos},n)}))}),Object(i.jsx)("div",{className:"empty-space-for-merge-sort"})]})},jn=function(e){var n=e.item,t=e.props,r=t.x,a=Object(cn.a)(t,["x"]),o=e.length,s=e.index,c=e.isSwap,l=e.width;return Object(i.jsx)(Ze.a.div,{className:"animated-block",style:Object(K.a)(Object(K.a)({},a),{},{height:10*n.height,width:l,zIndex:o-s,transform:r.interpolate((function(e){return"translate3d(".concat(e,"px,0,0)")})),backgroundImage:c?"linear-gradient(45deg, #13B1B7, #11C2C9)":"linear-gradient(45deg, #287ED0, #5466FF)"}),children:Object(i.jsx)("span",{children:n.height})})},bn=function(e){var n=e.transitions,t=e.dataSize;return Object(i.jsx)("div",{className:"list",style:{transform:"translateX(-".concat(mn(t),"px)")},children:n.map((function(e,n){var r=e.item,a=e.props,o=a.x,s=Object(cn.a)(a,["x"]);return Object(i.jsx)(jn,{item:r,props:Object(K.a)({x:o},s),index:n,length:t,isSwap:r.isSwap,width:800/t},n)}))})},gn=function(){var e=Object(a.useContext)(Rn),n=e.isPlay,t=e.isReplay,r=e.arrayData,o=e.animationArr,s=e.idx,c=e.referenceArray,l=e.speed,u=e.setIdx,h=e.setReferenceArray,d=e.executeForwardAnimation,f=e.resetDataWhenAnimationFinish,m=e.dataSize,p=e.visualizerAlgorithm,j=e.isReset,b=e.setIsReset,g=[1e3,800,600,500,400,320,260,200,160,120],x=0;Object(a.useEffect)((function(){j&&(h(He(r)),u(0),b(!1))}),[r,t]),Object(a.useEffect)((function(){!t&&n&&s<o.length?setTimeout((function(){d()}),g[l-1]):!t&&n&&f(c)}),[n,s]);var v={transitions:Object(Ze.b)(c.map((function(e){return ae(p)?Object(K.a)(Object(K.a)({},e),{},{x:parseInt(e.xDirection)}):Object(K.a)(Object(K.a)({},e),{},{x:(x+=10)-10})})),(function(e){return e.id}),{from:{height:0,opacity:1},leave:{height:0,opacity:1},enter:function(e){return{x:e.x,height:e.height,opacity:1}},update:function(e){return{x:e.x,height:e.height}}}),dataSize:m};return ne(p)?Object(i.jsx)(nn,{}):te(p)?Object(i.jsx)(sn,{}):re(p)?Object(i.jsx)(dn,{}):ae(p)?Object(i.jsx)(pn,Object(K.a)({},v)):Object(i.jsx)(bn,Object(K.a)({},v))},xn=(t(584),function(e,n,t){if(n===e.length)return"Array is sorted";var r=e[n-1],i=r[0],a=r[1],o=r[2],s=t[i].height,c=t[a].height,l=c>s;if(o)return"Since swap is true, swap ".concat(c," and ").concat(s);var u="Check if ".concat(c," > ").concat(s," :\n");return u+=l?"Since ".concat(c," > ").concat(s,", swap is set to true"):"Since ".concat(c," <= ").concat(s,", swap is set to false and iteration continues")}),vn=function(e,n){var t=e[n-1],r=t.height,i=t.location;return t.isDistributing?"Put element ".concat(r," at the end of bucket ").concat(i):"Restore the first element (".concat(r,") in bucket ").concat(i," back to array")},yn={"Insertion Sort":xn,"Bubble Sort":xn,"Selection Sort":function(e,n,t){if(n===e.length)return"Array is sorted";var r=e[n-1],i=r[0],a=r[1],o=r[2],s=t[i].height,c=t[a].height,l=c<s;if(o)return s===c?"Since the smallest value is still ".concat(s,". There is no change in position"):"The smallest value so far is ".concat(c,". We swap it to index ").concat(a);var u="Check if ".concat(c," is smaller than the smallest value so far: ").concat(s,"\n");return u+=l?"Since ".concat(c," is smaller than ").concat(s,", smallest value is set to ").concat(c):"Since ".concat(c," is not smaller than ").concat(s,", no change to smallest value")},"Merge Sort":function(e,n,t){if(n===e.length)return"Array is sorted";if(void 0!==t[0].isShift){var r=e[n-1],i=r[2],a=He(t),o=r[0],s=r[1],c=ge(a,o,s);if(i){var l,u="Currently in merge process: ",h=Object(be.a)(t);try{for(h.s();!(l=h.n()).done;){var d=l.value;d.isShift&&(u+=d.height+", ")}}catch(g){h.e(g)}finally{h.f()}return u.slice(0,-1)}var f,m=t[c].height,p="Since the minimum is ".concat(m,", we move ").concat(m," up\nCurrently left in the merge process: "),j=Object(be.a)(t);try{for(j.s();!(f=j.n()).done;){var b=f.value;b.isShift&&(p+=b.height+", ")}}catch(g){j.e(g)}finally{j.f()}return p=p.slice(0,-1)}},"Quick Sort":function(e,n,t){if(n===e.length)return"Array is sorted";var r,i,a=e[n-1],o=a[0],s=a[1],c=a[2],l=t[o].height,u=t[s].height,h=t[a[3]].height,d=a[4],f=a[5],m=" Now we increment the loop variable from ".concat(s," to ").concat(s+1,"."),p="we increment the index of the smaller element from ".concat(f," to ").concat(f+1,".");return c?"iToJ"===d?"Since swap is true, we swap index of the smaller element, ".concat(f," with")+" value ".concat(l,", with loop variable index ").concat(s,", ")+"with value ".concat(u,".")+m:"Since we finish one iteration, we swap the pivot to next of index of smallest"+"element ".concat(o):"incI"===d?(r="Since ".concat(u," < pivot value ").concat(h,", "),s!==f+1?i=" Since index of smaller element ".concat(f+1," not equal to index of loop variable ").concat(s,", Swap is set to true."):(i=" Since index of smaller element ".concat(f+1," equal to index of loop variable ").concat(s,", Swap is set to false."),i+=m),r+p+i):(r="Since ".concat(u," >= pivot value ").concat(h,", "))+(i="Swap is set to false")+m},"Counting Sort":function(e,n,t){var r=e[n-1].height;return n>t.length?"Restore element ".concat(r," and decrease count of ").concat(r," by 1"):"Increase count of ".concat(e[n-1].height," by 1")},"Shell Sort":xn,"Radix Sort":vn,"Bucket Sort":function(e,n,t){var r=e[n-1];if(4===r.length){var i=r[3];return xn(e,n,t[i].array)}return void 0===r.isSort?vn(e,n):r.isSort?"Currently sorting bucket ".concat(r.location):"Bucket ".concat(r.location," has been sorted!")},"Heap Sort":function(e,n,t){if(n===e.length)return"Array is sorted";var r=e[n-1],i=r[0],a=r[1],o=r[2],s=r[3],c=t[i].height,l=t[a].height,u=l>c;if(s)return"Swap the largest item in the heap, ".concat(c,", with the \n    leaf node with the largest index, ").concat(l);if(o)return"Since swap is true, swap ".concat(l," and ").concat(c);var h="Check if ".concat(c," is larger than its child nodes:\n");return h+=u?"Since ".concat(l," > ").concat(c,", swap is set to true"):"Since ".concat(c," is larger than its child nodes, swap is set \n    to false and iteration continues")}},On=function(e,n,t,r,i){var a=yn[e];return re(e)?a(n,t,i):a(n,t,r)},kn=function(){var e=Object(a.useContext)(Rn),n=e.animationArr,t=e.idx,r=e.referenceArray,o=e.visualizerAlgorithm,s=e.animationPercentage,c=e.stackArr;return Object(i.jsx)("div",{className:"step-by-step-holder",children:Object(i.jsx)("p",{children:s>0&&On(o,n,t,r,c)})})},Sn=t(0),wn=(t(218),function(){var e=Object(a.useContext)(Rn),n=e.isPlay,t=e.animationPercentage,r=e.executeBackwardAnimation,o=e.idx,s=e.arrayData,c=e.setArrayData,l=e.setIsReset,u=e.visualizerAlgorithm,h=0===t;return Object(i.jsx)("button",{className:"forward-back-button-holder",style:{transform:"translateX(-10px)",cursor:h?"":n?"not-allowed":"pointer"},onClick:function(){return n?function(){}:(r(),void(o-1<=0&&(c(Fe(u,s)),l(!0))))},children:Object(i.jsx)(Sn.b.Provider,{value:{className:"forward-back-button",style:{color:h?"white":"#8789B5"}},children:Object(i.jsx)(p.c,{})})})}),Nn=(t(219),function(e){var n=e.type;return Object(i.jsx)(Sn.b.Provider,{value:{className:"three-state-button",style:{transform:"play"===n?"translateX(3px)":"translateX(0px)"}},children:"play"===n?Object(i.jsx)(p.a,{}):"pause"===n?Object(i.jsx)(p.d,{}):Object(i.jsx)(p.e,{})})}),An=function(){var e=Object(a.useContext)(Rn),n=e.isPlay,t=e.isReplay,r=e.setIsReplay,o=e.setIsPlay,s=e.setIsInMidstOfSort,c=e.setAnimationPercentage,l=e.setIsReset;return Object(i.jsx)("button",{className:"three-state-button-holder",onClick:function(){return t?(r(!1),c(0),l(!0),setTimeout((function(){return o(!0)}),300)):o(!n),void s(!0)},children:t?Object(i.jsx)(Nn,{type:"replay"}):n?Object(i.jsx)(Nn,{type:"pause"}):Object(i.jsx)(Nn,{type:"play"})})},Cn=(t(585),function(){var e=Object(a.useContext)(Rn),n=e.isPlay,t=e.dataSize,r=e.setArrayData,o=e.setIsInMidstOfSort,s=e.setIsReplay,c=e.setAnimationPercentage,l=e.visualizerAlgorithm,u=e.setCountArr,h=e.setStackArr,d=e.setIsReset,f=e.setHistoryArr;return Object(i.jsx)("div",{className:"new-data-box",style:{cursor:n?"not-allowed":"pointer"},children:Object(i.jsx)("span",{onClick:function(){n||(r(Re(t,l)),o(!1),c(0),s(!1),u(He(de)),h(He(me)),f([]),d(!0))},children:"New Data"})})}),In=function(){var e=Object(a.useContext)(Rn),n=e.isPlay,t=e.animationPercentage,r=e.executeForwardAnimation,o=e.idx,s=e.animationArr,c=100===t;return Object(i.jsx)("button",{className:"forward-back-button-holder",style:{transform:"translateX(10px)",cursor:c?"":n?"not-allowed":"pointer"},onClick:n?function(){}:function(){o<s.length&&r()},children:Object(i.jsx)(Sn.b.Provider,{value:{className:"forward-back-button",style:{color:c?"white":"#8789B5"}},children:Object(i.jsx)(p.f,{})})})},Tn=(t(586),function(){return Object(i.jsxs)("div",{className:"button-box",children:[Object(i.jsx)(wn,{}),Object(i.jsxs)("div",{className:"play-reset-button-box",children:[Object(i.jsx)(An,{}),Object(i.jsx)(Cn,{})]}),Object(i.jsx)(In,{})]})}),_n=(t(220),{"Bubble Sort":{name:"Bubble",description:"Bubble Sort is the simplest sorting algorithm that works by repeatedly swapping adjacent elements if they are in the wrong order. This procedure is repeated until no swaps are required, indicating that the list has been sorted.",additionalDesc:"",worstTime:Object(i.jsxs)("span",{children:["N",Object(i.jsx)("sup",{children:"2"})]}),averageTime:Object(i.jsxs)("span",{children:["N",Object(i.jsx)("sup",{children:"2"})]}),bestTime:"N",worstSpace:"1",stable:!0,inPlace:!0,link:"https://www.geeksforgeeks.org/bubble-sort/"},"Insertion Sort":{name:"Insertion",description:"Insertion Sort is a simple sorting algorithm that builds the final sorted list one item at a time. The list is virtually split into a sorted and an unsorted part. Values from the unsorted part are picked and placed at the correct position in the sorted part.",additionalDesc:"",worstTime:Object(i.jsxs)("span",{children:["N",Object(i.jsx)("sup",{children:"2"})]}),averageTime:Object(i.jsxs)("span",{children:["N",Object(i.jsx)("sup",{children:"2"})]}),bestTime:"N",worstSpace:"1",stable:!0,inPlace:!0,link:"https://www.geeksforgeeks.org/insertion-sort/"},"Quick Sort":{name:"Quick",description:"Quick Sort is a Divide and Conquer algorithm. It picks an element as pivot and partitions the given array around the picked pivot. There are many different versions of Quick Sort that pick pivot in different ways.",additionalDesc:"",worstTime:Object(i.jsxs)("span",{children:["N",Object(i.jsx)("sup",{children:"2"})]}),averageTime:"NlogN",bestTime:"N",worstSpace:"N",stable:!1,inPlace:!0,link:"https://www.geeksforgeeks.org/quick-sort/"},"Radix Sort":{name:"Radix",description:"Radix sort works by sorting each digit from least significant digit to most significant digit. So in base 10 (the decimal system), radix sort would sort by the digits in the 1's place, then the 10\u2019s place, and so on. To do this, radix sort uses counting sort as a subroutine to sort the digits in each place value.",additionalDesc:"d is the number of digits in the input numbers, b is the base for representing numbers,",worstTime:"d(n + b)",averageTime:"d(n + b)",bestTime:"d(n + b)",worstSpace:"n + b",stable:!0,inPlace:!1,link:"https://www.programiz.com/dsa/radix-sort"},"Bucket Sort":{name:"Bucket",description:"Bucket sort assumes that the input is drawn from a uniform distribution of [0, 1). The interval [0, 1) is divided into n equal-sized sub-intervals (buckets). Then, the input array is distributed into these buckets. To produce the output, we simply sort the numbers in each bucket and then go through the buckets in order to list the elements.",additionalDesc:"",worstTime:Object(i.jsxs)("span",{children:["N",Object(i.jsx)("sup",{children:"2"})]}),averageTime:"N",bestTime:"N",worstSpace:"N",stable:!0,inPlace:!1,link:"https://www.geeksforgeeks.org/bucket-sort-2/"},"Counting Sort":{name:"Counting",description:"Counting sort is a sorting technique based on keys between a specific range. It works by counting the number of objects having distinct key values (kind of hashing), and using arithmetic on those counts to determine the positions of each key value in the output sequence.",additionalDesc:"k is the range of the key values,",worstTime:"N + k",averageTime:"N + k",bestTime:"N + k",worstSpace:"N + k",stable:!0,inPlace:!1,link:"https://www.geeksforgeeks.org/counting-sort/"},"Selection Sort":{name:"Selection",description:"Selection Sort algorithm sorts an array by repeatedly finding the minimum element (considering ascending order) from unsorted part and putting it at the beginning. The algorithm maintains two subarrays, a subarray which is sorted and the remaining array which is unsorted",additionalDesc:"",worstTime:Object(i.jsxs)("span",{children:["N",Object(i.jsx)("sup",{children:"2"})]}),averageTime:Object(i.jsxs)("span",{children:["N",Object(i.jsx)("sup",{children:"2"})]}),bestTime:Object(i.jsxs)("span",{children:["N",Object(i.jsx)("sup",{children:"2"})]}),worstSpace:"1",stable:!1,inPlace:!0,link:"https://www.geeksforgeeks.org/selection-sort/"},"Merge Sort":{name:"Merge",description:"Merge Sort is a Divide and Conquer algorithm. It divides the input array into two halves, calls itself for the two halves, and then merges the two sorted halves. The merge() function is used for merging two halves. The merge(arr, l, m, r) is a key process that assumes that arr[l..m] and arr[m+1..r] are sorted and merges the two sorted subarrays into one",additionalDesc:"",worstTime:"NlogN",averageTime:"NlogN",bestTime:"NlogN",worstSpace:"N",stable:!0,inPlace:!1,link:"https://www.geeksforgeeks.org/merge-sort/"},"Shell Sort":{name:"Shell",description:"Shell Sort is mainly a variation of Insertion Sort. The idea of Shell Sort is to allow exchange of items far apart from each other, then progressively reducing the gap between elements to be compared. In the last iteration of Shell Sort where gap equals 1, regular Insertion Sort is performed on the resultant array.",additionalDesc:"",worstTime:Object(i.jsxs)("span",{children:["N",Object(i.jsx)("sup",{children:"2"})]}),averageTime:"NlogN",bestTime:"NlogN",worstSpace:"1",stable:!1,inPlace:!0,link:"https://www.geeksforgeeks.org/shellsort/"},"Heap Sort":{name:"Heap",description:"Heap Sort is a comparison based sorting technique based on Binary Heap data structure. It is similar to selection sort where we first find the maximum element and place the maximum element at the end. We repeat the same process for the remaining elements.",additionalDesc:"",worstTime:"NlogN",averageTime:"NlogN",bestTime:"NlogN",worstSpace:"1",stable:!1,inPlace:!0,link:"https://www.geeksforgeeks.org/heap-sort/"}}),zn=function(e){var n=e.sortDetails,t=function(){return Object(i.jsxs)("div",{className:"text",children:[Object(i.jsx)("p",{children:"Worst time complexity"}),Object(i.jsx)("p",{children:"Average time complexity"}),Object(i.jsx)("p",{children:"Best time complexity"}),Object(i.jsx)("p",{children:"Worst space complexity"})]})},r=function(){return Object(i.jsxs)("div",{className:"complexity",children:[Object(i.jsxs)("p",{children:["O(",n.worstTime,")"]}),Object(i.jsxs)("p",{children:["\u03b8(",n.averageTime,")"]}),Object(i.jsxs)("p",{children:["\u03a9(",n.bestTime,")"]}),Object(i.jsxs)("p",{children:["O(",n.worstSpace,")"]})]})},a=function(e){var n=e.type,t=e.isTick,r=function(){return t?Object(i.jsx)(Y.a,{size:"25",color:"#11C2C9"}):Object(i.jsx)(Y.d,{size:"25",color:"#FF4E4E"})};return Object(i.jsxs)("div",{className:"typeWithIcon",children:[Object(i.jsx)("p",{children:n}),Object(i.jsx)(r,{})]})};return Object(i.jsxs)("div",{className:"performance",children:[Object(i.jsx)("p",{className:"explanation-para",children:"Assuming N is the size of array, "+n.additionalDesc}),Object(i.jsxs)("div",{className:"row-container-one",children:[Object(i.jsx)(t,{}),Object(i.jsx)(r,{})]}),Object(i.jsxs)("div",{className:"row-container-two",children:[Object(i.jsx)(a,{type:"Stable",isTick:n.stable}),Object(i.jsx)(a,{type:"In-place",isTick:n.inPlace})]})]})},Pn=function(e){var n=e.algo,t=Object(a.useState)((function(){return _n[n]})),r=Object(v.a)(t,2),o=r[0],s=r[1];Object(a.useEffect)((function(){s(_n[n])}),[n]);var c=function(){return Object(i.jsxs)("header",{children:["How ",o.name," Sort works"]})},l=function(){return Object(i.jsx)("p",{style:{width:"112%"},children:o.description})},u=function(){return Object(i.jsx)("header",{children:"Performance"})},h=function(){return Object(i.jsx)("a",{className:"link",target:"_blank",rel:"noopener noreferrer",href:o.link,children:"Click for more info"})};return Object(i.jsxs)("div",{className:"main",children:[Object(i.jsx)(c,{}),Object(i.jsx)(l,{}),Object(i.jsx)(u,{}),Object(i.jsx)(zn,{sortDetails:o}),Object(i.jsx)(h,{})]})},Bn={"Bubble Sort":{Java:"void swap(int[] arr, int i, int j) {\n    int temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n}\n\nvoid bubbleSort(int[] arr) {\n    \n    // Loop in the range of unsorted elements\n    for (int i = arr.length - 1; i >= 0; i--) {\n        boolean swapped = true;\n        \n        // Bubble largest element to the end\n        for (int j = 0; j < i; j++) {\n            if (arr[j] > arr[j + 1]) {\n                swap(arr, j, j + 1);\n                swapped = false;\n            }\n        }\n        \n        // Array is already sorted as there are no swaps in this iteration\n        if (swapped) {\n            break;\n        }\n    }\n}\n",JavaScript:"function bubbleSort(arr) {\n\n  // Loop in the range of unsorted elements\n  for (let i = arr.length - 1; i >= 0; i--) {\n    let swapped = true;\n\n    // Bubble largest element to the end\n    for (let j = 0; j < i; j++) {\n      if (arr[j] > arr[j + 1]) {\n        [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n        swapped = false;\n      }\n    }\n\n    // Array is already sorted as there are no swaps in this iteration\n    if (swapped) {\n      break;\n    }\n  }\n}\n",Python:"def bubble_sort(arr):\n\n    # Loop in the range of unsorted elements\n    for i in range(len(arr) - 1, 0, -1):\n        swapped = True\n\n        # Bubble largest element to the end\n        for j in range(i):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n                swapped = False\n\n        # Array is already sorted as there are no swaps in this iteration\n        if swapped:\n            break\n","C/C++":"void swap(int *a, int *b)\n{\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nvoid bubbleSort(int arr[], int len)\n{\n    int i, j;\n    bool swapped;\n\n    // Loop in the range of unsorted elements\n    for (i = len - 1; i >= 0; --i)\n    {\n        swapped = true;\n\n        // Bubble largest element to the end\n        for (j = 0; j < i; ++j)\n        {\n            if (arr[j] > arr[j + 1])\n            {\n                swap(&arr[j], &arr[j + 1]);\n                swapped = false;\n            }\n        }\n\n        // Array is already sorted as there are no swaps in this iteration\n        if (swapped)\n        {\n            break;\n        }\n    }\n}\n"},"Insertion Sort":{Java:"void insertionSort(int[] arr) {\n\n    // Elements from 0 to i - 1 are sorted\n    for (int i = 1; i < arr.length; i++) {\n\n        int key = arr[i];\n        int j = i - 1;\n\n        // Locate position of key to insert in the sorted region\n        while (j >= 0 && arr[j] > key) {\n            arr[j + 1] = arr[j];\n            j -= 1;\n        }\n        arr[j + 1] = key;\n    }\n}\n",JavaScript:"function insertionSort(arr) {\n\n  // Elements from 0 to i - 1 are sorted\n  for (let i = 1; i < arr.length; i++) {\n      \n    const key = arr[i];\n    let j = i - 1;\n\n    // Locate position of key to insert in the sorted region\n    while (j >= 0 && arr[j] > key) {\n      arr[j + 1] = arr[j];\n      j -= 1;\n    }\n    arr[j + 1] = key;\n  }\n}\n",Python:"def insertion_sort(arr):\n\n    # Elements from 0 to i - 1 are sorted\n    for i in range(1, len(arr)):\n\n        key = arr[i]\n        j = i - 1\n\n        # Locate position of key to insert in the sorted region\n        while j >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = key\n","C/C++":"void insertionSort(int arr[], int len)\n{\n    // Elements from 0 to i - 1 are sorted\n    for (int i = 1; i < len; i++)\n    {\n\n        int key = arr[i];\n        int j = i - 1;\n\n        // Locate position of key to insert in the sorted region\n        while (j >= 0 && arr[j] > key)\n        {\n            arr[j + 1] = arr[j];\n            j -= 1;\n        }\n        arr[j + 1] = key;\n    }\n}\n"},"Quick Sort":{Java:"void swap(int[] arr, int i, int j) {\n    int temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n}\n\nint partition(int[] arr, int low, int high) {\n    int pivot = arr[high];\n    int i = low - 1; // index of smaller element \n    for (int j = low; j < high; j++) {\n        // If current element is smaller than the pivot \n        if (arr[j] < pivot) {\n            i++;\n            swap(arr, i, j);\n        }\n    }\n    swap(arr, i + 1, high);\n    return i + 1;\n}\n\n/* The main function that implements QuickSort() \n  arr[] --\x3e Array to be sorted, \n  low  --\x3e Starting index, \n  high  --\x3e Ending index */\nvoid quickSortHelper(int[] arr, int low, int high) {\n    if (low < high) { \n        /* pi is partitioning index, arr[pi] is  \n           now at right place */\n        int pi = partition(arr, low, high);\n        // Recursively sort elements before \n        // partition and after partition \n        quickSortHelper(arr, low, pi - 1);\n        quickSortHelper(arr, pi + 1, high);\n    }\n}\n\nvoid quickSort(int[] arr) {\n    quickSortHelper(arr, 0, arr.length - 1);\n}\n\n",JavaScript:"function partition(arr, low, high) {\n  // Take last element as the pivot\n  let pivot = arr[high];\n  let i = low - 1;\n  for (let j = low; j < high; j++) {\n    // If current element is smaller than the pivot\n    if (arr[j] < pivot) {\n      i++;\n      [arr[j], arr[i]] = [arr[i], arr[j]];\n    }\n  }\n  // Place pivot in the correct position in the partition\n  [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\n  return i + 1;\n}\n\nfunction quickSortHelper(arr, low, high) {\n  if (low < high) {\n    /* pi is partitioning index, arr[pi] is  \n       now at right place */\n    let pi = partition(arr, low, high);\n    // Recursively sort elements before \n    // partition and after partition \n    quickSortHelper(arr, low, pi - 1);\n    quickSortHelper(arr, pi + 1, high);\n  }\n}\n\nfunction quickSort(arr) {\n  quickSortHelper(arr, 0, arr.length - 1);\n}\n\n",Python:"def partition(arr, low, high):\n    i = low - 1\n\n    # Take last element as the pivot\n    pivot = arr[high]\n    for j in range(low, high):\n\n        # If current element is smaller than the pivot\n        if arr[j] < pivot:\n        i = i + 1\n        arr[i], arr[j] = arr[j], arr[i]\n\n    # Place pivot in the correct position in the partition\n    arr[i + 1], arr[high] = arr[high], arr[i + 1]\n    return i + 1\n\n\ndef quick_sort_helper(arr, low, high):\n    while low < high:\n\n        pi = partition(arr, low, high)\n        # pi is partitioning index, arr[pi] is  \n        # now at right place */\n        if low < high:\n             int pi = partition(arr, low, high)\n             quick_sort_helper(arr, low, pi - 1)\n             quick_sort_helper(arr, pi + 1, high)\n\n\ndef quick_sort(arr):\n    quick_sort_helper(arr, 0, len(arr) - 1)\n\n\n","C/C++":"void swap(int *a, int *b)\n{\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint partition(int arr[], int low, int high)\n{\n    // Take last element as the pivot\n    int pivot = arr[high];\n    int i = low - 1;\n    for (int j = low; j <= high - 1; ++j)\n    {\n        // If current element is smaller than the pivot\n        if (arr[j] <= pivot)\n        {\n            ++i;\n            swap(&arr[i], &arr[j]);\n        }\n    }\n    // Place pivot in the correct position in the partition\n    swap(&arr[i + 1], &arr[high]);\n    return i + 1;\n}\n\nvoid quickSortHelper(int arr[], int low, int high)\n{\n    if (low < high)\n    {\n        int pi = partition(arr, low, high);\n\n        quickSortHelper(arr, low, pi - 1);\n        quickSortHelper(arr, pi + 1, high);\n    }\n}\n\nvoid quickSort(int arr[], int len)\n{\n    quickSortHelper(arr, 0, len - 1);\n}\n\n"},"Radix Sort":{Java:"void radixSort(int[] arr) {\n\n    // Find the max number and multiply it by 10 to get a number\n    // with no. of digits of max + 1\n    int maxNum = arr[0];\n    for (int num : arr) {\n        maxNum = Math.max(num, maxNum);\n    }\n    maxNum *= 10;\n    int divisor = 10;\n    while (divisor < maxNum) {\n\n        // Create bucket arrays for each of 0-9\n        ArrayList<ArrayList<Integer>> buckets = new ArrayList<>(10);\n        for (int i = 0; i < 10; i++) {\n            buckets.add(new ArrayList<>());\n        }\n\n        // For each number, get the current significant digit and put it in\n        // the respective bucket\n        for (int num : arr) {\n            int index = (num % divisor) / (divisor / 10);\n            ArrayList<Integer> currentBucket = buckets.get(index);\n            currentBucket.add(num);\n        }\n\n        // Reconstruct the array by concatenating all sub arrays\n        int idx = 0;\n        for (ArrayList<Integer> bucket : buckets) {\n            for (int num : bucket) {\n                arr[idx] = num;\n                idx++;\n            }\n        }\n\n        // Move to the next significant digit\n        divisor *= 10;\n    }\n}\n",JavaScript:"function radixSort(arr) {\n\n  // Find the max number and multiply it by 10 to get a number\n  // with no. of digits of max + 1\n  const maxNum = Math.max(...arr) * 10;\n  let divisor = 10;\n\n  while (divisor < maxNum) {\n      \n    // Create bucket arrays for each of 0-9\n    let buckets = [...Array(10)].map(() => []);\n\n    // For each number, get the current significant digit and put it in\n    // the respective bucket\n    for (let num of arr) {\n      buckets[Math.floor((num % divisor) / (divisor / 10))].push(num);\n    }\n\n    // Reconstruct the array by concatenating all sub arrays\n    arr = [].concat.apply([], buckets);\n\n    // Move to the next significant digit\n    divisor *= 10;\n  }\n\n  return arr;\n}\n",Python:"def radix_sort(arr):\n\n    # Find the max number and multiply it by 10 to get a number\n    # with no. of digits of max + 1\n    max_num = max(arr) * 10\n    divisor = 10\n\n    while divisor < max_num:\n\n        # Create bucket arrays for each of 0-9\n        buckets = [None] * 10\n        for i in range(10):\n            buckets[i] = []\n\n        # For each number, get the current significant digit and put it in\n        # the respective bucket\n        for num in arr:\n            buckets[math.floor((num % divisor) / (divisor / 10))].append(num)\n\n        # Reconstruct the array by concatenating all sub arrays\n        arr = []\n        for bucket in buckets:\n            arr.extend(bucket)\n        divisor *= 10\n\n    return arr\n","C/C++":"void radixSort(int arr[], int len)\n{\n\n    int maxNum = arr[0];\n    int i, j, k, divisor = 10;\n\n    // Assume that our bucket size is capped at 10 for simplicity\n    int buckets[10][10];\n    int bucketCount[10];\n\n    // Find the max number and multiply it by 10 to get a number\n    // with no. of digits of max + 1\n    for (i = 0; i < len; ++i)\n    {\n        if (arr[i] > maxNum)\n        {\n            maxNum = arr[i];\n        }\n    }\n    maxNum *= 10;\n\n    while (divisor < maxNum)\n    {\n        // Initialize bucket arrays for each of 0-9\n        for (int i = 0; i < 10; ++i)\n        {\n            bucketCount[i] = 0;\n        }\n\n        // For each number, get the current significant digit and put it in\n        // the respective bucket\n        for (i = 0; i < len; ++i)\n        {\n            int num = arr[i];\n            int index = (num % divisor) / (divisor / 10);\n            buckets[index][bucketCount[index]] = num;\n            bucketCount[index]++;\n        }\n\n        // Reconstruct the array by concatenating all sub arrays\n        i = 0;\n        for (j = 0; j < 10; ++j)\n        {\n            for (k = 0; k < bucketCount[j]; ++k)\n            {\n                arr[i] = buckets[j][k];\n                i++;\n            }\n        }\n\n        // Move to the next significant digit\n        divisor *= 10;\n    }\n}\n"},"Bucket Sort":{Java:"void bucketSort(double[] arr) {\n\n    int totalSlots = 10;\n    ArrayList<ArrayList<Double>> buckets = new ArrayList<>(totalSlots);\n\n    // Create bucket arrays for each of 0-9\n    for (int i = 0; i < totalSlots; i++) {\n        buckets.add(new ArrayList<>());\n    }\n\n    // For each number, get the digit in the tenth place and put it in\n    // the respective bucket\n    for (double num : arr) {\n        int bucket_idx = (int) (totalSlots * num);\n        buckets.get(bucket_idx).add(num);\n    }\n\n    // Sort each bucket in the list of buckets\n    for (ArrayList<Double> bucket : buckets) {\n        Collections.sort(bucket);\n    }\n\n    // Reconstruct the array by concatenating all sub arrays\n    int index = 0;\n    for (ArrayList<Double> bucket : buckets) {\n        for (double item : bucket) {\n            arr[index] = item;\n            index++;\n        }\n    }\n}\n",JavaScript:"function bucketSort(arr) {\n    \n  const totalSlots = 10;\n\n  // Create bucket arrays for each of 0-9\n  let buckets = [...Array(10)].map(() => []);\n\n  // For each number, get the digit in the tenth place and put it in\n  // the respective bucket\n  for (const num of arr) {\n    const bucket_idx = Math.floor(totalSlots * num);\n    buckets[bucket_idx].push(num);\n  }\n\n  // Sort each bucket in the list of buckets\n  for (const bucket of buckets) {\n    bucket.sort();\n  }\n\n  // Reconstruct the array by concatenating all sub arrays\n  return [].concat.apply([], buckets);\n}\n",Python:"def bucket_sort(arr):\n\n    total_slots = 10\n    buckets = []\n\n    # Create bucket arrays for each of 0-9\n    for i in range(total_slots):\n        buckets.append([])\n\n    # For each number, get the digit in the tenth place and put it in\n    # the respective bucket\n    for num in arr:\n        bucket_idx = int(total_slots * num)\n        buckets[bucket_idx].append(num)\n\n    # Sort each bucket in the list of buckets\n    for bucket in buckets:\n        bucket.sort()\n\n    # Reconstruct the array by concatenating all sub arrays\n    index = 0\n    for bucket in buckets:\n        for item in bucket:\n            arr[index] = item\n            index += 1\n","C/C++":"void bucketSort(double arr[], int len)\n{\n    int i, j, k;\n\n    // Assume that our bucket size is capped at 10 for simplicity\n    int buckets[10][10];\n    int bucketCount[10];\n\n    // For each number, get the digit in the tenth place and put it in\n    // the respective bucket\n    for (i = 0; i < len; ++i)\n    {\n        double num = arr[i];\n        int index = floor(num * 10);\n        buckets[index][bucketCount[index]] = num;\n        bucketCount[index]++;\n    }\n\n    // Sort each bucket in the list of buckets\n    for (i = 0; i < 10; ++i)\n    {\n        sort(buckets[i]);\n    }\n\n    // Reconstruct the array by concatenating all sub arrays\n    i = 0;\n    for (j = 0; j < 10; ++j)\n    {\n        for (k = 0; k < bucketCount[j]; ++k)\n        {\n            arr[i] = buckets[j][k];\n            i++;\n        }\n    }\n}\n"},"Counting Sort":{Java:"// Assume array contains only non-zero digits\nvoid countingSort(int[] arr) {\n\n    int maxElement = arr[0];\n    // Get max element\n    for (int i = 1; i < arr.length; i++) {\n        maxElement = Math.max(maxElement, arr[i]);\n    }\n\n    // Create count array of length maxElement + 1\n    int[] countArr = new int[maxElement + 1];\n\n    // Fill in count arr\n    for (int i = 0; i < arr.length; i++) {\n        countArr[arr[i]]++;\n    }\n\n    // Insert elements back into original array\n    int index = 0;\n    for (int i = 0; i < countArr.length; i++) {\n        while (countArr[i] != 0) {\n            arr[index] = i;\n            index++;\n            countArr[i]--;\n        }\n    }\n}\n",JavaScript:"// Assume array contains only non-zero digits\nfunction countingSort(arr) {\n  // Get max element\n  const maxElement = Math.max(...arr);\n\n  // Create count array of length maxElement + 1\n  const countArr = new Array(maxElement + 1);\n  countArr.fill(0);\n\n  // Fill in count arr\n  for (let i = 0; i < arr.length; i++) {\n    countArr[arr[i]]++;\n  }\n\n  // Insert elements back into original array\n  let index = 0;\n  for (let i = 0; i < countArr.length; i++) {\n    while (countArr[i] != 0) {\n      arr[index] = i;\n      index++;\n      countArr[i]--;\n    }\n  }\n}\n",Python:"# Assume array contains only non-zero digits\ndef counting_sort(arr):\n    # Get max element\n    max_element = max(arr)\n\n    # Create count array of length max_element + 1\n    count_arr = [0] * (max_element + 1)\n\n    # Fill in count arr\n    for i in range(len(arr)):\n        count_arr[arr[i]] += 1\n\n    # Insert elements back into original array\n    index = 0\n    for i in range(len(count_arr)):\n        while count_arr[i] is not 0:\n            arr[index] = i\n            index += 1\n            count_arr[i] -= 1\n","C/C++":"// Assume array contains only non-zero digits\nvoid countingSort(int arr[], int len)\n{\n    int i;\n    int maxElement = arr[0];\n    // Get max element\n    for (i = 1; i < len; ++i)\n    {\n        if (arr[i] > maxElement)\n        {\n            maxElement = arr[i];\n        }\n    }\n\n    // Create array with length maxElement + 1\n    int countArrLength = maxElement + 1;\n    int *countArr = (int *)malloc(countArrLength * sizeof(int));\n\n    for (i = 0; i < countArrLength; ++i)\n    {\n        countArr[i] = 0;\n    }\n\n    // Fill in count arr\n    for (i = 0; i < len; ++i)\n    {\n        countArr[arr[i]]++;\n    }\n\n    // Insert elements back into original array\n    int index = 0;\n    for (i = 0; i < countArrLength; ++i)\n    {\n        while (countArr[i] != 0)\n        {\n            arr[index] = i;\n            ++index;\n            countArr[i]--;\n        }\n    }\n}\n\n"},"Selection Sort":{Java:"void sort(int[] arr) {\n    int n = arr.length;\n    // One by one move boundary of unsorted subarray \n    for (int i = 0; i < n - 1; i++) {\n        // Find the minimum element in unsorted array \n        int minIdx = i;\n        for (int j = i + 1; j < n; j++) {\n            if (arr[j] < arr[min_idx]) {\n                minIdx = j;\n            }\n        }\n        // Swap the found minimum element with the first element \n        int temp = arr[minIdx];\n        arr[minIdx] = arr[i];\n        arr[i] = temp;\n    }\n} \n",JavaScript:"function selectionSort(inputArr) {\n  let n = inputArr.length;\n  for (let i = 0; i < n - 1; i++) {\n    // Finding the smallest number in the subarray\n    let min = i;\n    for (let j = i + 1; j < n; j++) {\n      if (inputArr[j] < inputArr[min]) {\n        min = j;\n      }\n    }\n    if (min != i) {\n      // Swapping the elements\n      let tmp = inputArr[i];\n      inputArr[i] = inputArr[min];\n      inputArr[min] = tmp;\n    }\n  }\n  return inputArr;\n}\n",Python:"def selection_sort(L):\n    # i indicates how many items were sorted\n    for i in range(len(L) - 1):\n        # To find the minimum value of the unsorted segment\n        # We first assume that the first element is the lowest\n        min_index = i\n        # We then use j to loop through the remaining elements\n        for j in range(i + 1, len(L) - 1):\n            # Update the min_index if the element at j is lower than it\n            if L[j] < L[min_index]:\n                min_index = j\n        # After finding the lowest item of the unsorted regions,\n        # swap with the first unsorted item\n        L[i], L[min_index] = L[min_index], L[i]\n","C/C++":"void selectionSort(int arr[], int n)\n{\n    int i, j, minIdx;\n    // One by one move boundary of unsorted subarray \n    for (i = 0; i < n - 1; i++)\n    {\n        // Find the minimum element in unsorted array \n        minIdx = i;\n        for (j = i + 1; j < n; j++) \n        {\n            if (arr[j] < arr[min_idx]) \n            {\n                minIdx = j;\n            }\n        }\n        // Swap the found minimum element with the first element \n        swap(&arr[minIdx], &arr[i]);\n    }\n} \n"},"Merge Sort":{Java:"/* Merges two subarrays of arr[]. First subarray is arr[l..m]\n * Second subarray is arr[m+1..r] */\nvoid merge(int[] arr, int left, int mid, int right) {\n    // Find sizes of two subarrays to be merged\n    int n1 = mid - left + 1;\n    int n2 = right - mid;\n\n    // Create temp arrays\n    int[] leftArray = new int[n1];\n    int[] rightArray = new int[n2];\n\n    // Copy data to temp arrays\n    for (int i = 0; i < n1; i++) {\n        leftArray[i] = arr[left + i];\n    }\n\n    for (int j = 0; j < n2; j++) {\n        rightArray[j] = arr[mid + 1 + j];\n    }\n\n    // Initial indexes of first and second subarrays\n    int i = 0, j = 0;\n\n    // Initial index of merged subarray array\n    int k = left;\n    // Merge the arrays\n    while (i < n1 && j < n2) {\n        if (leftArray[i] <= rightArray[j]) {\n            arr[k++] = leftArray[i++];\n        } else {\n            arr[k++] = rightArray[j++];\n        }\n    }\n\n    // Copy remaining elements of leftArray if any\n    while (i < n1) {\n        arr[k++] = leftArray[i++];\n    }\n\n    // Copy remaining elements of rightArray if any\n    while (j < n2) {\n        arr[k++] = rightArray[j++];\n    }\n}\n\n// Main function that sorts arr[l..r] using merge()\nvoid mergeSortHelper(int[] arr, int left, int right) {\n    if (left < right) {\n        // Find the middle point\n        int mid = (left + right) / 2;\n\n        // Sort first and second halves\n        mergeSortHelper(arr, left, mid);\n        mergeSortHelper(arr, mid + 1, right);\n\n        // Merge the sorted halves\n        merge(arr, left, mid, right);\n    }\n}\n\nvoid mergeSort(int[] arr) {\n    mergeSortHelper(arr, 0, arr.length - 1);\n}\n",JavaScript:"function merge(left, right) {\n  let arr = []\n  // Break out of loop if any one of the array gets empty\n  while (left.length && right.length) {\n    // Pick the smaller element of left and right sub arrays \n    if (left[0] < right[0]) {\n      arr.push(left.shift())\n    } else {\n      arr.push(right.shift())\n    }\n  }\n\n  /* Concatenating the leftover elements\n   * (in case we didn't go through the entire left or right array) */\n  return [ ...arr, ...left, ...right ]\n}\n\nfunction mergeSort(array) {\n  const half = array.length / 2;\n\n  // Base case or terminating case\n  if (array.length < 2) {\n    return array;\n  }\n\n  const left = array.splice(0, half);\n  return merge(mergeSort(left), mergeSort(array));\n}\n",Python:"def mergeSort(arr):\n    if len(arr) > 1:\n        # Finding the mid of the array\n        mid = len(arr)//2\n        # Dividing the array elements\n        left_array = arr[:mid]\n        # into 2 halves\n        right_array = arr[mid:]\n        # Sorting the first half\n        mergeSort(left_array)\n        # Sorting the second half\n        mergeSort(right_array)\n\n        i = j = k = 0\n\n        # Copy data to temp arrays left_array and right_array\n        while i < len(left_array) and j < len(right_array):\n            if left_array[i] < right_array[j]:\n                arr[k] = left_array[i]\n                i += 1\n            else:\n                arr[k] = right_array[j]\n                j += 1\n            k += 1\n\n        # Checking if any element was left\n        while i < len(left_array):\n            arr[k] = left_array[i]\n            i += 1\n            k += 1\n\n        while j < len(right_array):\n            arr[k] = right_array[j]\n            j += 1\n            k += 1\n","C/C++":"// Merges two subarrays of arr[]. First subarray is arr[l..m] \n// Second subarray is arr[m+1..r] \nvoid merge(int arr[], int left, int mid, int right)\n{\n    int i, j, k;\n    int n1 = mid - left + 1;\n    int n2 = right - mid;\n\n    // create temp arrays\n    int leftArray[n1], rightArray[n2];\n\n    // Copy data to temp arrays leftArray and rightArray\n    for (i = 0; i < n1; ++i) \n    {\n        leftArray[i] = arr[l + i];\n    }\n\n    for (j = 0; j < n2; ++j) \n    {\n        rightArray[j] = arr[m + 1 + j];\n    }\n\n    // Merge the temp arrays back into arr[l..r]\n    i = 0; // Initial index of first subarray\n    j = 0; // Initial index of second subarray\n    k = left; // Initial index of merged subarray\n    while (i < n1 && j < n2) \n    {\n        if (leftArray[i] <= rightArray[j]) \n        {\n            arr[k++] = leftArray[i++];\n        }\n        else \n        {\n            arr[k++] = rightArray[j++];\n        }\n    }\n\n    // Copy the remaining elements of leftArray, if there are any\n    while (i < n1) \n    {\n        arr[k++] = leftArray[i++];\n    }\n\n    // Copy the remaining elements of rightArray, if there are any \n    while (j < n2) \n    {\n        arr[k++] = rightArray[j++];\n    }\n}\n\n// left is for left index and right is right index \n// of the sub-array of arr to be sorted \nvoid mergeSort(int arr[], int left, int right)\n{\n    if (left < right) \n    {\n        // Same as (left + right) / 2, \n        // but avoids overflow for large left and right \n        int mid = left + (right - left) / 2;\n\n        // Sort first and second halves\n        mergeSort(arr, left, mid);\n        mergeSort(arr, mid + 1, right);\n\n        merge(arr, left, mid, right);\n    }\n}\n"},"Shell Sort":{Java:"void shellSort(int[] arr) { \n    int n = arr.length; \n\n    // Start with a big gap, then reduce the gap \n    for (int gap = n / 2; gap > 0; gap /= 2) { \n\n    // Do a gapped insertion sort for this gap size \n        for (int i = gap; i < n; i += 1) { \n        int temp = arr[i]; \n\n        // Shift earlier gap-sorted elements up until \n        // the correct location for a[i] is found \n        int j; \n        for (j = i; j >= gap && arr[j - gap] > temp; j -= gap) { \n            arr[j] = arr[j - gap]; \n\n            // Put temp (the original a[i]) in its correct location \n            arr[j] = temp; \n        } \n    } \n} \n",JavaScript:"function shellSort(arr) {\n  let n = arr.length;\n  \n  // Start with a really large gap, and then reduce the gap until there isn't any. \n  // With this, the gap starts as half of the array length, and then half of that \n  // every time \n  for (let gap = Math.floor(n / 2); gap > 0; gap = Math.floor(gap / 2)) { \n  \n    // Do a insertion sort for each of the section the gap ends up dividing \n    for (let i = gap; i < n; i += 1) { \n  \n      // We store the current variable \n      let temp = arr[i]; \n  \n      // This is the insertion sort to sort the section into order \n      let j; \n      for (j = i; j >= gap && arr[j - gap] > temp; j -= gap) { \n        arr[j] = arr[j - gap]; \n      }\n      arr[j] = temp;\n    } \n  } \n  return arr;\n} \n",Python:"def shellSort(arr): \n\n    # Start with a big gap, then reduce the gap \n    n = len(arr) \n    gap = n // 2\n\n    # Do a gapped insertion sort for this gap size    while gap > 0: \n        for i in range(gap, n): \n            temp = arr[i] \n  \n            # Shift earlier gap-sorted elements up until the correct \n            # location for a[i] is found \n            j = i \n            while  j >= gap and arr[j - gap] > temp: \n                arr[j] = arr[j - gap] \n                j -= gap \n  \n            # Put temp (the original a[i]) in its correct location \n            arr[j] = temp \n        gap //= 2 \n","C/C++":"int shellSort(int arr[], int n) \n{ \n    // Start with a big gap, then reduce the gap \n    for (int gap = n / 2; gap > 0; gap /= 2) \n    { \n        // Do a gapped insertion sort for this gap size \n        for (int i = gap; i < n; i += 1) \n        { \n            int temp = arr[i]; \n  \n            // Shift earlier gap-sorted elements up until the correct  \n            // location for a[i] is found \n            int j; \n            for (j = i; j >= gap && arr[j - gap] > temp; j -= gap) {\n                arr[j] = arr[j - gap]; \n            } \n  \n            // Put temp (the original a[i]) in its correct location \n            arr[j] = temp; \n        } \n    } \n    return 0; \n} \n"},"Heap Sort":{Java:"// To heapify a sub-tree rooted with node i which is \n// an index in arr[]. n is size of heap \nvoid heapify(int[] arr, int n, int i) { \n    int largest = i; // Initialize largest as root \n    int l = 2 * i + 1; // left = 2 * i + 1 \n    int r = 2 * i + 2; // right = 2 * i + 2 \n \n    // If left child is larger than root \n    if (l < n && arr[l] > arr[largest]) \n        largest = l; \n \n    // If right child is larger than largest so far \n    if (r < n && arr[r] > arr[largest]) \n        largest = r; \n \n    // If largest is not root \n    if (largest != i) { \n        int swap = arr[i]; \n        arr[i] = arr[largest]; \n        arr[largest] = swap; \n \n        // Recursively heapify the affected sub-tree \n        heapify(arr, n, largest); \n    }\n} \n \nvoid sort(int[] arr) {\n    int n = arr.length;\n \n    // Build heap (rearrange array) \n    for (int i = n / 2 - 1; i >= 0; i--) { \n        heapify(arr, n, i); \n    } \n \n    // One by one extract an element from heap\n    for (int i = n - 1; i > 0; i--) { \n \n        // Move current root to end \n        int temp = arr[0]; \n        arr[0] = arr[i]; \n        arr[i] = temp; \n \n        // Call max heapify on the reduced heap \n        heapify(arr, i, 0); \n    } \n} \n",JavaScript:"let array_length; \n\n// To heapify a sub-tree rooted with node i which is \n// an index in arr[] \nfunction heap_root(input, i) { \n  let left = 2 * i + 1; \n  let right = 2 * i + 2; \n  let max = i; \n\n  // If left child is larger than root \n  if (left < array_length && input[left] > input[max]) { \n    max = left;\n  }\n\n  // If right child is larger than largest so far \n  if (right < array_length && input[right] > input[max])     { \n    max = right; \n  } \n\n  // If largest is not root \n  if (max != i) { \n    swap(input, i, max); \n\n    // Recursively heapify the affected sub-tree \n    heap_root(input, max); \n  } \n} \n\nfunction swap(input, index_A, index_B) { \n  let temp = input[index_A]; \n\n  input[index_A] = input[index_B]; \n  input[index_B] = temp; \n} \n\nfunction heapSort(arr) { \n    \n  array_length = arr.length; \n\n  // Build heap (rearrange array) \n  for (let i = Math.floor(array_length / 2); i >= 0; i -= 1) {\n    heap_root(arr, i); \n  } \n\n  // One by one extract an element from heap\n  for (i = arr.length - 1; i > 0; i--) { \n    // Move current root to end \n    swap(arr, 0, i); \n    array_length--; \n\n    // Call max heapify on the reduced heap \n    heap_root(arr, 0); \n  }\n} \n",Python:"# To heapify sub-tree rooted at index i. n is size of heap \ndef heapify(arr, n, i): \n    largest = i  # Initialize largest as root \n    l = 2 * i + 1     # left = 2 * i + 1 \n    r = 2 * i + 2     # right = 2 * i + 2 \n \n    # See if left child of root exists and is \n    # greater than root \n    if l < n and arr[largest] < arr[l]: \n        largest = l \n \n    # See if right child of root exists and is \n    # greater than root \n    if r < n and arr[largest] < arr[r]: \n        largest = r \n \n    # Change root, if needed \n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]  # swap\n \n        # Heapify the root \n        heapify(arr, n, largest)\n \ndef heapSort(arr): \n    n = len(arr) \n \n    # Build a maxheap \n    for i in range(n//2 - 1, -1, -1): \n        heapify(arr, n, i) \n \n    # One by one extract elements \n    for i in range(n-1, 0, -1): \n        // Move current root to end \n        arr[i], arr[0] = arr[0], arr[i] \n        heapify(arr, i, 0) \n","C/C++":"#include <iostream> \n \n// To heapify a sub-tree rooted with node i which is\n// an index in arr[]. n is size of heap\nvoid heapify(int arr[], int n, int i) \n{ \n    int largest = i; // Initialize largest as root\n    int l = 2 * i + 1; // left = 2 * i + 1 \n    int r = 2 * i + 2; // right = 2 * i + 2 \n \n    // If left child is larger than root \n    if (l < n && arr[l] > arr[largest]) \n        largest = l; \n \n    // If right child is larger than largest so far \n    if (r < n && arr[r] > arr[largest])\n        largest = r;\n \n    // If largest is not root\n    if (largest != i) { \n        swap(arr[i], arr[largest]); \n \n        // Recursively heapify the affected sub-tree \n        heapify(arr, n, largest); \n    } \n} \n \nvoid heapSort(int arr[], int n) \n{ \n    // Build heap (rearrange array) \n    for (int i = n / 2 - 1; i >= 0; i--) \n        heapify(arr, n, i);\n \n    // One by one extract an element from heap \n    for (int i = n - 1; i > 0; i--) { \n        // Move current root to end \n        swap(arr[0], arr[i]);\n \n        // Call max heapify on the reduced heap \n        heapify(arr, i, 0); \n    }\n} \n"}},Dn=(t(221),function(e){var n=e.selected,t=e.setSelected,r=function(e){var r=e.language;return Object(i.jsx)("p",{className:"select",style:{background:n===r?"linear-gradient(0deg, #7c89f8, #5466ff)":"#A5BBC9"},onClick:function(){return t(r)},children:r})};return Object(i.jsxs)("div",{className:"selector",children:[Object(i.jsx)(r,{language:"Java"}),Object(i.jsx)(r,{language:"JavaScript"}),Object(i.jsx)(r,{language:"Python"}),Object(i.jsx)(r,{language:"C/C++"})]})}),Mn=t(252),Fn=t.n(Mn),Hn=(t(592),t(1007),t(1008),t(1009),t(1010),t(1011),function(e){var n=e.algo,t=Object(a.useState)((function(){return Bn[n]})),r=Object(v.a)(t,2),o=r[0],s=r[1],c=Object(a.useState)("Java"),l=Object(v.a)(c,2),u=l[0],h=l[1];Object(a.useEffect)((function(){s(Bn[n])}),[n]);return Object(i.jsxs)("div",{className:"code-template",children:[Object(i.jsx)(Dn,{selected:u,setSelected:h}),Object(i.jsx)(Fn.a,{className:"editor",mode:"C/C++"===u?"c_cpp":u.toLowerCase(),theme:"textmate",fontSize:14,name:"UNIQUE_ID_OF_DIV",editorProps:{$blockScrolling:!0},value:o[u],readOnly:!0})]})}),Ln=(t(1012),function(e){var n=e.visualizerAlgorithm;return Object(i.jsxs)("div",{className:"code",children:[Object(i.jsx)(Pn,{algo:n}),Object(i.jsx)(Hn,{algo:n})]})}),Rn=o.a.createContext({isPlay:!1,isReplay:!1}),qn=function(){var e=Object(a.useState)(!1),n=Object(v.a)(e,2),t=n[0],r=n[1],o=Object(a.useState)(!1),s=Object(v.a)(o,2),c=s[0],l=s[1],u=Object(a.useState)(!1),d=Object(v.a)(u,2),f=d[0],m=d[1],p=Object(a.useState)(!1),j=Object(v.a)(p,2),b=j[0],g=j[1],x=Object(a.useState)(5),y=Object(v.a)(x,2),O=y[0],k=y[1],S=Object(a.useState)(15),w=Object(v.a)(S,2),N=w[0],A=w[1],C=Object(a.useState)("Bubble Sort"),I=Object(v.a)(C,2),T=I[0],_=I[1],z=Object(a.useState)((function(){return Re(N,T)})),P=Object(v.a)(z,2),B=P[0],D=P[1],M=Object(a.useState)((function(){return He(B)})),F=Object(v.a)(M,2),H=F[0],L=F[1],R=Object(a.useState)((function(){return Te(He(B))})),q=Object(v.a)(R,2),E=q[0],J=q[1],U=Object(a.useState)(0),X=Object(v.a)(U,2),V=X[0],W=X[1],Q=Object(a.useState)(0),Y=Object(v.a)(Q,2),G=Y[0],Z=Y[1],$=Object(a.useState)((function(){return He(de)})),ee=Object(v.a)($,2),ie=ee[0],oe=ee[1],ce=Object(a.useState)((function(){return He(me)})),ue=Object(v.a)(ce,2),pe=ue[0],be=ue[1],ge=Object(a.useState)([]),ve=Object(v.a)(ge,2),ye=ve[0],ke=ve[1];Object(a.useEffect)((function(){!1===t&&J(function(e,n){return(0,Me[e])(He(n))}(T,He(B)))}),[t,O,N,T,B]);var we=function(e){r(!1),l(!0),L(Fe(T,e))},Ne={isPlay:t,isReplay:c,speed:O,arrayData:B,referenceArray:H,animationArr:E,countArr:ie,stackArr:pe,isInMidstOfSort:b,dataSize:N,setDataSize:A,visualizerAlgorithm:T,animationPercentage:V,idx:G,isReset:f,setIsReset:m,setIsReplay:l,setIsPlay:r,setIsInMidstOfSort:g,setVisualizerAlgorithm:_,setArrayData:D,setAnimationPercentage:W,setAnimationArr:J,setIdx:Z,setReferenceArray:L,setCountArr:oe,setStackArr:be,setHistoryArr:ke,executeForwardAnimation:function(){var e,n=E[G],t=he((G+1)/E.length*100);e=ne(T)?fe(n,H,t,ie,!0):te(T)?je(n,H,pe,!0):re(T)?Se(n,H,pe,!0):ae(T)?function(e,n,t,r){var i=xe(n,e);return t.push(n),r(i),i}(n,H,ye,L):se(T)?Xe(n,H,T,L):Oe(n,H,T,L),G+1>=E.length&&we(e),Z(G+1),W(t)},executeBackwardAnimation:function(){if(G-1<0)Z(0);else{var e=E[G-1],n=he((G-1)/E.length*100);ne(T)?fe(e,H,n,ie,!1):te(T)?je(e,H,pe,!1):re(T)?Se(e,H,pe,!1):ae(T)?function(e,n){n(e.pop())}(ye,L):se(T)?Xe(e,H,T,L):Oe(e,H,T,L),G===E.length&&l(!1),Z(G-1),W(n)}},resetDataWhenAnimationFinish:we};return Object(i.jsxs)("div",{id:"visualizer",children:[Object(i.jsx)(Rn.Provider,{value:Object(K.a)({},Ne),children:Object(i.jsxs)("div",{className:"visualizer",children:[Object(i.jsxs)("div",{className:"visualizer-header-box",children:[Object(i.jsx)(h,{sectionHeader:"Visualizer",translateX:"translate(25px)"}),Object(i.jsx)(Ee,{})]}),Object(i.jsx)("div",{className:"visualizer-box",children:Object(i.jsx)(gn,{})}),Object(i.jsx)(kn,{}),Object(i.jsx)(Ge,{}),Object(i.jsxs)("div",{className:"controller-box",children:[Object(i.jsxs)("div",{className:"speed-selector-box",children:[Object(i.jsx)(Ue,Object(K.a)({setData:function(e){return k(e)}},We)),Object(i.jsx)(Ue,Object(K.a)({setData:function(e){return function(e){e!==N&&(A(e),D(Re(e,T)),oe(He(de)),be(He(me)),l(!1),W(0),m(!0))}(e)}},Qe))]}),Object(i.jsx)(Tn,{}),Object(i.jsx)(le,{})]})]})}),Object(i.jsx)(Ln,{visualizerAlgorithm:T})]})},En=(t(1013),t(1014),function(){return Object(i.jsxs)("a",{href:"#home",className:"logo",children:[Object(i.jsx)("div",{className:"logo-block-one"}),Object(i.jsx)("div",{className:"logo-block-two"}),Object(i.jsx)("div",{className:"logo-block-three"})]})}),Jn=function(){return Object(i.jsxs)("nav",{className:"nav-bar",children:[Object(i.jsxs)("div",{className:"nav-logo",children:[Object(i.jsx)(En,{}),Object(i.jsx)("a",{href:"#home",children:"Sorting Visualizer"})]}),Object(i.jsxs)("ul",{className:"nav-menu",children:[Object(i.jsx)("li",{children:Object(i.jsx)("a",{className:"active",href:"#home",children:"Home"})}),Object(i.jsx)("li",{children:Object(i.jsx)("a",{href:"#howItWorks",children:"How It Works"})}),Object(i.jsx)("li",{children:Object(i.jsx)("a",{href:"#visualizer",children:"Visualizer"})}),Object(i.jsx)("li",{children:Object(i.jsx)("a",{href:"#team",children:"Team"})}),Object(i.jsx)("li",{children:Object(i.jsx)("a",{href:"#contactUs",children:"Contact Us"})})]})]})};var Un=function(){return Object(i.jsxs)("div",{className:"app",children:[Object(i.jsx)(Jn,{}),Object(i.jsxs)("div",{className:"app-container",children:[Object(i.jsx)(E,{}),Object(i.jsx)(x,{}),Object(i.jsx)(qn,{}),Object(i.jsx)(Z,{}),Object(i.jsx)(H,{})]})]})},Xn=function(e){e&&e instanceof Function&&t.e(3).then(t.bind(null,1049)).then((function(n){var t=n.getCLS,r=n.getFID,i=n.getFCP,a=n.getLCP,o=n.getTTFB;t(e),r(e),i(e),a(e),o(e)}))};window.addEventListener("scroll",(function(e){var n=document.querySelectorAll("nav ul li a"),t=window.scrollY+60+.05*window.innerHeight,r=document.querySelector("nav"),i=document.querySelectorAll("nav div a div");r.classList.toggle("sticky",window.scrollY>0),i.forEach((function(e){e.classList.toggle("sticky",window.scrollY>0)})),n.forEach((function(e){var n=document.querySelector(e.hash);n.offsetTop<=t&&n.offsetTop+n.offsetHeight>t?e.classList.add("active"):e.classList.remove("active")}))})),c.a.render(Object(i.jsx)(o.a.StrictMode,{children:Object(i.jsx)(Un,{})}),document.getElementById("root")),Xn()},160:function(e,n,t){},162:function(e,n,t){},218:function(e,n,t){},219:function(e,n,t){},220:function(e,n,t){},221:function(e,n,t){},266:function(e,n,t){},267:function(e,n,t){},268:function(e,n,t){},269:function(e,n,t){},279:function(e,n,t){},280:function(e,n,t){},405:function(e,n,t){},406:function(e,n,t){},407:function(e,n,t){},408:function(e,n,t){},570:function(e,n,t){},571:function(e,n,t){},572:function(e,n,t){},573:function(e,n,t){},574:function(e,n,t){},575:function(e,n,t){},584:function(e,n,t){},585:function(e,n,t){},586:function(e,n,t){},89:function(e,n,t){},95:function(e,n,t){}},[[1015,1,2]]]);
//# sourceMappingURL=main.45e539d3.chunk.js.map