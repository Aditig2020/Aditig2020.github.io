{"version":3,"sources":["visualizer/algorithm/sortingalgorithms/heapSort.js","component/header/SectionHeader.js","team/image/how-it-works-image.jpg","component/IsVisibleYDirection/IsVisibleYDirection.js","howitworks/step/Step.js","howitworks/StepsData.js","howitworks/HowItWorks.js","contactus/body/Notification.js","contactus/body/Form.js","contactus/footer/Footer.js","contactus/contactusheader/ContactUsHeader.js","contactus/ContactUs.js","home/homedescription/HomeDescription.js","home/Home.js","team/image/Pratima.png","team/image/Purnima.jpg","team/image/Pri.jpg","team/TeamData.js","team/image/team-image.jpg","team/profile/Profile.js","team/Team.js","visualizer/sortingvisualizer/component/legend/LegendInformation.js","visualizer/sortingvisualizer/component/legend/LegendHeader.js","visualizer/sortingvisualizer/util/GeneralUtil.js","visualizer/sortingvisualizer/component/legend/Legend.js","visualizer/sortingvisualizer/util/MathUtil.js","visualizer/sortingvisualizer/util/CountingSortUtil.js","visualizer/sortingvisualizer/util/RadixSortUtil.js","visualizer/sortingvisualizer/util/MergeSortUtil.js","visualizer/algorithm/sortingalgorithms/swap.js","visualizer/sortingvisualizer/util/SwappingAlgoUtil.js","visualizer/sortingvisualizer/util/BucketSortUtil.js","visualizer/algorithm/sortingalgorithms/insertionSort.js","visualizer/algorithm/sortingalgorithms/quickSort.js","visualizer/algorithm/sortingalgorithms/bubbleSort.js","visualizer/algorithm/sortingalgorithms/bucketSort.js","visualizer/algorithm/sortingalgorithms/mergeSort.js","visualizer/algorithm/sortingalgorithms/allSorts.js","visualizer/algorithm/sortingalgorithms/radixSort.js","visualizer/algorithm/sortingalgorithms/countingSort.js","visualizer/algorithm/sortingalgorithms/selectionSort.js","visualizer/algorithm/sortingalgorithms/shellSort.js","visualizer/sortingvisualizer/util/ArrayUtil.js","visualizer/sortingvisualizer/component/selectors/algorithmselector/AlgorithmSelector.js","visualizer/sortingvisualizer/component/selectors/sliderselector/SliderSelector.js","visualizer/sortingvisualizer/util/QuickSortUtil.js","visualizer/sortingvisualizer/component/selectors/sliderselector/SelectorProps.js","visualizer/sortingvisualizer/component/animationprogressbar/AnimationProgressBar.js","visualizer/sortingvisualizer/component/block/CountingSortBlock.js","visualizer/sortingvisualizer/component/multipleblocks/HorizontalArray.js","visualizer/sortingvisualizer/component/block/CountBlock.js","visualizer/sortingvisualizer/component/animationscreen/CountingSortScreen.js","visualizer/sortingvisualizer/component/block/HighlightUtil.js","visualizer/sortingvisualizer/component/block/HighlightedOval.js","visualizer/sortingvisualizer/component/multipleblocks/StackOfBoxes.js","visualizer/sortingvisualizer/component/animationscreen/RadixSortScreen.js","visualizer/sortingvisualizer/component/block/BucketSortBlock.js","visualizer/sortingvisualizer/component/multipleblocks/StackOfAnimatedBoxes.js","visualizer/sortingvisualizer/component/block/Oval.js","visualizer/sortingvisualizer/component/animationscreen/BucketSortScreen.js","visualizer/sortingvisualizer/component/block/MergeSortBlock.js","visualizer/sortingvisualizer/component/animationscreen/AnimationScreenUtil.js","visualizer/sortingvisualizer/component/animationscreen/MergeSortScreen.js","visualizer/sortingvisualizer/component/block/AnimatedBlock.js","visualizer/sortingvisualizer/component/animationscreen/GenericSortScreen.js","visualizer/sortingvisualizer/component/animationscreen/AnimationScreen.js","visualizer/algorithm/stepbysteptemplate/genericSwapStepByStep.js","visualizer/algorithm/stepbysteptemplate/radixSortStepByStep.js","visualizer/algorithm/stepbysteptemplate/allSortsStepByStep.js","visualizer/algorithm/stepbysteptemplate/selectionSortStepByStep.js","visualizer/algorithm/stepbysteptemplate/mergeSortStepByStep.js","visualizer/algorithm/stepbysteptemplate/quickSortStepByStep.js","visualizer/algorithm/stepbysteptemplate/countingSortStepByStep.js","visualizer/algorithm/stepbysteptemplate/bucketSortStepByStep.js","visualizer/algorithm/stepbysteptemplate/heapSortStepByStep.js","visualizer/sortingvisualizer/component/stepbystep/StepByStepUtil.js","visualizer/sortingvisualizer/component/stepbystep/StepByStep.js","visualizer/sortingvisualizer/component/button/forwardbackbutton/BackButton.js","visualizer/sortingvisualizer/component/button/threestatebutton/PlayPauseReplayButton.js","visualizer/sortingvisualizer/component/button/threestatebutton/ThreeStateButton.js","visualizer/sortingvisualizer/component/button/newdatabutton/NewDataButton.js","visualizer/sortingvisualizer/component/button/forwardbackbutton/ForwardButton.js","visualizer/sortingvisualizer/component/button/ButtonBox.js","visualizer/codeinformation/explanations/Explanations.js","visualizer/codeinformation/explanations/bubbleSortEx.js","visualizer/codeinformation/explanations/insertionSortEx.js","visualizer/codeinformation/explanations/quickSortEx.js","visualizer/codeinformation/explanations/radixSortEx.js","visualizer/codeinformation/explanations/bucketSortEx.js","visualizer/codeinformation/explanations/countingSortEx.js","visualizer/codeinformation/explanations/selectionSortEx.js","visualizer/codeinformation/explanations/mergeSortEx.js","visualizer/codeinformation/explanations/shellSortEx.js","visualizer/codeinformation/explanations/heapSortEx.js","visualizer/codeinformation/codeexplaination/PerformanceSection.js","visualizer/codeinformation/codeexplaination/CodeExplanation.js","visualizer/codeinformation/templates/Templates.js","visualizer/codeinformation/templates/bubbleSortTemplate.js","visualizer/codeinformation/templates/insertionSortTemplate.js","visualizer/codeinformation/templates/quickSortTemplate.js","visualizer/codeinformation/templates/radixSortTemplate.js","visualizer/codeinformation/templates/bucketSortTemplate.js","visualizer/codeinformation/templates/countingSortTemplate.js","visualizer/codeinformation/templates/selectionSortTemplate.js","visualizer/codeinformation/templates/mergeSortTemplate.js","visualizer/codeinformation/templates/shellSortTemplate.js","visualizer/codeinformation/templates/heapSortTemplate.js","visualizer/codeinformation/codetemplate/Selector.js","visualizer/codeinformation/codetemplate/CodeTemplate.js","visualizer/codeinformation/CodeInformation.js","visualizer/sortingvisualizer/Visualizer.js","component/logo/logo.js","component/navigationMenu/NavigationMenu.js","app/App.js","reportWebVitals.js","index.js"],"names":["array_length","SectionHeader","sectionHeader","translateX","HeaderStyling","isVisible","transform","transition","HeaderLineStyling","nodeRef","useRef","once","className","ref","style","IsVisibleYDirection","props","transitionStyling","yValue","classNameToUse","children","Step","icon","title","description","StepsData","size","color","HowItWorks","id","src","HowItWorksImage","alt","map","data","index","Notification","isShowMessage","setIsShowMessage","useStyles","makeStyles","theme","root","backgroundColor","styles","handleClose","event","reason","Snackbar","open","autoHideDuration","anchorOrigin","vertical","horizontal","onClose","Alert","action","IconButton","aria-label","onClick","fontSize","Form","useState","type","setType","menu","key","Item","handleMenuClick","reviewSchema","yup","name","required","email","test","val","message","initialValues","validationSchema","onSubmit","values","actions","emailjs","send","then","r","sendMessage","setTimeout","resetForm","placeholder","onChange","handleChange","value","touched","errors","overlay","trigger","placement","e","preventDefault","DownOutlined","handleSubmit","Footer","href","ContactUsHeader","ContactUsText","ContactUs","HomeDescription","titleStyling","descriptionStyling","Home","options","background","fpsLimit","interactivity","detectsOn","events","resize","modes","bubble","distance","duration","opacity","push","quantity","repulse","particles","collisions","enable","move","direction","outMode","random","speed","straight","number","density","value_area","shape","detectRetina","TeamMemberDescription","TeamData","img","Pri","linkedInUrl","gitHubUrl","Purnima","Pratima","Profile","linkedInLink","gitHubLink","target","rel","Team","TeamImage","LegendInformation","backgroundImage","LegendHeader","isCountingSort","visualizerAlgorithm","isRadixSort","isBucketSort","isRadixOrBucket","isMergeSort","isSelectionSort","isQuickSort","hasLegend","Legend","useContext","VisualizerStateContext","legendInformation","generateValue","min","max","Math","floor","roundToTwoDp","num","round","buckets","height","count","executeCountSort","currentAnimation","referenceArray","animationPx","countArr","isForward","isShown","stack","array","generateRandomValue","randomVal","executeRadixSort","stackArr","isDistributing","location","unshift","shift","pop","findIndexToUseInMergeSort","newTempArr","iIdx","jIdx","k","length","isUsingIIdx","prevPos","isUsingJIdx","handleMergeSort","width","arrayCopy","isShift","kIdx","isReset","allIndexToShift","idxToUse","positiveDiff","abs","xDirection","pos","i","swap","j","arr","temp","executeSwap","firstIdx","secondIdx","isSwapOccurring","resetArray","isSwap","highlight","executeGenericSort","setReferenceArray","arrToUse","innerSortUsed","executeBucketSort","executeInnerBucketSort","undefined","isSort","executeResetBucket","insertionSort","receivedArr","animationArr","quickSortHelper","low","high","pi","pivot","partition","quickSort","bubbleSort","flag","bucketSort","Array","item","insertionSortAnimation","concat","mergeSortHelper","start","end","mid","n1","n2","leftArray","rightArray","allIndexInSwap","merge","heap_root","left","right","SortingAlgorithms","inputArr","maxNum","x","divisor","apply","smallestIdx","n","gap","tempArrElement","JSON","parse","stringify","arrayGenerator","generateDefaultArray","generateMergeSortArray","generateCountSortArray","generateRadixSortArray","toFixed","generateBucketSortArray","generateArray","AlgorithmChooser","dataSize","setDataSize","isPlay","isInMidstOfSort","setIsReplay","setIsInMidstOfSort","setVisualizerAlgorithm","setArrayData","setAnimationPercentage","setIsReset","setCountArr","setStackArr","setHistoryArr","algorithm","setAlgorithm","algorithmName","cursor","disabled","SliderSelector","setData","maxSize","sliderData","setSliderData","defaultValue","onAfterChange","executeQuickSort","pivotIdx","executeSwapWithPivot","SpeedSelectorProps","DataSizeSelectorProps","AnimationProgressBar","animationPercentage","status","strokeColor","percent","CountingSortBlock","visibility","HorizontalArray","BlockType","CountBlock","CountingSortScreen","marginTop","highlightDigit","idx","currentHighlighted","getDigitToHighlight","current","numberMapping","fontWeight","spreadNumber","from","toString","HighlightedOval","display","StackOfBoxes","individualStack","RadixSortScreen","justifyContent","minHeight","BucketSortBlock","y","rest","div","interpolate","StackOfAnimatedBoxes","yDirection","useTransition","d","leave","enter","update","Oval","BucketSortScreen","MergeSortBlock","zIndex","translateXOfVisualizer","MergeSortScreen","transitions","AnimatedBlock","GenericSortScreen","AnimationScreen","isReplay","arrayData","setIdx","executeForwardAnimation","resetDataWhenAnimationFinish","animationSpeedArray","useEffect","dataItem","parseInt","genericSwapStepByStep","animationArrSwapIdx","firstIdxVal","secondIdxVal","isBigger","radixSortStepByStep","SortingAlgorithmsStepByStep","isSmaller","slice","comparisonStatement","swapStatement","pivotIdxVal","command","indexOfSmallerElement","incJ","incI","heapStep","getStepByStepText","sortAlgoStepByStep","StepByStep","BackButton","executeBackwardAnimation","isEmpty","Provider","PlayPauseReplayButton","ThreeStateButton","setIsPlay","NewDataButton","ForwardButton","isFull","ButtonBox","explanations","additionalDesc","worstTime","averageTime","bestTime","worstSpace","stable","inPlace","link","PerformanceSection","sortDetails","ListOfComplexities","Complexity","TypeWithIcon","isTick","IconType","CodeExplanation","algo","setSortDetails","HeaderOne","Explanation","HeaderTwo","Link","templates","Java","JavaScript","Python","Selector","selected","setSelected","Select","language","CodeTemplate","template","setTemplate","mode","toLowerCase","editorProps","$blockScrolling","readOnly","CodeInformation","React","createContext","Visualizer","setSpeed","setAnimationArr","historyArr","sortAlgo","getAnimationArr","finalReferenceArray","nextReferenceArray","executeMergeSortForward","executeMergeSortBackward","AlgorithmSelector","changeDataSize","Logo","NavigationMenu","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","window","addEventListener","navigationLinks","document","querySelectorAll","fromTop","scrollY","innerHeight","navigationMenu","querySelector","menuHeaders","classList","toggle","forEach","section","hash","offsetTop","offsetHeight","add","remove","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9efc6896.chunk.js","sourcesContent":["/**\n * Sorts the array using Heap Sort and stores each sorting step into the animation array.\n *\n * @memberOf SortingAlgorithms\n * @see {@link https://www.w3resource.com/javascript-exercises/searching-and-sorting-algorithm/searching-and-sorting-algorithm-exercise-3.php}\n * @param {Object[]} arr The array to be sorted.\n * @returns {any[]} Animation array which contains the animation instruction for each step.\n */\nimport { swap } from './swap';\n\n// Keeps track of how many items are not sorted\nlet array_length;\n\n// Keeps track of the animation\nlet animationArr = [];\n\n// Bubbling the element up to its correct position (heapify)\nconst heap_root = (arr, i) => {\n  let left = 2 * i + 1;\n  let right = 2 * i + 2;\n  let max = i;\n\n  if (left < array_length && arr[left].height > arr[max].height) {\n    max = left;\n  }\n\n  if (right < array_length && arr[right].height > arr[max].height) {\n    max = right;\n  }\n\n  animationArr.push([i, max, false, false]);\n\n  if (max !== i) {\n    animationArr.push([i, max, true, false]);\n\n    swap(i, max, arr);\n    heap_root(arr, max);\n  }\n};\n\nconst heapSort = (arr) => {\n  let receivedArr = arr;\n  array_length = receivedArr.length;\n  animationArr = [];\n\n  // Creating the maximum heap\n  for (let i = Math.floor(array_length / 2); i >= 0; i -= 1) {\n    heap_root(receivedArr, i);\n  }\n\n  // Sorting the array by extracting the the element and placing at the end of the array\n  for (let i = arr.length - 1; i > 0; i--) {\n    animationArr.push([i, 0, true, true]);\n    swap(0, i, receivedArr);\n    array_length--;\n\n    heap_root(receivedArr, 0);\n  }\n\n  return animationArr;\n};\n\nexport default heapSort;\n","import React, { useRef } from 'react';\nimport './styles.css';\nimport 'intersection-observer';\nimport IsVisible from 'react-is-visible';\n\n/**\n * General component header that animates to the center upon entering user's view port.\n *\n * @component\n * @param {string} sectionHeader Name of the section header.\n * @param {string} translateX Extra translation in x direction for the line underneath the header.\n * @returns {JSX.Element} Header for each category.\n */\nconst SectionHeader = ({ sectionHeader, translateX }) => {\n  /**\n   * Animates the header to the center.\n   *\n   * @param isVisible boolean value denoting whether the component is visible in user's view port.\n   * @returns {{transform: string, transition: string}} Inline-styling for animation.\n   */\n  const HeaderStyling = (isVisible) => ({\n    transform: isVisible ? `translateX(0px)` : `translateX(750px)`,\n    transition: `all 1.5s ease-in-out`,\n  });\n  const HeaderLineStyling = (isVisible) => ({\n    transform: isVisible ? translateX : `translateX(-750px)`,\n    transition: `all 1.5s ease-in-out`,\n  });\n\n  const nodeRef = useRef();\n\n  return (\n    <IsVisible once>\n      {(isVisible) => (\n        <div className=\"section-header\" ref={nodeRef}>\n          <span style={HeaderStyling(isVisible)}>{sectionHeader}</span>\n          <div className=\"section-header-line\" style={HeaderLineStyling(isVisible)} />\n        </div>\n      )}\n    </IsVisible>\n  );\n};\n\nexport default SectionHeader;\n","export default __webpack_public_path__ + \"static/media/how-it-works-image.48b6ebba.jpg\";","import React from 'react';\nimport IsVisible from 'react-is-visible';\n\n/**\n * A wrapper component which helps to animate the component upwards.\n *\n * @component\n * @param {any} props Attribute to be passed into this component.\n */\nconst IsVisibleYDirection = (props) => {\n  const transitionStyling = (isVisible) => ({\n    transform: isVisible ? `translateY(0px)` : props.yValue,\n    transition: `all 1.0s ease-in-out`,\n  });\n\n  return (\n    <IsVisible once>\n      {(isVisible) => (\n        <div className={props.classNameToUse} style={transitionStyling(isVisible)}>\n          {props.children}\n        </div>\n      )}\n    </IsVisible>\n  );\n};\n\nexport default IsVisibleYDirection;\n","import React from 'react';\nimport './styles.css';\nimport IsVisibleYDirection from '../../component/IsVisibleYDirection/IsVisibleYDirection';\n\n/**\n * General instruction step in How It Works Section.\n *\n * @component\n * @param {icon} icon Icon of the step.\n * @param {string} title Title of the step.\n * @param {string} description Description of the step.\n * @returns {JSX.Element} A complete step component.\n */\nconst Step = ({ icon, title, description }) => {\n  return (\n    <IsVisibleYDirection classNameToUse=\"step-container\" yValue={`translateY(125px)`}>\n      <div className=\"step-picture\">{icon}</div>\n      <p className=\"step-title\">{title}</p>\n      <p className=\"step-description\">{description}</p>\n    </IsVisibleYDirection>\n  );\n};\n\nexport default Step;\n","import { AiFillSetting, AiOutlineSelect } from 'react-icons/ai';\nimport { GoPlay } from 'react-icons/go';\nimport { MdReplay } from 'react-icons/md';\nimport React from 'react';\n\n/**\n * Array containing the details of each particular step.\n */\nexport const StepsData = [\n  {\n    icon: <AiOutlineSelect size={70} color={'#11C2C9'} />,\n    title: '1. Select the Algorithm',\n    description: 'Visualize the algorithm of your choice.',\n  },\n  {\n    icon: <AiFillSetting size={70} color={'#5466FF'} />,\n    title: '2. Select Settings',\n    description: 'Adjust the speed of the visualizer and array size.',\n  },\n  {\n    icon: <GoPlay size={70} color={'#5466FF'} />,\n    title: '3. Start Sorting',\n    description: 'Press the play button to start the step by step sorting process.',\n  },\n  {\n    icon: <MdReplay size={70} color={'#11C2C9'} />,\n    title: '4. Fast-forward, Backtrack, and Replay',\n    description:\n      'Replay the entire sorting process or walk through ' +\n      'the algorithm one step at a time with these functions.',\n  },\n];\n","import React from 'react';\n\nimport './styles.css';\n\nimport HowItWorksHeader from '../component/header/SectionHeader';\nimport HowItWorksImage from '../team/image/how-it-works-image.jpg';\nimport Step from './step/Step';\nimport { StepsData } from './StepsData';\n\n/**\n * How It Works Section of the app.\n *\n * @component\n * @category App Body\n */\nconst HowItWorks = () => {\n  return (\n    <div id=\"howItWorks\" className=\"how-it-works\">\n      <HowItWorksHeader sectionHeader={'Steps To Be Used'} translateX={'translateX(28px)'} />\n      <div className=\"how-it-works-container\">\n        <img className=\"how-it-works-picture\" src={HowItWorksImage} alt=\"\" />\n        <div className=\"steps\">\n          {/*Steps 1 and 3*/}\n          {StepsData.map((data, index) =>\n            index % 2 === 0 ? (\n              <Step icon={data.icon} title={data.title} description={data.description} />\n            ) : null\n          )}\n        </div>\n        <div className=\"steps\">\n          {/*Steps 2 and 4*/}\n          {StepsData.map((data, index) =>\n            index % 2 === 1 ? (\n              <Step icon={data.icon} title={data.title} description={data.description} />\n            ) : null\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default HowItWorks;\n","import React from 'react';\nimport { Snackbar, makeStyles } from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\n\n/**\n * A pop-up notification on the bottom left-hand corner to indicate that message is being sent.\n *\n * @component\n * @category Contact Us\n * @param isShowMessage boolean value of whether to show the message notification.\n * @param setIsShowMessage A setter which changes the state of isShowMessage.\n * @returns {JSX.Element} A notification which appears at the bottom left-hand corner.\n */\nconst Notification = ({ isShowMessage, setIsShowMessage }) => {\n  const styles = makeStyles((theme) => ({\n    root: {\n      backgroundColor: '#313131',\n      color: 'white',\n    },\n  }));\n\n  const useStyles = styles();\n\n  /**\n   * Handle the close event of the notification. Blocks all other method of closing except when\n   * clicking the cross button.\n   */\n  const handleClose = (event, reason) => {\n    // to prevent users from clicking elsewhere to close the notification\n    if (reason === 'clickaway') return;\n    setIsShowMessage(false);\n  };\n\n  return (\n    <Snackbar\n      open={isShowMessage}\n      autoHideDuration={5000}\n      anchorOrigin={{ vertical: 'bottom', horizontal: 'left' }}\n      onClose={handleClose}\n    >\n      <Alert\n        onClose={handleClose}\n        className={useStyles.root}\n        color=\"white\"\n        action={\n          <IconButton\n            aria-label=\"close\"\n            color=\"inherit\"\n            size=\"small\"\n            onClick={() => setIsShowMessage(false)}\n          >\n            <CloseIcon fontSize=\"inherit\" className=\"close-notification-button\" />\n          </IconButton>\n        }\n      >\n        Message sent.\n      </Alert>\n    </Snackbar>\n  );\n};\n\nexport default Notification;\n","import React, { useState } from 'react';\nimport './styles.css';\nimport { Dropdown, Menu } from 'antd';\nimport { DownOutlined } from '@ant-design/icons';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport emailjs from 'emailjs-com';\nimport IsVisibleYDirection from '../../component/IsVisibleYDirection/IsVisibleYDirection';\nimport Notification from './Notification';\n\n/**\n * A form for user to fill in their details.\n *\n * @component\n * @category Contact Us\n */\nconst Form = () => {\n  const [type, setType] = useState('Type (Optional)');\n  const [isShowMessage, setIsShowMessage] = useState(false);\n\n  const listOfTypes = [\n    { type: 'Type (Optional)', key: 0 },\n    { type: 'Improvement', key: 1 },\n    { type: 'Issue', key: 2 },\n    { type: 'Others', key: 3 },\n  ];\n\n  /**\n   * Change the type of message.\n   *\n   * @param {string} type Type of input form.\n   */\n  const handleMenuClick = (type) => {\n    setType(type);\n  };\n\n  /**\n   * A drop down list to provide a list of types of message to choose from.\n   *\n   * @type {JSX.Element}\n   */\n  const menu = (\n    <Menu style={{ transform: 'translateY(-5px)' }}>\n      {listOfTypes.map(({ type, key }) => {\n        return (\n          <Menu.Item key={key} onClick={() => handleMenuClick(type)} style={{ color: '#8789B5' }}>\n            {type}\n          </Menu.Item>\n        );\n      })}\n    </Menu>\n  );\n\n  /**\n   * Sends a message to the users and the developers upon the user sends a message.\n   *\n   * @param {Object} values User's details\n   */\n  const sendMessage = (values) => {\n    const message = {\n      name: values.name,\n      email: values.email,\n      type: type,\n      message: values.message,\n    };\n    emailjs\n      .send('service_cslfpvq', 'template_gthvxem', message, 'FYfQjLoT18Udtn59Y')\n      .then((r) => {});\n  };\n\n  /**\n   * A Schema which checks the validity of the inputs from the user.\n   */\n  const reviewSchema = yup.object({\n    name: yup.string().required(),\n    email: yup\n      .string()\n      .required()\n      .email('Invalid email')\n      .test('check if email is in use', 'Email has been registered', (val) => {\n        const emailRegex = /^([a-zA-Z0-9_.-])+@(([a-zA-Z0-9-])+.)+([a-zA-Z0-9]{2,4})+$/;\n        return emailRegex.test(val);\n      }),\n    message: yup.string().required(),\n  });\n\n  const yValue = `translateY(50px)`;\n\n  return (\n    <Formik\n      initialValues={{ name: '', email: '', type: '', message: '' }}\n      validationSchema={reviewSchema}\n      onSubmit={(values, actions) => {\n        sendMessage(values);\n        setType('Type (Optional)');\n        setIsShowMessage(true);\n        setTimeout(() => setIsShowMessage(false), 5000);\n        actions.resetForm();\n      }}\n    >\n      {(props) => (\n        <>\n          <div className=\"form-box\">\n            <div className=\"form-particulars\" id=\"form-particulars\">\n              <IsVisibleYDirection classNameToUse=\"form-particular-error-holder\" yValue={yValue}>\n                <div className=\"form-particulars-holder\">\n                  <input\n                    placeholder=\"Name\"\n                    required={true}\n                    onChange={props.handleChange}\n                    value={props.values.name}\n                    name=\"name\"\n                  />\n                </div>\n                <span>{props.touched.name && props.errors.name && 'Name is a required field'}</span>\n              </IsVisibleYDirection>\n              <IsVisibleYDirection classNameToUse=\"form-particular-error-holder\" yValue={yValue}>\n                <div className=\"form-particulars-holder\">\n                  <input\n                    placeholder=\"Email\"\n                    required={true}\n                    onChange={props.handleChange}\n                    value={props.values.email}\n                    name=\"email\"\n                  />\n                </div>\n                <span>\n                  {props.touched.email && props.errors.email && 'Email is a required field'}\n                </span>\n              </IsVisibleYDirection>\n              <IsVisibleYDirection classNameToUse=\"form-particular-error-holder\" yValue={yValue}>\n                <div className=\"form-particulars-holder\">\n                  <span>{type}</span>\n                  <Dropdown overlay={menu} trigger={['click']} placement={'bottomCenter'}>\n                    <a\n                      className=\"ant-dropdown-link\"\n                      onClick={(e) => e.preventDefault()}\n                      id=\"drop-down-arrow-holder\"\n                    >\n                      <DownOutlined style={{ transform: 'translateX(-20px)' }} />\n                    </a>\n                  </Dropdown>\n                </div>\n              </IsVisibleYDirection>\n            </div>\n            <IsVisibleYDirection classNameToUse=\"form-details\" yValue={yValue}>\n              <div className=\"form-details-error-holder\">\n                <div className=\"form-details-holder\">\n                  <textarea\n                    placeholder=\"Message\"\n                    required={true}\n                    onChange={props.handleChange}\n                    value={props.values.message}\n                    name=\"message\"\n                  />\n                </div>\n                <span>\n                  {props.touched.message && props.errors.message && 'Message is a required field'}\n                </span>\n              </div>\n            </IsVisibleYDirection>\n            <IsVisibleYDirection classNameToUse=\"form-submit-button-box\" yValue={yValue}>\n              <button className=\"form-submit-button\" onClick={props.handleSubmit} type=\"submit\">\n                <span>SEND MESSAGE</span>\n              </button>\n            </IsVisibleYDirection>\n          </div>\n          <Notification isShowMessage={isShowMessage} setIsShowMessage={setIsShowMessage} />\n        </>\n      )}\n    </Formik>\n  );\n};\n\nexport default Form;\n","import React from 'react';\nimport './styles.css';\n\nimport { MdCopyright } from 'react-icons/md';\n\n/**\n * Footer at the end of page.\n *\n * @component\n * @category Contact Us\n */\nconst Footer = () => {\n  return (\n    <div className=\"footer-container\">\n      <div className=\"triangle\" />\n      <div className=\"links-container\">\n        <div className=\"footer-title\">About Us</div>\n        <a href=\"#home\">Home</a>\n        <a href=\"#howItWorks\">Steps To Be Used</a>\n        <a href=\"#visualizer\">Visualizer</a>\n        <a href=\"#team\">Team</a>\n        <a href=\"#contactUs\">Contact Us</a>\n        <div className=\"copy-right\">\n          Copyright <MdCopyright size={18} color={'white'} /> 2022 Sorting Visualizer.\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Footer;\n","import React from 'react';\nimport Header from '../../component/header/SectionHeader';\nimport './styles.css';\n\n/**\n * Header for contact us.\n *\n * @component\n * @category Contact Us\n */\nconst ContactUsHeader = () => {\n  const ContactUsText = () => (\n    <span>\n      Do contact us if there is any error or improvement.\n    </span>\n  );\n\n  return (\n    <div className=\"contact-us-header-box\">\n      <Header sectionHeader={'Contact Us'} translateX={'translateX(23px)'} />\n      <ContactUsText />\n    </div>\n  );\n};\n\nexport default ContactUsHeader;\n","import React from 'react';\nimport Form from './body/Form';\nimport Footer from './footer/Footer';\nimport './styles.css';\nimport ContactUsHeader from './contactusheader/ContactUsHeader';\n\n/**\n * Contact Us Section of the app.\n *\n * @component\n * @category App Body\n */\nconst ContactUs = () => {\n  return (\n    <div id=\"contactUs\" className=\"contact-us\">\n      <ContactUsHeader />\n      <Form />\n      <Footer />\n    </div>\n  );\n};\n\nexport default ContactUs;\n","import React, { useRef } from 'react';\nimport './styles.css';\nimport 'intersection-observer';\nimport IsVisible from 'react-is-visible';\n\n/**\n * Home description in Home Section.\n *\n * @component\n * @category Home\n */\nconst HomeDescription = () => {\n  const titleStyling = (isVisible) => ({\n    transform: isVisible ? `translateX(0px)` : `translateX(750px)`,\n    transition: `all 1.5s ease-in-out`,\n  });\n  const descriptionStyling = (isVisible) => ({\n    transform: isVisible ? `translate(0px)` : `translateX(-750px)`,\n    transition: `all 1.5s ease-in-out`,\n  });\n\n  const nodeRef = useRef();\n\n  return (\n    <IsVisible once>\n      {(isVisible) => (\n        <div className=\"content\" ref={nodeRef}>\n          <div className=\"title\" style={titleStyling(isVisible)}>\n            Sorting algorithms made easy\n          </div>\n          <div className=\"description\" style={descriptionStyling(isVisible)}>\n            Visualize the step by step process of popular sorting algorithms!\n          </div>\n        </div>\n      )}\n    </IsVisible>\n  );\n};\n\nexport default HomeDescription;\n","import React from 'react';\nimport './styles.css';\n\nimport Particles from 'react-tsparticles';\nimport HomeDescription from './homedescription/HomeDescription';\n\n/**\n * Home Section of the app.\n *\n * @component\n * @category App Body\n */\nconst Home = () => {\n  return (\n    <div id=\"home\" className=\"home\">\n      <HomeDescription />\n      <Particles\n        id=\"particles\"\n        className=\"wrapper\"\n        options={{\n          background: {\n            color: {\n              value: '#5467ff',\n            },\n          },\n          fpsLimit: 60,\n          interactivity: {\n            detectsOn: 'canvas',\n            events: {\n              resize: true,\n            },\n            modes: {\n              bubble: {\n                distance: 400,\n                duration: 2,\n                opacity: 0.8,\n                size: 40,\n              },\n              push: {\n                quantity: 4,\n              },\n              repulse: {\n                distance: 200,\n                duration: 0.4,\n              },\n            },\n          },\n          particles: {\n            color: {\n              value: '#fff',\n            },\n            collisions: {\n              enable: true,\n            },\n            move: {\n              direction: 'none',\n              enable: true,\n              outMode: 'bounce',\n              random: false,\n              speed: 3,\n              straight: false,\n            },\n            number: {\n              density: {\n                enable: true,\n                value_area: 800,\n              },\n              value: 80,\n            },\n            opacity: {\n              value: 0.5,\n            },\n            shape: {\n              type: 'circle',\n            },\n            size: {\n              random: true,\n              value: 5,\n            },\n          },\n          detectRetina: true,\n        }}\n      />\n    </div>\n  );\n};\n\nexport default Home;\n","export default __webpack_public_path__ + \"static/media/Pratima.75454c6e.png\";","export default __webpack_public_path__ + \"static/media/Purnima.6f099787.jpg\";","export default __webpack_public_path__ + \"static/media/Pri.a10eca37.jpg\";","import Pratima from './image/Pratima.png';\nimport Purnima from './image/Purnima.jpg';\nimport Pri from './image/Pri.jpg';\n\nconst TeamMemberDescription = 'Galgotias College of Engg & Technology';\n\nexport const TeamData = [\n  {\n    img: Pri,\n    name: 'Priyanshika Sharma',\n    description: TeamMemberDescription,\n    linkedInUrl: 'https://www.linkedin.com/in/priyanshika',\n    gitHubUrl: 'https://github.com/Aditig2020',\n  },\n  {\n    img: Purnima,\n    name: 'Purnima Katiyar',\n    description: TeamMemberDescription,\n    linkedInUrl: 'https://www.linkedin.com/in/purnima-katiyar-6a1a92134',\n    gitHubUrl: 'https://github.com/purnimakatiyar',\n  },\n  {\n    img: Pratima,\n    name: 'Pratima Kumari',\n    description: TeamMemberDescription,\n    linkedInUrl: 'https://www.linkedin.com/in/pratima-kumari-8712b3227',\n    gitHubUrl: '',\n  },\n];\nexport const TeamDescription =\n  'We are a group of highly motivated students from Galgotias ' +\n  'College of Engineering & Technology that are invested in the field of Computer Science Engineering.' +\n  ' Feel free to contact us.';\n","export default __webpack_public_path__ + \"static/media/team-image.4c9c6ad8.jpg\";","import React from 'react';\nimport './styles.css';\nimport IsVisibleYDirection from '../../component/IsVisibleYDirection/IsVisibleYDirection';\nimport { FaGithub, FaLinkedin } from 'react-icons/fa';\n\nconst Profile = ({ img, name, description, linkedInLink, gitHubLink }) => {\n  return (\n    <IsVisibleYDirection classNameToUse={'profile-container'} yValue={`translateY(125px)`}>\n      <img className=\"picture\" src={img} alt=\"\" />\n      <div className=\"profile-description-container\">\n        <p className=\"profile-title\">{name}</p>\n        <p className=\"profile-description\">{description}</p>\n        <a title=\"LinkedIn\" href={linkedInLink} target=\"_blank\" rel=\"noopener noreferrer\">\n          <FaLinkedin size={23} color={'#0e76a8'} />\n        </a>\n        <a\n          title=\"GitHub\"\n          href={gitHubLink}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className=\"github-logo\"\n        >\n          <FaGithub size={23} color={'#211F1F'} />\n        </a>\n      </div>\n    </IsVisibleYDirection>\n  );\n};\n\nexport default Profile;\n","import React from 'react';\nimport './styles.css';\nimport { TeamData, TeamDescription } from './TeamData';\nimport TeamImage from './image/team-image.jpg';\nimport TeamHeader from '../component/header/SectionHeader';\nimport Profile from './profile/Profile';\n\n/**\n * Team Section of the app.\n *\n * @component\n * @category App Body\n */\nconst Team = () => {\n  return (\n    <div className=\"team\" id=\"team\">\n      <TeamHeader sectionHeader={'Team'} translateX={'translateX(13px)'} />\n      <div className=\"team-container\">\n        <img className=\"team-picture\" src={TeamImage} alt=\"\" />\n        <div className=\"team-profile\">\n          <p className=\"team-title\">Meet our team</p>\n          <p className=\"team-description\">{TeamDescription}</p>\n          {TeamData.map((data, index) => (\n            <Profile\n              img={data.img}\n              name={data.name}\n              description={data.description}\n              linkedInLink={data.linkedInUrl}\n              gitHubLink={data.gitHubUrl}\n              key={index}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Team;\n","import React from 'react';\nimport './styles.css';\n\n/**\n * The information which is displayed in the legend component.\n *\n * @component\n * @category Legend\n */\nconst LegendInformation = ({ color, description }) => {\n  return (\n    <div className=\"legend-information\">\n      <div className=\"legend-information-box-holder\">\n        <div className=\"legend-information-box-box\" style={{ backgroundImage: color }} />\n      </div>\n      <div className=\"legend-information-description-holder\">\n        <span className=\"legend-information-description-text\">{description}</span>\n      </div>\n    </div>\n  );\n};\n\nexport default LegendInformation;\n","import React from 'react';\nimport './styles.css';\n\n/**\n * Header for the Legend.\n *\n * @component\n * @category Legend\n */\nconst LegendHeader = () => {\n  return (\n    <>\n      <div className=\"legend-header\">\n        <span>Legend</span>\n      </div>\n      <div className=\"legend-header-line\" />\n    </>\n  );\n};\n\nexport default LegendHeader;\n","/**\n * Returns true if the algorithm input is counting sort.\n *\n * @method\n * @category GeneralUtil\n * @param {string} visualizerAlgorithm Input algorithm.\n * @returns {boolean} True if the algorithm is counting sort.\n */\nexport const isCountingSort = (visualizerAlgorithm) => visualizerAlgorithm === 'Counting Sort';\n\n/**\n * Returns true if the algorithm input is radix sort.\n *\n * @method\n * @category GeneralUtil\n * @param {string} visualizerAlgorithm Input algorithm.\n * @returns {boolean} True if the algorithm is radix sort.\n */\nexport const isRadixSort = (visualizerAlgorithm) => visualizerAlgorithm === 'Radix Sort';\n\n/**\n * Returns true if the algorithm input is bucket sort.\n *\n * @method\n * @category GeneralUtil\n * @param {string} visualizerAlgorithm Input algorithm.\n * @returns {boolean} True if the algorithm is bucket sort.\n */\nexport const isBucketSort = (visualizerAlgorithm) => visualizerAlgorithm === 'Bucket Sort';\n\n/**\n * Returns true if the algorithm input is radix or bucket sort.\n *\n * @method\n * @category GeneralUtil\n * @param {string} visualizerAlgorithm Input algorithm.\n * @returns {boolean} True if the algorithm is radix or bucket sort.\n */\nexport const isRadixOrBucket = (visualizerAlgorithm) =>\n  isRadixSort(visualizerAlgorithm) || isBucketSort(visualizerAlgorithm);\n\n/**\n * Returns true if the algorithm input is merge sort.\n *\n * @method\n * @category GeneralUtil\n * @param {string} visualizerAlgorithm Input algorithm.\n * @returns {boolean} True if the algorithm is merge sort.\n */\nexport const isMergeSort = (visualizerAlgorithm) => visualizerAlgorithm === 'Merge Sort';\n\n/**\n * Returns true if the algorithm input is selection sort.\n *\n * @method\n * @category GeneralUtil\n * @param {string} visualizerAlgorithm Input algorithm.\n * @returns {boolean} True if the algorithm is selection sort.\n */\nexport const isSelectionSort = (visualizerAlgorithm) => visualizerAlgorithm === 'Selection Sort';\n\n/**\n * Returns true if the algorithm input is quick sort.\n *\n * @method\n * @category GeneralUtil\n * @param {string} visualizerAlgorithm Input algorithm.\n * @returns {boolean} True if the algorithm is quick sort.\n */\nexport const isQuickSort = (visualizerAlgorithm) => visualizerAlgorithm === 'Quick Sort';\n\n/**\n * Returns true if the algorithm input is any sort aside from bucket, radix and counting sort.\n *\n * @method\n * @category GeneralUtil\n * @param {string} visualizerAlgorithm Input algorithm.\n * @returns {boolean} True if the algorithm is any sort aside from bucket, radix and counting sort.\n */\nexport const hasLegend = (visualizerAlgorithm) =>\n  visualizerAlgorithm === 'Bubble Sort' ||\n  visualizerAlgorithm === 'Insertion Sort' ||\n  visualizerAlgorithm === 'Selection Sort' ||\n  visualizerAlgorithm === 'Quick Sort' ||\n  visualizerAlgorithm === 'Heap Sort' ||\n  visualizerAlgorithm === 'Merge Sort' ||\n  visualizerAlgorithm === 'Shell Sort';\n","import React, { useContext } from 'react';\nimport LegendInformation from './LegendInformation';\nimport LegendHeader from './LegendHeader';\nimport './styles.css';\nimport { VisualizerStateContext } from '../../Visualizer';\nimport { hasLegend, isMergeSort, isSelectionSort } from '../../util/GeneralUtil';\n\n/**\n * A legend which display information about the current sorting animation.\n *\n * @component\n * @category Visualizer\n */\nconst Legend = () => {\n  const { visualizerAlgorithm } = useContext(VisualizerStateContext);\n\n  const legendInformation = [\n    {\n      color: 'linear-gradient(45deg, #13B1B7, #11C2C9)',\n      description: isMergeSort(visualizerAlgorithm)\n        ? 'Currently involved in the merge process'\n        : isSelectionSort(visualizerAlgorithm)\n        ? 'Currently involved in selection process'\n        : 'Currently involved in the swap process',\n    },\n    {\n      color: 'linear-gradient(45deg, #287ED0, #5466FF)',\n      description: isMergeSort(visualizerAlgorithm)\n        ? 'Not involved in the merge process'\n        : isSelectionSort(visualizerAlgorithm)\n        ? 'Not involved in the selection process'\n        : 'Not involved in the swap process',\n    },\n  ];\n\n  return (\n    <div className=\"legend-box\">\n      {hasLegend(visualizerAlgorithm) && (\n        <div>\n          <div className=\"legend-header-box\">\n            <LegendHeader />\n          </div>\n          <div className=\"legend-information-box\">\n            {legendInformation.map(({ color, description }, index) => (\n              <LegendInformation color={color} description={description} key={index} />\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Legend;\n","/**\n * Generates a random number within [min, max].\n *\n * @method\n * @category MathUtil\n * @param {number} min Min number selected.\n * @param {number} max Max number selected.\n * @returns {number} Random number generated.\n */\nexport const generateValue = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\n/**\n * Rounds the number to 2 decimal places, if necessary.\n *\n * @method\n * @category MathUtil\n * @see {@link https://stackoverflow.com/questions/11832914/round-to-at-most-2-decimal-places-only-if-necessary|Stack Overflow}\n * @param {number} num Input number.\n * @returns {number} Rounded number with maximum 2 decimal places.\n */\nexport const roundToTwoDp = (num) => {\n  return +(Math.round(num + 'e+2') + 'e-2');\n};\n","import { generateValue } from './MathUtil';\n\n/**\n * Buckets used for counting sort animation.\n *\n * @category CountingSortUtil\n * @const {Object[]}\n */\nexport const buckets = [\n  { height: 1, count: 0 },\n  { height: 2, count: 0 },\n  { height: 3, count: 0 },\n  { height: 4, count: 0 },\n  { height: 5, count: 0 },\n  { height: 6, count: 0 },\n  { height: 7, count: 0 },\n  { height: 8, count: 0 },\n  { height: 9, count: 0 },\n];\n\n/**\n * Generates the random array for counting sort.\n *\n * @method\n * @category CountingSortUtil\n * @param {number} size Size of array generated.\n * @returns {Object[]} Random array for counting sort.\n */\nexport const generateCountSortArray = (size) => {\n  let array = [];\n  for (let i = 0; i < size; i++) {\n    array.push({\n      id: i,\n      height: generateValue(1, 9),\n      isShown: true,\n    });\n  }\n  return array;\n};\n\n// Function to execute the counting sort animation\n\n/**\n * Executes one step of the counting sort algorithm.\n *\n * @method\n * @category CountingSortUtil\n * @param {Object} currentAnimation Current animation object.\n * @param {Object[]} referenceArray Current state of the data array in the sorting execution.\n * @param {number} animationPx Current animation percentage.\n * @param {Object[]} countArr Count bucket array used for counting sort.\n * @param {boolean} isForward Boolean value which states if this is a forward or backward animation.\n * @returns {Object[]} The next state of the reference array after this sorting step.\n */\nexport const executeCountSort = (\n  currentAnimation,\n  referenceArray,\n  animationPx,\n  countArr,\n  isForward\n) => {\n  const index = currentAnimation.id;\n  const height = currentAnimation.height;\n  const isCountAnimation = (isForward && animationPx <= 50) || (!isForward && animationPx >= 50);\n  if (isCountAnimation) {\n    referenceArray[index].isShown = false;\n    countArr[height - 1].count += 1;\n  } else {\n    referenceArray[index] = currentAnimation;\n    referenceArray[index].isShown = true;\n    countArr[height - 1].count -= 1;\n  }\n  return referenceArray;\n};\n","import { generateValue } from './MathUtil';\n\n/**\n * Fixed stack array created for radix and bucket sort usage.\n *\n * @category RadixSortUtil\n * @const {Object[]}\n */\nexport const stack = [\n  { value: 0, array: [] },\n  { value: 1, array: [] },\n  { value: 2, array: [] },\n  { value: 3, array: [] },\n  { value: 4, array: [] },\n  { value: 5, array: [] },\n  { value: 6, array: [] },\n  { value: 7, array: [] },\n  { value: 8, array: [] },\n  { value: 9, array: [] },\n];\n\n/**\n * Generates a random value for generation of array in radix sort.\n *\n * @method\n * @category RadixSortUtil\n * @returns {number} Random number generated.\n */\nexport const generateRandomValue = () => {\n  const randomVal = Math.random();\n  if (randomVal < 0.1) {\n    return generateValue(1, 9);\n  } else if (randomVal < 0.2) {\n    return generateValue(10, 99);\n  } else if (randomVal <= 1) {\n    return generateValue(100, 999);\n  }\n};\n\n/**\n * Generates the random array for radix sort.\n *\n * @method\n * @category RadixSortUtil\n * @param {number} size Size of array generated.\n * @returns {Object[]} Random array for radix sort.\n */\nexport const generateRadixSortArray = (size) => {\n  let array = [];\n  for (let i = 0; i < size; i++) {\n    array.push({\n      id: i,\n      height: generateRandomValue(),\n      isShown: true,\n    });\n  }\n  return array;\n};\n\n/**\n * Executes one step of the radix sort algorithm.\n *\n * @method\n * @category RadixSortUtil\n * @param {Object} currentAnimation Current animation object.\n * @param {Object[]} referenceArray Current state of the data array in the sorting execution.\n * @param {Object[]} stackArr Current state of the stack array in the sorting execution.\n * @param {boolean} isForward Boolean value which states if this is a forward or backward animation.\n * @returns {Object[]} The next state of the reference array after this sorting step.\n */\nexport const executeRadixSort = (currentAnimation, referenceArray, stackArr, isForward) => {\n  const index = currentAnimation.id;\n  const isDistributing = currentAnimation.isDistributing;\n  const isDistributingAnimation = !(isForward ^ isDistributing);\n\n  if (isDistributingAnimation) {\n    referenceArray[index].isShown = false;\n    const location = currentAnimation.location;\n    if (isForward) {\n      stackArr[location].array.push(currentAnimation);\n    } else {\n      stackArr[location].array.unshift(currentAnimation);\n    }\n  } else {\n    // Putting back into array\n    const location = currentAnimation.location;\n    referenceArray[index] = currentAnimation;\n    referenceArray[index].isShown = true;\n    if (isForward) {\n      stackArr[location].array.shift();\n    } else {\n      stackArr[location].array.pop();\n    }\n  }\n  return referenceArray;\n};\n","import { generateValue } from './MathUtil';\nimport { arrayCopy } from './ArrayUtil';\n\n/**\n * This is to find the \"correct\" index to be swapped since the actual array is not being swapped.\n *\n * @method\n * @category MergeSortUtil\n * @param {Object[]} newTempArr The new input array.\n * @param {number} iIdx I-th Index to be swapped.\n * @param {number} jIdx J-th Index to be swapped.\n * @returns {number} The index to be used in the swap animation.\n */\nexport const findIndexToUseInMergeSort = (newTempArr, iIdx, jIdx) => {\n  for (let k = 0; k < newTempArr.length; k++) {\n    let isUsingIIdx = iIdx === -1 && newTempArr[k].prevPos === jIdx;\n    let isUsingJIdx = jIdx === -1 && newTempArr[k].prevPos === iIdx;\n    if (isUsingIIdx || isUsingJIdx) {\n      return k;\n    }\n  }\n  return -1;\n};\n\n/**\n * A sorting execution for Merge Sort.\n *\n * @method\n * @category MergeSortUtil\n * @param {any[]} currentAnimation The current animation to be executed.\n * @param {Object[]} referenceArray The array holding data for the \"blocks\".\n * @param {Object[]} historyArr An array holding the data of each states of the reference array.\n * @param {function} setReferenceArray A set state method for reference array.\n * @returns {Object[]} The resultant array upon the swap animation.\n */\nexport const executeMergeSortForward = (\n  currentAnimation,\n  referenceArray,\n  historyArr,\n  setReferenceArray\n) => {\n  let nextReferenceArray = handleMergeSort(referenceArray, currentAnimation);\n  historyArr.push(referenceArray);\n  setReferenceArray(nextReferenceArray);\n  return nextReferenceArray;\n};\n\n/**\n * A sorting execution for Merge Sort in the reverse direction.\n *\n * @method\n * @category MergeSortUtil\n * @param {Object[]} historyArr An array holding the data of each states of the reference array.\n * @param {function} setReferenceArray A set state method for reference array.\n */\nexport const executeMergeSortBackward = (historyArr, setReferenceArray) => {\n  setReferenceArray(historyArr.pop());\n};\n\n/**\n * A \"hackish\" method to simulate the swapping in merge swap without actually sorting the array.\n *\n * @method\n * @category MergeSortUtil\n * @param {Object[]} referenceArray The array holding data for the \"blocks\".\n * @param {any[]} currentAnimation The current animation to be executed.\n * @returns {Object[]} The resultant array upon the swap animation\\.\n */\nexport const handleMergeSort = (referenceArray, currentAnimation) => {\n  let dataSize = referenceArray.length;\n  let width = 800 / dataSize;\n  let newTempArr = arrayCopy(referenceArray);\n  let isShift = currentAnimation[2];\n  let iIdx = currentAnimation[0];\n  let jIdx = currentAnimation[1];\n  let kIdx = currentAnimation[3];\n  let isReset = currentAnimation[4];\n  // is Shift true represents moving down, false means moving back up to the desired position.\n  if (isShift) {\n    let allIndexToShift = currentAnimation[5];\n    for (let value of allIndexToShift) {\n      // hard code one of the index to be -1\n      let idxToUse = findIndexToUseInMergeSort(newTempArr, value, -1);\n      newTempArr[idxToUse].isShift = true;\n    }\n  } else {\n    let idxToUse = findIndexToUseInMergeSort(newTempArr, iIdx, jIdx);\n    let positiveDiff = Math.abs(kIdx - idxToUse);\n    newTempArr[idxToUse].xDirection =\n      kIdx - idxToUse <= 0\n        ? -(positiveDiff * width) + (kIdx - 0) * 10\n        : positiveDiff * width + (kIdx - 0) * 10;\n    newTempArr[idxToUse].isShift = false;\n    newTempArr[idxToUse].pos = kIdx;\n    if (isReset) {\n      // this signifies the end of \"1 iteration of combining together\"\n      for (let i = 0; i < newTempArr.length; i++) {\n        newTempArr[i].prevPos = newTempArr[i].pos;\n      }\n    }\n  }\n  return newTempArr;\n};\n\n/**\n * Generates the random data for merge sort.\n *\n * @method\n * @category MergeSortUtil\n * @param {number} size The number of blocks to be shown.\n * @returns {Object[]} A array containing the states of each block.\n */\nexport const generateMergeSortArray = (size) => {\n  let array = [];\n  for (let i = 0; i < size; i++) {\n    array.push({\n      xDirection: i * 10,\n      pos: i,\n      prevPos: i,\n      height: generateValue(1, 9),\n      isShift: false,\n      id: i,\n    });\n  }\n  return array;\n};\n","export const swap = (i, j, arr) => {\n  let temp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = temp;\n};\n","// For swapping algorithms\nimport { swap } from '../../algorithm/sortingalgorithms/swap';\nimport { resetArray } from './ArrayUtil';\n\n/**\n * Sets the state of the \"block\" or \"oval\" to be highlighted.\n *\n * @method\n * @category SwappingUtil\n * @param {number} firstIdx The first block\" or \"oval\" to be highlighted.\n * @param {number} secondIdx The second block\" or \"oval\" to be highlighted.\n * @param {Object[]} arr The array which the index at {@code firstIdx} and {@code secondIdx} is highlighted\n */\nexport const highlight = (firstIdx, secondIdx, arr) => {\n  arr[firstIdx].isSwap = true;\n  arr[secondIdx].isSwap = true;\n};\n\n/**\n * Swaps the position of the two object in the array.\n *\n * @method\n * @category SwappingUtil\n * @param {number} firstIdx The first index to be swapped in the array.\n * @param {number} secondIdx The second index to be swapped in the array.\n * @param {Object[]} arr The array which the index at {@code firstIdx} and {@code secondIdx} is swapped and highlighted or just highlighted.\n * @param {boolean} isSwapOccurring A boolean value denoting whether a swap will occur.\n * @param {string} visualizerAlgorithm The current algorithm of the visualizer.\n * @returns {Object[]} A new Object array which has been been swap and highlighted or just highlighted.\n */\nexport const executeSwap = (firstIdx, secondIdx, arr, isSwapOccurring, visualizerAlgorithm) => {\n  let newTempArr = resetArray(visualizerAlgorithm, arr);\n  highlight(firstIdx, secondIdx, newTempArr);\n  if (!isSwapOccurring) {\n    return newTempArr;\n  }\n  swap(firstIdx, secondIdx, newTempArr);\n  return newTempArr;\n};\n\n/**\n * A generic sorting execution for Insertion, Bubble, Selection, Shell Sort\n *\n * @method\n * @category SwappingUtil\n * @param {any[]} currentAnimation The current animation to be executed.\n * @param {Object[]} referenceArray The array holding data for the \"blocks\"\n * @param {string} visualizerAlgorithm The current algorithm of the visualizer\n * @param {function} setReferenceArray A set state method for reference array.\n * @returns {Object[]} The resultant array upon the swap animation\n */\nexport const executeGenericSort = (\n  currentAnimation,\n  referenceArray,\n  visualizerAlgorithm,\n  setReferenceArray\n) => {\n  let firstIdx = currentAnimation[0];\n  let secondIdx = currentAnimation[1];\n  let isSwapOccurring = currentAnimation[2];\n  let arrToUse = executeSwap(\n    firstIdx,\n    secondIdx,\n    referenceArray,\n    isSwapOccurring,\n    visualizerAlgorithm\n  );\n  setReferenceArray(arrToUse);\n  return arrToUse;\n};\n","import { executeRadixSort } from './RadixSortUtil';\nimport { executeSwap } from './SwappingAlgoUtil';\nimport { resetArray } from './ArrayUtil';\n\n/**\n * Generates a random decimal.\n *\n * @category BucketSortUtil\n * @returns {number} Random decimal generated.\n */\nconst generateDecimal = () => {\n  return +Math.random().toFixed(3);\n};\n\n/**\n * Inner sorting algorithm used for bucket sort.\n *\n * @category BucketSortUtil\n * @type {string}\n */\nconst innerSortUsed = 'Insertion Sort';\n\n/**\n * Executes one step of the bucket sort algorithm.\n *\n * @method\n * @category BucketSortUtil\n * @param {any} currentAnimation Current animation object.\n * @param {Object[]} referenceArray Current state of the data array in the sorting execution.\n * @param {Object[]} stackArr Current state of the stack array in the sorting execution.\n * @param {boolean} isForward Boolean value which states if this is a forward or backward animation.\n * @returns {Object[]} The next state of the reference array after this sorting step.\n */\nexport const executeBucketSort = (currentAnimation, referenceArray, stackArr, isForward) => {\n  if (currentAnimation.length === 4) {\n    executeInnerBucketSort(currentAnimation, stackArr);\n  } else if (currentAnimation.isSort === undefined) {\n    executeRadixSort(currentAnimation, referenceArray, stackArr, isForward);\n  } else {\n    executeResetBucket(currentAnimation, stackArr);\n  }\n  return referenceArray;\n};\n\n/**\n * Executes one step of insertion sort on one single bucket.\n *\n * @category BucketSortUtil\n * @param {any[]} currentAnimation Current animation object.\n * @param {Object[]} stackArr Current stack array.\n */\nconst executeInnerBucketSort = (currentAnimation, stackArr) => {\n  const firstIdx = currentAnimation[0];\n  const secondIdx = currentAnimation[1];\n  const isSwapOccurring = currentAnimation[2];\n  const location = currentAnimation[3];\n  stackArr[location].array = executeSwap(\n    firstIdx,\n    secondIdx,\n    stackArr[location].array,\n    isSwapOccurring,\n    innerSortUsed\n  );\n};\n\n/**\n * Resets the inner bucket to the default state. This removes any leftover highlight from the\n * elements.\n *\n * @category BucketSortUtil\n * @param {Object} currentAnimation Current animation object.\n * @param {Object[]} stackArr Current stack array.\n */\nconst executeResetBucket = (currentAnimation, stackArr) => {\n  const location = currentAnimation.location;\n  stackArr[location].array = resetArray(innerSortUsed, stackArr[location].array);\n};\n\n/**\n * Generates the random array for bucket sort.\n *\n * @method\n * @category BucketSortUtil\n * @param {number} size Size of array generated.\n * @returns {Object[]} Random array for bucket sort.\n */\nexport const generateBucketSortArray = (size) => {\n  let array = [];\n  for (let i = 0; i < size; i++) {\n    array.push({\n      id: i,\n      height: generateDecimal(),\n      isShown: true,\n    });\n  }\n  return array;\n};\n","/**\n * Sorts the array using Insertion Sort and stores each sorting step into the animation array.\n *\n * @memberOf SortingAlgorithms\n * @param {Object[]} arr The array to be sorted.\n * @returns {any[]} Animation array which contains the animation instruction for each step.\n */\nconst insertionSort = (arr) => {\n  let receivedArr = arr;\n  let animationArr = [];\n  let length = receivedArr.length;\n  for (let i = 1; i < length; i++) {\n    let key = receivedArr[i];\n    let j = i - 1;\n    animationArr.push([i, i - 1, false]);\n    while (j >= 0 && receivedArr[j].height > key.height) {\n      receivedArr[j + 1] = receivedArr[j];\n      animationArr.push([j + 1, j, true]);\n      j--;\n      if (j >= 0 && receivedArr[j].height > key.height) {\n        animationArr.push([j + 1, j, false]);\n      }\n    }\n    receivedArr[j + 1] = key;\n  }\n  return animationArr;\n};\n\nexport default insertionSort;\n","import { swap } from './swap';\n\nconst partition = (arr, low, high, animationArr) => {\n  let pivot = arr[high].height;\n  let i = low - 1;\n  for (let j = low; j < high; j++) {\n    if (arr[j].height < pivot) {\n      // first boolean is to represent a swap\n      animationArr.push([j, j, false, high, 'incI', i]);\n      i++;\n      if (i !== j) {\n        animationArr.push([i, j, true, high, 'iToJ', i]);\n        swap(i, j, arr);\n      }\n    } else {\n      animationArr.push([j, j, false, high, 'jToPivot', i]);\n    }\n  }\n  animationArr.push([i + 1, high, true, high, 'swapPivot', i]);\n  swap(i + 1, high, arr);\n  return i + 1;\n};\n\nconst quickSortHelper = (arr, low, high, animationArr) => {\n  if (low < high) {\n    let pi = partition(arr, low, high, animationArr);\n    quickSortHelper(arr, low, pi - 1, animationArr);\n    quickSortHelper(arr, pi + 1, high, animationArr);\n  }\n};\n\n/**\n * Sorts the array using Quick Sort and stores each sorting step into the animation array.\n *\n * @memberOf SortingAlgorithms\n * @see {@link https://www.geeksforgeeks.org/quick-sort/}\n * @param {Object[]} arr The array to be sorted.\n * @returns {any[]} Animation array which contains the animation instruction for each step.\n */\nconst quickSort = (arr) => {\n  let animationArr = [];\n  quickSortHelper(arr, 0, arr.length - 1, animationArr);\n  return animationArr;\n};\n\nexport default quickSort;\n","import { swap } from './swap';\n\n/**\n * Sorts the array using Bubble Sort and stores each sorting step into the animation array.\n *\n * @memberOf SortingAlgorithms\n * @param {Object[]} arr The array to be sorted.\n * @returns {any[]} Animation array which contains the animation instruction for each step.\n */\nconst bubbleSort = (arr) => {\n  let receivedArr = arr;\n  let animationArr = [];\n  for (let i = receivedArr.length - 1; i >= 0; i--) {\n    let flag = true;\n    for (let j = 0; j < i; j++) {\n      animationArr.push([j + 1, j, false]);\n      if (receivedArr[j].height > receivedArr[j + 1].height) {\n        swap(j, j + 1, receivedArr);\n        animationArr.push([j + 1, j, true]);\n        flag = false;\n      }\n    }\n    if (flag) {\n      break;\n    }\n  }\n  return animationArr;\n};\n\nexport default bubbleSort;\n","import insertionSort from './insertionSort';\n\n/**\n * Sorts the array using Bucket Sort and stores each sorting step into the animation array.\n *\n * @memberOf SortingAlgorithms\n * @param {Object[]} arr The array to be sorted.\n * @returns {any[]} Animation array which contains the animation instruction for each step.\n */\nconst bucketSort = (arr) => {\n  const totalSlots = 10;\n  let buckets = [...Array(totalSlots)].map(() => []);\n  let animationArr = [];\n  let id = 0;\n  for (const item of arr) {\n    const location = Math.floor(totalSlots * item.height);\n    animationArr.push({\n      id: id,\n      height: item.height,\n      isShown: true,\n      location: location,\n      isDistributing: true,\n    });\n    id++;\n    buckets[location].push(item);\n  }\n\n  // Sort all arrays in buckets\n  for (let i = 0; i < totalSlots; i++) {\n    // Signify start of sort\n    animationArr.push({\n      isSort: true,\n      location: i,\n    });\n\n    // Execute insertion sort animations\n    let insertionSortAnimation = insertionSort(buckets[i]).map((arr) => [...arr, i]);\n    animationArr = animationArr.concat(insertionSortAnimation);\n\n    // Signify end of sort\n    animationArr.push({\n      isSort: false,\n      location: i,\n    });\n  }\n\n  // Restore element back into array\n  id = 0;\n  let location = 0;\n  for (const array of buckets) {\n    for (const item of array) {\n      animationArr.push({\n        id: id,\n        height: item.height,\n        isShown: true,\n        location: location,\n        isDistributing: false,\n        isSwap: false,\n      });\n      id++;\n    }\n    location++;\n  }\n  return animationArr;\n};\n\nexport default bucketSort;\n","const merge = (receivedArr, start, mid, end, animationArr) => {\n  const n1 = mid - start + 1;\n  const n2 = end - mid;\n  let leftArray = [];\n  let rightArray = [];\n  let allIndexInSwap = [];\n  for (let i = 0; i < n1; i++) {\n    leftArray.push(receivedArr[start + i]);\n    allIndexInSwap.push(start + i);\n  }\n  for (let j = 0; j < n2; j++) {\n    rightArray.push(receivedArr[mid + 1 + j]);\n    allIndexInSwap.push(mid + 1 + j);\n  }\n  animationArr.push([-1, -1, true, -1, false, allIndexInSwap]);\n  let i = 0,\n    j = 0,\n    k = start;\n  while (i < n1 && j < n2) {\n    if (leftArray[i].height <= rightArray[j].height) {\n      animationArr.push([start + i, -1, false, k, false]);\n      receivedArr[k++] = leftArray[i++];\n    } else {\n      animationArr.push([-1, mid + 1 + j, false, k, false]);\n      receivedArr[k++] = rightArray[j++];\n    }\n  }\n\n  while (i < n1) {\n    if (i + 1 === n1) {\n      animationArr.push([start + i, -1, false, k, true]);\n    } else {\n      animationArr.push([start + i, -1, false, k, false]);\n    }\n    receivedArr[k++] = leftArray[i++];\n  }\n\n  while (j < n2) {\n    if (j + 1 === n2) {\n      animationArr.push([-1, mid + 1 + j, false, k, true]);\n    } else {\n      animationArr.push([-1, mid + 1 + j, false, k, false]);\n    }\n    receivedArr[k++] = rightArray[j++];\n  }\n};\n\nconst mergeSortHelper = (receivedArr, animationArr, start, end) => {\n  if (start < end) {\n    const mid = Math.floor((start + end) / 2);\n    mergeSortHelper(receivedArr, animationArr, start, mid);\n    mergeSortHelper(receivedArr, animationArr, mid + 1, end);\n    merge(receivedArr, start, mid, end, animationArr);\n  }\n};\n\n/**\n * Sorts the array using Merge Sort and stores each sorting step into the animation array.\n *\n * @memberOf SortingAlgorithms\n * @see {@link https://www.geeksforgeeks.org/merge-sort/}\n * @param {Object[]} arr The array to be sorted.\n * @returns {any[]} Animation array which contains the animation instruction for each step.\n */\nconst mergeSort = (arr) => {\n  let receivedArr = arr;\n  let animationArr = [];\n  mergeSortHelper(receivedArr, animationArr, 0, arr.length - 1);\n  return animationArr;\n};\n\nexport default mergeSort;\n","import insertionSort from './insertionSort';\nimport quickSort from './quickSort';\nimport bubbleSort from './bubbleSort';\nimport radixSort from './radixSort';\nimport bucketSort from './bucketSort';\nimport countingSort from './countingSort';\nimport mergeSort from './mergeSort';\nimport selectionSort from './selectionSort';\nimport shellSort from './shellSort';\nimport heapSort from './heapSort';\n\n/**\n * An Object component that is used to access the sorting method.\n *\n * @namespace SortingAlgorithms\n * @type {Object}\n */\nconst SortingAlgorithms = {\n  'Insertion Sort': insertionSort,\n  'Bubble Sort': bubbleSort,\n  'Quick Sort': quickSort,\n  'Radix Sort': radixSort,\n  'Bucket Sort': bucketSort,\n  'Counting Sort': countingSort,\n  'Selection Sort': selectionSort,\n  'Merge Sort': mergeSort,\n  'Shell Sort': shellSort,\n  'Heap Sort': heapSort,\n};\n\nexport default SortingAlgorithms;\n","/**\n * Sorts the array using Radix Sort and stores each sorting step into the animation array.\n *\n * @memberOf SortingAlgorithms\n * @see {@link https://www.tutorialspoint.com/radix-sort-in-javascript}\n * @param {Object[]} arr The array to be sorted.\n * @returns {any[]} Animation array which contains the animation instruction for each step.\n */\nconst radixSort = (arr) => {\n  let inputArr = arr;\n  let animationArr = [];\n  const maxNum = Math.max(...inputArr.map((x) => x.height)) * 10;\n  let divisor = 10;\n  while (divisor < maxNum) {\n    let id = 0;\n    let buckets = [...Array(10)].map(() => []);\n\n    for (const item of inputArr) {\n      const height = item.height;\n      const location = Math.floor((height % divisor) / (divisor / 10));\n      buckets[location].push(item);\n      animationArr.push({\n        id: id,\n        height: item.height,\n        isShown: true,\n        location: location,\n        isDistributing: true,\n      });\n      id++;\n    }\n    inputArr = [].concat.apply([], buckets);\n    id = 0;\n    let location = 0;\n    for (const array of buckets) {\n      for (const item of array) {\n        animationArr.push({\n          id: id,\n          height: item.height,\n          isShown: true,\n          location: location,\n          isDistributing: false,\n        });\n        id++;\n      }\n      location++;\n    }\n    divisor *= 10;\n  }\n  return animationArr;\n};\n\nexport default radixSort;\n","/**\n * Sorts the array using Counting Sort and stores each sorting step into the animation array.\n *\n * @memberOf SortingAlgorithms\n * @param {Object[]} arr The array to be sorted.\n * @returns {any[]} Animation array which contains the animation instruction for each step.\n */\nconst countingSort = (arr) => {\n  let receivedArr = arr;\n  let countArr = [...Array(10)].map(() => 0);\n  for (let i = 0; i < receivedArr.length; i++) {\n    countArr[receivedArr[i].height]++;\n  }\n  let id = 0;\n  for (let i = 0; i < countArr.length; i++) {\n    while (countArr[i] !== 0) {\n      receivedArr.push({\n        id: id,\n        height: i,\n        isShown: true,\n      });\n      id++;\n      countArr[i]--;\n    }\n  }\n  return receivedArr;\n};\n\nexport default countingSort;\n","import { swap } from './swap';\n\n/**\n * Sorts the array using Selection Sort and stores each sorting step into the animation array.\n *\n * @memberOf SortingAlgorithms\n * @param {Object[]} arr The array to be sorted.\n * @returns {any[]} Animation array which contains the animation instruction for each step.\n */\nconst selectionSort = (arr) => {\n  let receivedArr = arr;\n  let animationArr = [];\n  for (let i = 0; i < receivedArr.length - 1; i++) {\n    let smallestIdx = i;\n    for (let j = i + 1; j < receivedArr.length; j++) {\n      animationArr.push([smallestIdx, j, false]);\n      if (receivedArr[j].height < receivedArr[smallestIdx].height) {\n        smallestIdx = j;\n      }\n    }\n    if (i !== smallestIdx) {\n      swap(smallestIdx, i, receivedArr);\n      animationArr.push([smallestIdx, i, true]);\n    }\n  }\n  return animationArr;\n};\n\nexport default selectionSort;\n","import { swap } from './swap';\n\n/**\n * Sorts the array using Shell Sort and stores each sorting step into the animation array.\n *\n * @memberOf SortingAlgorithms\n * @see {@link https://levelup.gitconnected.com/shell-sort-in-javascript-c8a487041cdb}\n * @param {Object[]} arr The array to be sorted.\n * @returns {any[]} Animation array which contains the animation instruction for each step.\n */\nconst shellSort = (arr) => {\n  let n = arr.length;\n  let receivedArr = arr;\n  let animationArr = [];\n\n  for (let gap = Math.floor(n / 2); gap > 0; gap = Math.floor(gap / 2)) {\n    for (let i = gap; i < n; i += 1) {\n      let temp = receivedArr[i].height;\n\n      let j;\n      for (j = i; j >= gap; j -= gap) {\n        animationArr.push([j - gap, j, false]);\n        if (receivedArr[j - gap].height > temp) {\n          animationArr.push([j - gap, j, true]);\n          swap(j - gap, j, receivedArr);\n          continue;\n        }\n        break;\n      }\n    }\n  }\n\n  return animationArr;\n};\n\nexport default shellSort;\n","import { generateValue } from './MathUtil';\nimport { generateMergeSortArray } from './MergeSortUtil';\nimport { generateCountSortArray } from './CountingSortUtil';\nimport { generateRadixSortArray } from './RadixSortUtil';\nimport { generateBucketSortArray } from './BucketSortUtil';\nimport SortingAlgorithms from '../../algorithm/sortingalgorithms/allSorts';\nimport { isCountingSort, isMergeSort, isRadixOrBucket } from './GeneralUtil';\n\n/**\n * Resets the given array.\n *\n * @method\n * @category ArrayUtil\n * @param {string} visualizerAlgorithm Algorithm used.\n * @param {Object[]} arr Array to be reset.\n * @returns {Object[]} Array that has been reset.\n */\nexport const resetArray = (visualizerAlgorithm, arr) => {\n  if (isRadixOrBucket(visualizerAlgorithm)) {\n    return arrayCopy(arr);\n  }\n\n  return arrayCopy(arr).map((x) => {\n    let tempArrElement = x;\n    if (isCountingSort(visualizerAlgorithm)) {\n      tempArrElement.isShown = true;\n    } else if (isMergeSort(visualizerAlgorithm)) {\n      tempArrElement.isShift = false;\n    } else {\n      tempArrElement.isSwap = false;\n    }\n    return tempArrElement;\n  });\n};\n\n/**\n * Creates a deep copy of the array.\n *\n * @method\n * @category ArrayUtil\n * @param {Object[]} arr Array to be copied.\n * @returns {Object[]} Deep copy of the input array.\n */\nexport const arrayCopy = (arr) => {\n  return JSON.parse(JSON.stringify(arr));\n};\n\n/**\n * Retrieves the animation array based on the given array and algorithm selected.\n *\n * @method\n * @category ArrayUtil\n * @param {string} visualizerAlgorithm The current algorithm of the visualizer.\n * @param {Object[]} arrayData Given array.\n * @returns {any[]} An array that contains all the animation steps.\n */\nexport const getAnimationArr = (visualizerAlgorithm, arrayData) => {\n  const sortAlgo = SortingAlgorithms[visualizerAlgorithm];\n  return sortAlgo(arrayCopy(arrayData));\n};\n\n/**\n * Object used to map the names of each algorithm to its generated array.\n *\n * @method\n * @category ArrayUtil\n * @const {Object}\n */\nconst arrayGenerator = {\n  'Insertion Sort': (size) => generateDefaultArray(size),\n  'Bubble Sort': (size) => generateDefaultArray(size),\n  'Quick Sort': (size) => generateDefaultArray(size),\n  'Shell Sort': (size) => generateDefaultArray(size),\n  'Heap Sort': (size) => generateDefaultArray(size),\n  'Selection Sort': (size) => generateDefaultArray(size),\n  'Merge Sort': (size) => generateMergeSortArray(size),\n  'Counting Sort': (size) => generateCountSortArray(size),\n  'Radix Sort': (size) => generateRadixSortArray(size),\n  'Bucket Sort': (size) => generateBucketSortArray(size),\n};\n\n/**\n * Generates a random array based on the size chosen and the algorithm selected.\n *\n * @method\n * @category ArrayUtil\n * @param {number} size Size of array selected by user.\n * @param {string} visualizerAlgorithm The current algorithm of the visualizer.\n * @returns {Object[]} Random array generated.\n */\nexport const generateArray = (size, visualizerAlgorithm) => {\n  return arrayGenerator[visualizerAlgorithm](size);\n};\n\n/**\n * Generates the default array. Used by all sorting algorithms involving swaps only.\n *\n * @category ArrayUtil\n * @param {number} size Size of array selected by user.\n * @returns {Object[]} Random array generated.\n */\nconst generateDefaultArray = (size) => {\n  let array = [];\n  for (let i = 0; i < size; i++) {\n    array.push({\n      id: i,\n      height: generateValue(5, 20),\n      isSwap: false,\n    });\n  }\n  return array;\n};\n","import React, { useContext, useState } from 'react';\nimport { Dropdown, Menu } from 'antd';\nimport { DownOutlined } from '@ant-design/icons';\nimport { VisualizerStateContext } from '../../../Visualizer';\nimport 'antd/dist/antd.css';\nimport { isRadixOrBucket } from '../../../util/GeneralUtil';\nimport { buckets } from '../../../util/CountingSortUtil';\nimport './styles.css';\nimport { stack } from '../../../util/RadixSortUtil';\nimport { arrayCopy, generateArray } from '../../../util/ArrayUtil';\n\n/**\n * A drop down menu which allows users to pick their algorithm for the visualizer.\n *\n * @component\n * @category Visualizer\n */\nconst AlgorithmChooser = () => {\n  const {\n    dataSize,\n    setDataSize,\n    isPlay,\n    isInMidstOfSort,\n    setIsReplay,\n    setIsInMidstOfSort,\n    setVisualizerAlgorithm,\n    setArrayData,\n    setAnimationPercentage,\n    setIsReset,\n    setCountArr,\n    setStackArr,\n    setHistoryArr,\n  } = useContext(VisualizerStateContext);\n\n  const [algorithm, setAlgorithm] = useState('Bubble Sort');\n\n  /**\n   * List of available Algorithms available in Sort-Algo.\n   */\n  const listOfAlgorithm = [\n    { algorithmName: 'Bubble Sort', key: '0' },\n    { algorithmName: 'Insertion Sort', key: '1' },\n    { algorithmName: 'Selection Sort', key: '2' },\n    { algorithmName: 'Merge Sort', key: '3' },\n    { algorithmName: 'Quick Sort', key: '4' },\n    { algorithmName: 'Heap Sort', key: '5' },\n    { algorithmName: 'Shell Sort', key: '6' },\n    { algorithmName: 'Counting Sort', key: '7' },\n    { algorithmName: 'Radix Sort', key: '8' },\n    { algorithmName: 'Bucket Sort', key: '9' },\n  ];\n\n  /**\n   * Retrieves the algorithm name being chosen and set the system's algorithm to the selected algorithm.\n   *\n   * @param algorithmName Algorithm which is chosen via the drop down menu.\n   */\n  const handleMenuClick = (algorithmName) => {\n    setAlgorithm(algorithmName);\n    setVisualizerAlgorithm(algorithmName);\n    if (algorithm !== algorithmName) {\n      if (isInMidstOfSort) {\n        setIsInMidstOfSort(false);\n      }\n      if (dataSize > 10 && isRadixOrBucket(algorithmName)) {\n        setArrayData(generateArray(10, algorithmName));\n        setDataSize(10);\n      } else {\n        setArrayData(generateArray(dataSize, algorithmName));\n      }\n      setIsReplay(false);\n      setIsReset(true);\n      setCountArr(arrayCopy(buckets));\n      setStackArr(arrayCopy(stack));\n      setHistoryArr([]);\n      setAnimationPercentage(0);\n    }\n  };\n\n  /**\n   * A drop down list which displays a list of algorithms available in Sort-Algo.\n   *\n   * @type {JSX.Element}\n   */\n  const menu = (\n    <Menu>\n      {listOfAlgorithm.map(({ algorithmName, key }) => {\n        return (\n          <Menu.Item\n            key={key}\n            onClick={() => handleMenuClick(algorithmName)}\n            style={{ color: '#8789B5' }}\n          >\n            {algorithmName}\n          </Menu.Item>\n        );\n      })}\n    </Menu>\n  );\n\n  return (\n    <div\n      className=\"algorithm-selector-holder\"\n      style={{ cursor: isPlay ? 'not-allowed' : 'cursor' }}\n    >\n      <Dropdown overlay={menu} trigger={['click']} placement={'bottomCenter'} disabled={isPlay}>\n        <a\n          className=\"ant-dropdown-link\"\n          onClick={(e) => e.preventDefault()}\n          id=\"algorithm-selector-drop-down-arrow\"\n        >\n          {algorithm}\n          <DownOutlined\n            style={{ transform: 'translateX(5px)', cursor: isPlay ? 'not-allowed' : 'cursor' }}\n          />\n        </a>\n      </Dropdown>\n    </div>\n  );\n};\n\nexport default AlgorithmChooser;\n","import React, { useContext, useState } from 'react';\nimport { Slider } from 'antd';\nimport 'antd/dist/antd.css';\nimport './styles.css';\nimport { VisualizerStateContext } from '../../../Visualizer';\nimport { isRadixOrBucket } from '../../../util/GeneralUtil';\n\n/**\n * A generic component for the slider.\n *\n * @component\n * @category Visualizer\n * @param {function} setData A method to change the data upon sliding.\n * @param {number} min The minimum value for the slider.\n * @param {number} max The maximum value for the slider.\n * @param {string} name The name to be displayed for the slider.\n * @returns {JSX.Element} A slider component that is bounded by {@code min} and {@code max}.\n */\nconst SliderSelector = ({ setData, min, max, name }) => {\n  const { isPlay, visualizerAlgorithm } = useContext(VisualizerStateContext);\n\n  const maxSize = isRadixOrBucket(visualizerAlgorithm) ? 10 : max;\n\n  const [sliderData, setSliderData] = useState(() => Math.floor((min + maxSize) / 2));\n\n  return (\n    <div className=\"selector-holder\">\n      <span>\n        {name}: {sliderData}\n      </span>\n      <Slider\n        defaultValue={Math.floor((min + maxSize) / 2)}\n        min={min}\n        max={maxSize}\n        onChange={(val) => setSliderData(val)}\n        onAfterChange={() => setData(sliderData)}\n        disabled={isPlay}\n      />\n    </div>\n  );\n};\n\nexport default SliderSelector;\n","import { executeSwap } from './SwappingAlgoUtil';\n\n/**\n * A sorting execution for Quick Sort.\n *\n * @method\n * @category QuickSortUtil\n * @param {any[]} currentAnimation The current animation to be executed.\n * @param {Object[]} referenceArray The array holding data for the \"blocks\".\n * @param {string} visualizerAlgorithm The current algorithm of the visualizer.\n * @param {function} setReferenceArray A set state method for reference array.\n * @returns {Object[]} The resultant array upon the swap animation.\n */\nexport const executeQuickSort = (\n  currentAnimation,\n  referenceArray,\n  visualizerAlgorithm,\n  setReferenceArray\n) => {\n  let firstIdx = currentAnimation[1];\n  let secondIdx = currentAnimation[0];\n  let pivotIdx = currentAnimation[3];\n  let isSwapOccurring = currentAnimation[2];\n  let arrToUse = executeSwapWithPivot(\n    firstIdx,\n    secondIdx,\n    pivotIdx,\n    referenceArray,\n    isSwapOccurring,\n    visualizerAlgorithm\n  );\n  setReferenceArray(arrToUse);\n  return arrToUse;\n};\n\n/**\n * A sorting execution for Quick Sort\n *\n * @method\n * @category QuickSortUtil\n * @param {number} firstIdx The first index to be swapped\n * @param {number} secondIdx The second index to be swapped\n * @param {number} pivotIdx The pivot index that is being compared to\n * @param {Object[]} arr The array which the index at {@code firstIdx} and {@code secondIdx} is swapped\n * @param {boolean} isSwapOccurring A boolean value denoting whether a swap will occur\n * @param {string} visualizerAlgorithm The current algorithm of the visualizer\n * @returns {Object[]} A new Object array which has been been swap and highlighted or just highlighted\n */\nexport const executeSwapWithPivot = (\n  firstIdx,\n  secondIdx,\n  pivotIdx,\n  arr,\n  isSwapOccurring,\n  visualizerAlgorithm\n) => {\n  let newTempArr = executeSwap(firstIdx, secondIdx, arr, isSwapOccurring, visualizerAlgorithm);\n  newTempArr[pivotIdx].isSwap = true;\n  return newTempArr;\n};\n","export const SpeedSelectorProps = {\n  min: 1,\n  max: 10,\n  name: 'Speed',\n};\n\nexport const DataSizeSelectorProps = {\n  min: 5,\n  max: 25,\n  name: 'Size',\n};\n","import React, { useContext } from 'react';\nimport 'antd/dist/antd.css';\nimport { Progress } from 'antd';\nimport { VisualizerStateContext } from '../../Visualizer';\n\n/**\n * Progress bar for the animation completion.\n *\n * @component\n * @category Visualizer\n */\nconst AnimationProgressBar = () => {\n  const { animationPercentage } = useContext(VisualizerStateContext);\n  return (\n    <div style={{ width: 300, transform: 'translateY(60px)' }}>\n      <Progress\n        status={'normal'}\n        strokeColor={{\n          '0%': '#287ED0',\n          '100%': '#5466FF',\n        }}\n        percent={animationPercentage}\n      />\n    </div>\n  );\n};\n\nexport default AnimationProgressBar;\n","import React, { useContext } from 'react';\nimport './styles.css';\nimport { VisualizerStateContext } from '../../Visualizer';\n\n/**\n * A counting sort block which represents a data item in the array.\n *\n * @component\n * @category Block\n * @param item Data item from the reference array.\n * @returns {JSX.Element}\n */\nconst CountingSortBlock = ({ item }) => {\n  const { dataSize } = useContext(VisualizerStateContext);\n\n  return (\n    <div\n      className=\"animated-block\"\n      style={{\n        backgroundImage: `linear-gradient(45deg, #287ED0, #5466FF)`,\n        height: item.height * 10 + 9,\n        width: 800 / dataSize,\n        visibility: item.isShown ? `visible` : `hidden`,\n      }}\n    >\n      <span>{item.height}</span>\n    </div>\n  );\n};\n\nexport default CountingSortBlock;\n","import React from 'react';\nimport './styles.css';\n\n/**\n * Horizontal array representation of the entire array.\n *\n * @component\n * @category MultipleBlocks\n * @param referenceArray Current state of the data array.\n * @param BlockType Used to represent each item in the data array.\n * @returns {JSX.Element} Horizontal array component.\n */\nconst HorizontalArray = ({ referenceArray, BlockType }) => {\n  return (\n    <div className=\"horiz-arr\">\n      {referenceArray.map((x) => (\n        <BlockType item={x} key={x.id} />\n      ))}\n    </div>\n  );\n};\n\nexport default HorizontalArray;\n","import React, { useContext } from 'react';\nimport './styles.css';\nimport { VisualizerStateContext } from '../../Visualizer';\n\n/**\n * A count block used to collect items from the reference array.\n *\n * @component\n * @category Block\n * @returns {JSX.Element} Count block component.\n */\nconst CountBlock = ({ item }) => {\n  const { dataSize } = useContext(VisualizerStateContext);\n\n  /**\n   * Color array used to represent the intensity of the highlight for each block.\n   *\n   * @const {string[]}\n   */\n  const colorArr = [\n    '#B8B8B8',\n    '#b4d3de',\n    '#7AC1DB',\n    '#74a2d6',\n    '#7B9AD6',\n    '#6A8FDB',\n    '#5480D9',\n    '#3B6DD2',\n    '#3b5cd2',\n    '#274ac8',\n    '#1e41c8',\n    '#183cc6',\n    '#092ec8',\n    '#091cc8',\n    '#0600c3',\n    '#0600a0',\n    '#030062',\n    '#030030',\n    '#030016',\n    '#000000',\n    '#000000',\n    '#000000',\n    '#000000',\n    '#000000',\n    '#000000',\n  ];\n\n  return (\n    <div className=\"fixed-array-container\">\n      <div\n        className=\"animated-block\"\n        style={{\n          height: item.height * 10 + 9,\n          backgroundColor: colorArr[item.count],\n          width: 800 / Math.max(dataSize, 9),\n        }}\n      >\n        <span>{item.height}</span>\n      </div>\n      <span className=\"count\">{item.count}</span>\n    </div>\n  );\n};\n\nexport default CountBlock;\n","import React, { useContext } from 'react';\nimport CountingSortBlock from '../block/CountingSortBlock';\nimport './styles.css';\nimport { VisualizerStateContext } from '../../Visualizer';\nimport HorizontalArray from '../multipleblocks/HorizontalArray';\nimport CountBlock from '../block/CountBlock';\n\n/**\n * Counting sort screen which encapsulates the fields and components of the animation.\n *\n * @component\n * @category AnimationScreen\n * @returns {JSX.Element} Counting sort screen component.\n */\nconst CountingSortScreen = () => {\n  const { referenceArray, countArr } = useContext(VisualizerStateContext);\n\n  return (\n    <div className=\"container-one\">\n      <HorizontalArray referenceArray={referenceArray} BlockType={CountingSortBlock} />\n      <div style={{ marginTop: `6%` }}>\n        <HorizontalArray referenceArray={countArr} BlockType={CountBlock} />\n      </div>\n    </div>\n  );\n};\n\nexport default CountingSortScreen;\n","import React from 'react';\n\n/**\n * Retrieves the current digit to highlight.\n *\n * @category HighlightUtil\n * @param {number} idx Index of the current animation.\n * @param {number} dataSize Size of data array.\n * @returns {number} Digit to highlight.\n */\nconst getDigitToHighlight = (idx, dataSize) => {\n  if (idx < 2 * dataSize) {\n    return 1;\n  } else if (idx < 4 * dataSize) {\n    return 2;\n  } else if (idx < 6 * dataSize) {\n    return 3;\n  } else {\n    // No highlight case\n    return -1;\n  }\n};\n\n/**\n * Highlights a digit in the value based on the current stage of the animation.\n *\n * @method\n * @category HighlightUtil\n * @param {number} value Value of element.\n * @param {number} idx Current index of the animation.\n * @param {number} dataSize Size of data selected.\n * @returns {JSX.Element[]} Array of digits.\n */\nexport const highlightDigit = (value, idx, dataSize) => {\n  const currentHighlighted = getDigitToHighlight(idx, dataSize);\n  let current = 0;\n  let index = 1;\n  let numberMapping = [];\n  while (value > 0) {\n    current = value % 10;\n    numberMapping.push([current, currentHighlighted === index]);\n    index++;\n    value = Math.floor(value / 10);\n  }\n  return numberMapping.map((x) => (\n    <span style={{ fontWeight: x[1] && `bold`, color: x[1] && `#fff` }}>{x[0]}</span>\n  ));\n};\n\n/**\n * Spreads the number into spans of digits.\n *\n * @method\n * @category HighlightUtil\n * @param {number} value Number to spread.\n * @returns {JSX.Element[]} Array of digits.\n */\nexport const spreadNumber = (value) => {\n  let stringArray = Array.from(value.toString());\n  return stringArray.map((x) => <span>{x}</span>);\n};\n","import { highlightDigit } from './HighlightUtil';\nimport React, { useContext } from 'react';\nimport { VisualizerStateContext } from '../../Visualizer';\nimport './styles.css';\n\n/**\n * Single oval to represent an item in the reference array.\n *\n * @component\n * @category Block\n * @param {Object} item Element in the reference array.\n * @param {boolean} display States if the oval should be highlighted.\n * @param {number} marginTop Margin\n * @returns {JSX.Element} Single oval containing the item.\n */\nconst HighlightedOval = ({ item, display, marginTop }) => {\n  const { idx, dataSize } = useContext(VisualizerStateContext);\n\n  return (\n    <div\n      className=\"oval\"\n      style={{\n        visibility: display || item.isShown ? `visible` : `hidden`,\n        marginTop: marginTop,\n      }}\n    >\n      <div className=\"reversed-number\">{highlightDigit(item.height, idx, dataSize)}</div>\n    </div>\n  );\n};\n\nexport default HighlightedOval;\n","import React from 'react';\nimport HighlightedOval from '../block/HighlightedOval';\n\n/**\n * Stack of boxes of an item in the bucket for radix sort.\n *\n * @component\n * @category MultipleBlocks\n * @param {Object} individualStack A single stack in the buckets.\n * @returns {JSX.Element} Stack of boxes component.\n */\nconst StackOfBoxes = ({ individualStack }) => (\n  <div className=\"stack\">\n    <div className=\"stack-boxes\">\n      {individualStack.array.map((x) => (\n        <HighlightedOval item={x} key={x.id} display={true} marginTop={10} />\n      ))}\n    </div>\n    <div className=\"number-with-line\">{individualStack.value}</div>\n  </div>\n);\n\nexport default StackOfBoxes;\n","import React, { useContext } from 'react';\nimport { VisualizerStateContext } from '../../Visualizer';\nimport './styles.css';\nimport '../multipleblocks/styles.css';\nimport HorizontalArray from '../multipleblocks/HorizontalArray';\nimport HighlightedOval from '../block/HighlightedOval';\nimport StackOfBoxes from '../multipleblocks/StackOfBoxes';\n\n/**\n * Radix sort screen which encapsulates the fields and components of the animation.\n *\n * @component\n * @category AnimationScreen\n * @returns {JSX.Element} Radix sort screen component.\n */\nconst RadixSortScreen = () => {\n  const { referenceArray, stackArr } = useContext(VisualizerStateContext);\n\n  return (\n    <div className=\"container-one\" style={{ justifyContent: `space-between`, minHeight: 370 }}>\n      <HorizontalArray referenceArray={referenceArray} BlockType={HighlightedOval} />\n      <div className=\"stack-arr\">\n        {stackArr.map((stack) => (\n          <StackOfBoxes individualStack={stack} key={stack.value} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default RadixSortScreen;\n","import React from 'react';\nimport { animated } from 'react-spring';\nimport { spreadNumber } from './HighlightUtil';\nimport './styles.css';\n\n/**\n * A bucket sort block which animates to show the sorting animation.\n *\n * @component\n * @category Block\n * @param {Object} item The information of the block.\n * @param {Object} x The displacement of the block.\n * @param {Object} rest All other information of the props.\n * @returns {JSX.Element} An animated block which translates in the y direction.\n */\nconst BucketSortBlock = ({ item, props: { y, ...rest } }) => {\n  return (\n    <animated.div\n      className=\"oval\"\n      style={{\n        ...rest,\n        height: 40,\n        backgroundImage: item.isSwap\n          ? `linear-gradient(45deg, #13B1B7, #11C2C9)`\n          : `linear-gradient(45deg, #287ED0, #5466FF)`,\n        transform: y.interpolate((y) => `translate3d(0,${y}px,0)`),\n      }}\n    >\n      <div className=\"decimal\">{spreadNumber(item.height)}</div>\n    </animated.div>\n  );\n};\n\nexport default BucketSortBlock;\n","import React from 'react';\nimport { useTransition } from 'react-spring';\nimport BucketSortBlock from '../block/BucketSortBlock';\nimport './styles.css';\n\n/**\n * Animated stack of boxes used for bucket sort.\n *\n * @component\n * @category MultipleBlocks\n * @param {any[]} individualStack Individual bucket in the stack.\n * @param {number} value Index of the stack.\n * @returns {JSX.Element} Stack of boxes component.\n */\nconst StackOfAnimatedBoxes = ({ individualStack, value }) => {\n  let yDirection = 0;\n\n  // Transition for the single stack\n  const transition = useTransition(\n    individualStack.map((data) => {\n      return { ...data, y: (yDirection -= 10) + 10 };\n    }),\n    (d) => d.id,\n    {\n      from: { height: 0, opacity: 1 },\n      leave: { height: 0, opacity: 1 },\n      enter: ({ y, height }) => ({ y, height, opacity: 1 }),\n      update: ({ y, height }) => ({ y, height }),\n    }\n  );\n\n  return (\n    <div className=\"stack\">\n      <div className=\"stack-boxes\">\n        {transition.map(({ item, props: { y, ...rest } }) => (\n          <BucketSortBlock item={item} props={{ y, ...rest }} key={item.id} />\n        ))}\n      </div>\n      <div className=\"number-with-line\">{value}</div>\n    </div>\n  );\n};\n\nexport default StackOfAnimatedBoxes;\n","import { spreadNumber } from './HighlightUtil';\nimport React from 'react';\nimport './styles.css';\n\n/**\n * Single oval to represent an item in the reference array.\n *\n * @component\n * @category Block\n * @param {Object} item Element in the reference array.\n * @returns {JSX.Element} Single oval containing the item.\n */\nconst Oval = ({ item }) => (\n  <div\n    className=\"oval\"\n    style={{\n      visibility: item.isShown ? `visible` : `hidden`,\n    }}\n  >\n    <div className=\"decimal\">{spreadNumber(item.height)}</div>\n  </div>\n);\n\nexport default Oval;\n","import React, { useContext } from 'react';\nimport { VisualizerStateContext } from '../../Visualizer';\nimport StackOfAnimatedBoxes from '../multipleblocks/StackOfAnimatedBoxes';\nimport './styles.css';\nimport HorizontalArray from '../multipleblocks/HorizontalArray';\nimport Oval from '../block/Oval';\n\n/**\n * Bucket sort screen which encapsulates the fields and components of the animation.\n *\n * @component\n * @category AnimationScreen\n * @returns {JSX.Element} Bucket sort screen component.\n */\nconst BucketSortScreen = () => {\n  const { referenceArray, stackArr } = useContext(VisualizerStateContext);\n\n  return (\n    <div className=\"spaced-out-container\">\n      <HorizontalArray referenceArray={referenceArray} BlockType={Oval} />\n      <div className=\"stack-arr\">\n        {stackArr.map((stack) => (\n          <StackOfAnimatedBoxes\n            individualStack={stack.array}\n            value={stack.value}\n            key={stack.value}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default BucketSortScreen;\n","import React from 'react';\nimport './styles.css';\nimport { animated } from 'react-spring';\n\n/**\n * A block which animates to show the Merge Sort algorithm.\n *\n * @component\n * @category Block\n * @param {Object} item The information of the block.\n * @param {number} x The displacement of the block in the X-Direction.\n * @param {Object} rest All other information of the props.\n * @param {number} length The number of blocks.\n * @param {number} index Index of the block.\n * @param {boolean} isSwap A boolean value denoting whether this block is in a shift animation.\n * @param {number} width Width of the block.\n * @returns {JSX.Element} An animated block which translate in either the X or Y-Direction.\n */\nconst MergeSortBlock = ({ item, props: { x, ...rest }, length, index, isShift, width }) => {\n  return (\n    <animated.div\n      className=\"animated-block\"\n      style={{\n        ...rest,\n        height: item.height * 10 + 9,\n        width: width,\n        zIndex: length - index,\n        transform: isShift\n          ? x.interpolate((x) => `translate3d(${x}px, 150px,0)`)\n          : x.interpolate((x) => `translate3d(${x}px,0,0)`),\n        backgroundImage: isShift\n          ? `linear-gradient(45deg, #13B1B7, #11C2C9)`\n          : `linear-gradient(45deg, #287ED0, #5466FF)`,\n        pos: item.pos,\n        prevPos: item.prevPos,\n      }}\n    >\n      <span>{item.height}</span>\n    </animated.div>\n  );\n};\n\nexport default MergeSortBlock;\n","/**\n * Generates a translation in the x direction to shift the animation screen when the data size\n * is more than 12.\n *\n * @method\n * @category VisualizerUtil\n * @param {number} dataSize Data size.\n * @returns {number} Translation in the x direction when the data size is more than 12.\n */\nexport const translateXOfVisualizer = (dataSize) => {\n  if (dataSize > 12) {\n    let singleBlockWidth = 200 / dataSize;\n    return (dataSize - 12) * singleBlockWidth;\n  }\n  return 0;\n};\n","import React from 'react';\nimport MergeSortBlock from '../block/MergeSortBlock';\nimport './styles.css';\nimport { translateXOfVisualizer } from './AnimationScreenUtil';\n\n/**\n * Animation screen which shows the Merge Sort algorithm.\n *\n * @component\n * @category AnimationScreen\n * @param {Object[]} transitions An array which contains the animated blocks.\n * @param {number} dataSize The number of blocks.\n * @returns {JSX.Element} Merge sort screen component.\n */\nconst MergeSortScreen = ({ transitions, dataSize }) => {\n  return (\n    <div className=\"container-one\">\n      <div\n        className=\"list\"\n        style={{\n          transform: `translateX(-${translateXOfVisualizer(dataSize)}px)`,\n        }}\n      >\n        {transitions.map(({ item, props: { x, ...rest } }, index) => {\n          return (\n            <MergeSortBlock\n              item={item}\n              props={{ x, ...rest }}\n              index={index}\n              length={dataSize}\n              key={index}\n              isShift={item.isShift}\n              width={800 / dataSize}\n              pos={item.pos}\n              prevPos={item.prevPos}\n            />\n          );\n        })}\n      </div>\n      <div className=\"empty-space-for-merge-sort\" />\n    </div>\n  );\n};\n\nexport default MergeSortScreen;\n","import React from 'react';\nimport './styles.css';\nimport { animated } from 'react-spring';\n\n/**\n * A block which animates to show the sorting animation.\n *\n * @component\n * @category Block\n * @param {Object} item The information of the block.\n * @param {number} x The displacement of the block in the X-Direction.\n * @param {Object} rest All other information of the props.\n * @param {number} length The number of blocks.\n * @param {number} index Index of the block.\n * @param {boolean} isSwap A boolean value denoting whether this block is in a swap animation.\n * @param {number} width Width of the block.\n * @returns {JSX.Element} An animated block which translate in the X-Direction.\n */\nconst AnimatedBlock = ({ item, props: { x, ...rest }, length, index, isSwap, width }) => {\n  return (\n    <animated.div\n      className=\"animated-block\"\n      style={{\n        ...rest,\n        height: item.height * 10,\n        width: width,\n        zIndex: length - index,\n        transform: x.interpolate((x) => `translate3d(${x}px,0,0)`),\n        backgroundImage: isSwap\n          ? `linear-gradient(45deg, #13B1B7, #11C2C9)`\n          : `linear-gradient(45deg, #287ED0, #5466FF)`,\n      }}\n    >\n      <span>{item.height}</span>\n    </animated.div>\n  );\n};\n\nexport default AnimatedBlock;\n","import React from 'react';\nimport AnimatedBlock from '../block/AnimatedBlock';\nimport './styles.css';\nimport { translateXOfVisualizer } from './AnimationScreenUtil';\n\n/**\n * Animation screen which shows the Insertion, Bubble, Selection, Shell Sort algorithm.\n *\n * @component\n * @category AnimationScreen\n * @param {Object[]} transitions An array which contains the animated blocks.\n * @param {number} dataSize The number of blocks.\n * @returns {JSX.Element} Generic sort screen component.\n */\nconst GenericSortScreen = ({ transitions, dataSize }) => {\n  return (\n    <div\n      className=\"list\"\n      style={{\n        transform: `translateX(-${translateXOfVisualizer(dataSize)}px)`,\n      }}\n    >\n      {transitions.map(({ item, props: { x, ...rest } }, index) => {\n        return (\n          <AnimatedBlock\n            item={item}\n            props={{ x, ...rest }}\n            index={index}\n            length={dataSize}\n            key={index}\n            isSwap={item.isSwap}\n            width={800 / dataSize}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default GenericSortScreen;\n","import React, { useContext, useEffect } from 'react';\nimport { useTransition } from 'react-spring';\nimport './styles.css';\nimport { VisualizerStateContext } from '../../Visualizer';\nimport { isBucketSort, isCountingSort, isMergeSort, isRadixSort } from '../../util/GeneralUtil';\nimport CountingSortScreen from './CountingSortScreen';\nimport RadixSortScreen from './RadixSortScreen';\nimport BucketSortScreen from './BucketSortScreen';\nimport MergeSortScreen from './MergeSortScreen';\nimport GenericSortScreen from './GenericSortScreen';\nimport { arrayCopy } from '../../util/ArrayUtil';\n\n/**\n * The screen which shows the animation for the sorting visualizer.\n *\n * @component\n * @category Visualizer\n * @returns {JSX.Element} Animation sort screen component.\n */\nconst AnimationScreen = () => {\n  const {\n    isPlay,\n    isReplay,\n    arrayData,\n    animationArr,\n    idx,\n    referenceArray,\n    speed,\n    setIdx,\n    setReferenceArray,\n    executeForwardAnimation,\n    resetDataWhenAnimationFinish,\n    dataSize,\n    visualizerAlgorithm,\n    isReset,\n    setIsReset,\n  } = useContext(VisualizerStateContext);\n  const animationSpeedArray = [1000, 800, 600, 500, 400, 320, 260, 200, 160, 120];\n  let xDirection = 0;\n\n  useEffect(() => {\n    /**\n     * This is for replay, or any changes to arrayData\n     */\n    if (isReset) {\n      setReferenceArray(arrayCopy(arrayData));\n      setIdx(0);\n      setIsReset(false);\n    }\n  }, [arrayData, isReplay]);\n\n  /**\n   * This is the loop animation and ending of animation screen.\n   * If block is to do the loop animation.\n   * Else Block is to change the state into replay.\n   */\n  useEffect(() => {\n    if (!isReplay && isPlay && idx < animationArr.length) {\n      setTimeout(() => {\n        executeForwardAnimation();\n      }, animationSpeedArray[speed - 1]);\n    } else if (!isReplay && isPlay) {\n      resetDataWhenAnimationFinish(referenceArray);\n    }\n  }, [isPlay, idx]);\n\n  const transitions = useTransition(\n    referenceArray.map((data) => {\n      if (isMergeSort(visualizerAlgorithm)) {\n        return { ...data, x: parseInt(data.xDirection) };\n      }\n      return { ...data, x: (xDirection += 10) - 10 };\n    }),\n    (d) => d.id,\n    {\n      from: { height: 0, opacity: 1 },\n      leave: { height: 0, opacity: 1 },\n      enter: ({ x, height }) => ({ x, height, opacity: 1 }),\n      update: ({ x, height }) => ({ x, height }),\n    }\n  );\n\n  const dataItem = {\n    transitions: transitions,\n    dataSize: dataSize,\n  };\n\n  if (isCountingSort(visualizerAlgorithm)) {\n    return <CountingSortScreen />;\n  } else if (isRadixSort(visualizerAlgorithm)) {\n    return <RadixSortScreen />;\n  } else if (isBucketSort(visualizerAlgorithm)) {\n    return <BucketSortScreen />;\n  } else if (isMergeSort(visualizerAlgorithm)) {\n    return <MergeSortScreen {...dataItem} />;\n  } else {\n    return <GenericSortScreen {...dataItem} />;\n  }\n};\n\nexport default AnimationScreen;\n","/**\n * Generates the step by step template for Insertion, Bubble, Selection, Shell Sort.\n *\n * @method\n * @memberOf StepByStepTemplate\n * @param {any[]} animationArr An array that contains all the animation steps.\n * @param {number} idx Index of the current animation step.\n * @param {Object[]} referenceArray An array containing the data which is being sorted.\n * @returns {string} The information regarding the current step of the animation.\n */\nexport const genericSwapStepByStep = (animationArr, idx, referenceArray) => {\n  if (idx === animationArr.length) {\n    return 'Array is sorted';\n  }\n  let animationArrSwapIdx = animationArr[idx - 1];\n  let firstIdx = animationArrSwapIdx[0];\n  let secondIdx = animationArrSwapIdx[1];\n  let isSwap = animationArrSwapIdx[2];\n  let firstIdxVal = referenceArray[firstIdx].height;\n  let secondIdxVal = referenceArray[secondIdx].height;\n  let isBigger = secondIdxVal > firstIdxVal;\n\n  if (isSwap) {\n    return `Since swap is true, swap ${secondIdxVal} and ${firstIdxVal}`;\n  }\n\n  // Comparisons message\n  let message = `Check if ${secondIdxVal} > ${firstIdxVal} :\\n`;\n\n  if (isBigger) {\n    message += `Since ${secondIdxVal} > ${firstIdxVal}, swap is set to true`;\n  } else {\n    message += `Since ${secondIdxVal} <= ${firstIdxVal}, swap is set to false and iteration continues`;\n  }\n  return message;\n};\n","/**\n * Generates the step by step template Radix Sort.\n *\n * @method\n * @memberOf StepByStepTemplate\n * @param {any[]} animationArr An array that contains all the animation steps.\n * @param {number} idx Index of the current animation step.\n * @returns {string} The information regarding the current step of the animation.\n */\nexport const radixSortStepByStep = (animationArr, idx) => {\n  const currentAnimation = animationArr[idx - 1];\n  const height = currentAnimation.height;\n  const location = currentAnimation.location;\n\n  if (currentAnimation.isDistributing) {\n    return `Put element ${height} at the end of bucket ${location}`;\n  } else {\n    return `Restore the first element (${height}) in bucket ${location} back to array`;\n  }\n};\n","import { genericSwapStepByStep } from './genericSwapStepByStep';\nimport { selectionSortStepByStep } from './selectionSortStepByStep';\nimport { mergeSortStepByStep } from './mergeSortStepByStep';\nimport { quickSortStepByStep } from './quickSortStepByStep';\nimport { countingSortStepByStep } from './countingSortStepByStep';\nimport { radixSortStepByStep } from './radixSortStepByStep';\nimport { bucketSortStepByStep } from './bucketSortStepByStep';\nimport { heapSortStepByStep } from './heapSortStepByStep';\n\n/**\n * An Object component that is used to access the sorting method step by step template.\n *\n * @namespace StepByStepTemplate\n * @type {Object}\n */\nconst SortingAlgorithmsStepByStep = {\n  'Insertion Sort': genericSwapStepByStep,\n  'Bubble Sort': genericSwapStepByStep,\n  'Selection Sort': selectionSortStepByStep,\n  'Merge Sort': mergeSortStepByStep,\n  'Quick Sort': quickSortStepByStep,\n  'Counting Sort': countingSortStepByStep,\n  'Shell Sort': genericSwapStepByStep,\n  'Radix Sort': radixSortStepByStep,\n  'Bucket Sort': bucketSortStepByStep,\n  'Heap Sort': heapSortStepByStep,\n};\n\nexport default SortingAlgorithmsStepByStep;\n","/**\n * Generates the step by step template for Selection Sort.\n *\n * @method\n * @memberOf StepByStepTemplate\n * @param {any[]} animationArr An array that contains all the animation steps.\n * @param {number} idx Index of the current animation step.\n * @param {Object[]} referenceArray An array containing the data which is being sorted.\n * @returns {string} The information regarding the current step of the animation.\n */\nexport const selectionSortStepByStep = (animationArr, idx, referenceArray) => {\n  if (idx === animationArr.length) {\n    return 'Array is sorted';\n  }\n  let animationArrSwapIdx = animationArr[idx - 1];\n  let firstIdx = animationArrSwapIdx[0];\n  let secondIdx = animationArrSwapIdx[1];\n  let isSwap = animationArrSwapIdx[2];\n  let firstIdxVal = referenceArray[firstIdx].height;\n  let secondIdxVal = referenceArray[secondIdx].height;\n  let isSmaller = secondIdxVal < firstIdxVal;\n\n  if (isSwap) {\n    if (firstIdxVal === secondIdxVal) {\n      return `Since the smallest value is still ${firstIdxVal}. There is no change in position`;\n    }\n    return `The smallest value so far is ${secondIdxVal}. We swap it to index ${secondIdx}`;\n  }\n\n  // Comparisons\n  let message = `Check if ${secondIdxVal} is smaller than the smallest value so far: ${firstIdxVal}\\n`;\n  if (isSmaller) {\n    message += `Since ${secondIdxVal} is smaller than ${firstIdxVal}, smallest value is set to ${secondIdxVal}`;\n  } else {\n    message += `Since ${secondIdxVal} is not smaller than ${firstIdxVal}, no change to smallest value`;\n  }\n  return message;\n};\n","import { findIndexToUseInMergeSort } from '../../sortingvisualizer/util/MergeSortUtil';\nimport { arrayCopy } from '../../sortingvisualizer/util/ArrayUtil';\n\n/**\n * Generates the step by step template for Merge Sort.\n *\n * @method\n * @memberOf StepByStepTemplate\n * @param {any[]} animationArr An array that contains all the animation steps.\n * @param {number} idx Index of the current animation step.\n * @param {Object[]} referenceArray An array containing the data which is being sorted.\n * @returns {string} The information regarding the current step of the animation.\n */\nexport const mergeSortStepByStep = (animationArr, idx, referenceArray) => {\n  if (idx === animationArr.length) {\n    return 'Array is sorted';\n  } else if (referenceArray[0].isShift !== undefined) {\n    let animationArrSwapIdx = animationArr[idx - 1];\n    let isShift = animationArrSwapIdx[2];\n    let newTempArr = arrayCopy(referenceArray);\n    let iIdx = animationArrSwapIdx[0];\n    let jIdx = animationArrSwapIdx[1];\n    let idxToUse = findIndexToUseInMergeSort(newTempArr, iIdx, jIdx);\n    if (isShift) {\n      // explaining the moving downwards and comparison\n      // this is slightly inefficient but since we are dealing with small data, it should be fine\n      let message = 'Currently in merge process: ';\n      for (let values of referenceArray) {\n        if (values.isShift) {\n          message += values.height + ', ';\n        }\n      }\n      return message.slice(0, -1);\n    }\n    // shifting back up to correct position\n    let min = referenceArray[idxToUse].height;\n    let message = `Since the minimum is ${min}, we move ${min} up\\nCurrently left in the merge process: `;\n    for (let values of referenceArray) {\n      if (values.isShift) {\n        message += values.height + ', ';\n      }\n    }\n    message = message.slice(0, -1);\n    return message;\n  }\n};\n","/**\n * Generates the step by step template for Quick Sort.\n *\n * @method\n * @memberOf StepByStepTemplate\n * @param {any[]} animationArr An array that contains all the animation steps.\n * @param {number} idx Index of the current animation step.\n * @param {Object[]} referenceArray An array containing the data which is being sorted.\n * @returns {string} The information regarding the current step of the animation.\n */\nexport const quickSortStepByStep = (animationArr, idx, referenceArray) => {\n  if (idx === animationArr.length) {\n    return 'Array is sorted';\n  }\n\n  let animationArrSwapIdx = animationArr[idx - 1];\n  let firstIdx = animationArrSwapIdx[0];\n  let secondIdx = animationArrSwapIdx[1];\n  let isSwap = animationArrSwapIdx[2];\n  let firstIdxVal = referenceArray[firstIdx].height;\n  let secondIdxVal = referenceArray[secondIdx].height;\n  let pivotIdx = animationArrSwapIdx[3];\n  let pivotIdxVal = referenceArray[pivotIdx].height;\n  let command = animationArrSwapIdx[4];\n  let indexOfSmallerElement = animationArrSwapIdx[5];\n\n  // when a swap occurs, it is either swapping two element while iterating, else, it is swapping\n  // the pivot to its position\n  let incJ = ` Now we increment the loop variable from ${secondIdx} to ${secondIdx + 1}.`;\n  let incI = `we increment the index of the smaller element from ${indexOfSmallerElement} to ${\n    indexOfSmallerElement + 1\n  }.`;\n  if (isSwap) {\n    if (command === 'iToJ') {\n      return (\n        `Since swap is true, we swap index of the smaller element, ${indexOfSmallerElement} with` +\n        ` value ${firstIdxVal}, with loop variable index ${secondIdx}, ` +\n        `with value ${secondIdxVal}.` +\n        incJ\n      );\n    }\n    return (\n      `Since we finish one iteration, we swap the pivot to next of index of smallest` +\n      `element ${firstIdx}`\n    );\n  }\n  // Comparison to determine if to increment both loop variable or just one\n  let comparisonStatement;\n  let swapStatement;\n  if (command === 'incI') {\n    comparisonStatement = `Since ${secondIdxVal} < pivot value ${pivotIdxVal}, `;\n    // if both index are the same, no need to set swap to true\n    if (secondIdx !== indexOfSmallerElement + 1) {\n      swapStatement = ` Since index of smaller element ${\n        indexOfSmallerElement + 1\n      } not equal to index of loop variable ${secondIdx}, Swap is set to true.`;\n    } else {\n      swapStatement = ` Since index of smaller element ${\n        indexOfSmallerElement + 1\n      } equal to index of loop variable ${secondIdx}, Swap is set to false.`;\n      swapStatement += incJ;\n    }\n    return comparisonStatement + incI + swapStatement;\n  }\n\n  comparisonStatement = `Since ${secondIdxVal} >= pivot value ${pivotIdxVal}, `;\n  swapStatement = `Swap is set to false`;\n  return comparisonStatement + swapStatement + incJ;\n};\n","/**\n * Generates the step by step template for Counting Sort.\n *\n * @method\n * @memberOf StepByStepTemplate\n * @param {any[]} animationArr An array that contains all the animation steps.\n * @param {number} idx Index of the current animation step.\n * @param {Object[]} referenceArray An array containing the data which is being sorted.\n * @returns {string} The information regarding the current step of the animation.\n */\nexport const countingSortStepByStep = (animationArr, idx, referenceArray) => {\n  const height = animationArr[idx - 1].height;\n\n  if (idx > referenceArray.length) {\n    return `Restore element ${height} and decrease count of ${height} by 1`;\n  } else {\n    return `Increase count of ${animationArr[idx - 1].height} by 1`;\n  }\n};\n","import { radixSortStepByStep } from './radixSortStepByStep';\nimport { genericSwapStepByStep } from './genericSwapStepByStep';\n\n/**\n * Generates the step by step template for Bucket Sort.\n *\n * @method\n * @memberOf StepByStepTemplate\n * @param {any[]} animationArr An array that contains all the animation steps.\n * @param {number} idx Index of the current animation step.\n * @param {Object[]} stackArr An array representing the buckets.\n * @returns {string} The information regarding the current step of the animation.\n */\nexport const bucketSortStepByStep = (animationArr, idx, stackArr) => {\n  const currentAnimation = animationArr[idx - 1];\n\n  // Insertion sort taking place in bucket\n  if (currentAnimation.length === 4) {\n    const location = currentAnimation[3];\n    return genericSwapStepByStep(animationArr, idx, stackArr[location].array);\n  }\n\n  if (currentAnimation.isSort === undefined) {\n    return radixSortStepByStep(animationArr, idx);\n  }\n\n  // Signal start of sorting bucket\n  if (currentAnimation.isSort) {\n    return `Currently sorting bucket ${currentAnimation.location}`;\n  } else {\n    return `Bucket ${currentAnimation.location} has been sorted!`;\n  }\n};\n","/**\n * Generates the step by step template for Heap Sort.\n *\n * @method\n * @memberOf StepByStepTemplate\n * @param {any[]} animationArr An array that contains all the animation steps.\n * @param {number} idx Index of the current animation step.\n * @param {Object[]} referenceArray An array containing the data which is being sorted.\n * @returns {string} The information regarding the current step of the animation.\n */\nexport const heapSortStepByStep = (animationArr, idx, referenceArray) => {\n  if (idx === animationArr.length) {\n    return 'Array is sorted';\n  }\n  let animationArrSwapIdx = animationArr[idx - 1];\n  let firstIdx = animationArrSwapIdx[0];\n  let secondIdx = animationArrSwapIdx[1];\n  let isSwap = animationArrSwapIdx[2];\n  let heapStep = animationArrSwapIdx[3];\n  let firstIdxVal = referenceArray[firstIdx].height;\n  let secondIdxVal = referenceArray[secondIdx].height;\n  let isBigger = secondIdxVal > firstIdxVal;\n\n  if (heapStep) {\n    return `Swap the largest item in the heap, ${firstIdxVal}, with the \n    leaf node with the largest index, ${secondIdxVal}`;\n  }\n\n  if (isSwap) {\n    return `Since swap is true, swap ${secondIdxVal} and ${firstIdxVal}`;\n  }\n\n  // Comparisons message\n  let message = `Check if ${firstIdxVal} is larger than its child nodes:\\n`;\n\n  if (isBigger) {\n    message += `Since ${secondIdxVal} > ${firstIdxVal}, swap is set to true`;\n  } else {\n    message += `Since ${firstIdxVal} is larger than its child nodes, swap is set \n    to false and iteration continues`;\n  }\n  return message;\n};\n","import SortingAlgorithmsStepByStep from '../../../algorithm/stepbysteptemplate/allSortsStepByStep';\nimport { isBucketSort } from '../../util/GeneralUtil';\n\n/**\n * Gets the step by step text to display to the user.\n *\n * @method\n * @category StepTracingUtil\n * @param {string} visualizerAlgorithm The current algorithm of the visualizer.\n * @param {any[]} animationArr Animation array.\n * @param {number} idx Index of animation.\n * @param {Object[]} referenceArray Reference array of blocks displayed.\n * @param {Object[]} stackArr Stack array, present only in bucket and radix sort.\n * @returns {string} Step by step text generated.\n */\nexport const getStepByStepText = (\n  visualizerAlgorithm,\n  animationArr,\n  idx,\n  referenceArray,\n  stackArr\n) => {\n  const sortAlgoStepByStep = SortingAlgorithmsStepByStep[visualizerAlgorithm];\n  if (isBucketSort(visualizerAlgorithm)) {\n    return sortAlgoStepByStep(animationArr, idx, stackArr);\n  }\n  return sortAlgoStepByStep(animationArr, idx, referenceArray);\n};\n","import React, { useContext } from 'react';\nimport './styles.css';\nimport { VisualizerStateContext } from '../../Visualizer';\nimport { getStepByStepText } from './StepByStepUtil';\n\n/**\n * A component which display each steps of the sorting algorithm.\n *\n * @component\n * @category Visualizer\n */\nconst StepByStep = () => {\n  const {\n    animationArr,\n    idx,\n    referenceArray,\n    visualizerAlgorithm,\n    animationPercentage,\n    stackArr,\n  } = useContext(VisualizerStateContext);\n\n  return (\n    <div className=\"step-by-step-holder\">\n      <p>\n        {animationPercentage > 0 &&\n          getStepByStepText(visualizerAlgorithm, animationArr, idx, referenceArray, stackArr)}\n      </p>\n    </div>\n  );\n};\n\nexport default StepByStep;\n","import React, { useContext } from 'react';\nimport { AiOutlineLeft } from 'react-icons/ai';\nimport { IconContext } from 'react-icons';\nimport { VisualizerStateContext } from '../../../Visualizer';\nimport './styles.css';\nimport { resetArray } from '../../../util/ArrayUtil';\n\n/**\n * A button which executes one step in reverse for the sorting animation.\n *\n * @component\n * @category Button\n */\nconst BackButton = () => {\n  const {\n    isPlay,\n    animationPercentage,\n    executeBackwardAnimation,\n    idx,\n    arrayData,\n    setArrayData,\n    setIsReset,\n    visualizerAlgorithm,\n  } = useContext(VisualizerStateContext);\n\n  const isEmpty = animationPercentage === 0;\n\n  /**\n   * Event handler to trigger the backward animation.\n   */\n  const handleBackButtonClick = () => {\n    executeBackwardAnimation();\n    // this is to check if we are at the start animation, to reset the color of the block\n    if (idx - 1 <= 0) {\n      setArrayData(resetArray(visualizerAlgorithm, arrayData));\n      setIsReset(true);\n    }\n  };\n\n  return (\n    <button\n      className=\"forward-back-button-holder\"\n      style={{\n        transform: 'translateX(-10px)',\n        cursor: isEmpty ? '' : isPlay ? 'not-allowed' : 'pointer',\n      }}\n      onClick={() => (isPlay ? () => {} : handleBackButtonClick())}\n    >\n      <IconContext.Provider\n        value={{\n          className: 'forward-back-button',\n          style: { color: isEmpty ? 'white' : '#8789B5' },\n        }}\n      >\n        <AiOutlineLeft />\n      </IconContext.Provider>\n    </button>\n  );\n};\n\nexport default BackButton;\n","import React from 'react';\nimport { IconContext } from 'react-icons';\nimport { AiFillCaretRight, AiOutlinePause, AiOutlineReload } from 'react-icons/ai';\nimport './styles.css';\n\n/**\n * Depending on the {@code type}, it will show the relevant button state.\n *\n * @component\n * @category Button\n * @param {string} type The state of the button to be shown: 'play', 'pause', 'replay'.\n */\nconst PlayPauseReplayButton = ({ type }) => {\n  return (\n    <IconContext.Provider\n      value={{\n        className: 'three-state-button',\n        style: { transform: type === 'play' ? 'translateX(3px)' : 'translateX(0px)' },\n      }}\n    >\n      {type === 'play' ? (\n        <AiFillCaretRight />\n      ) : type === 'pause' ? (\n        <AiOutlinePause />\n      ) : (\n        <AiOutlineReload />\n      )}\n    </IconContext.Provider>\n  );\n};\n\nexport default PlayPauseReplayButton;\n","import React, { useContext } from 'react';\nimport { VisualizerStateContext } from '../../../Visualizer';\nimport PlayPauseReplayButton from './PlayPauseReplayButton';\nimport './styles.css';\n\n/**\n * A component which holds the 3 states, Play, Pause, Replay.\n *\n * @component\n * @category Button\n */\nconst ThreeStateButton = () => {\n  const {\n    isPlay,\n    isReplay,\n    setIsReplay,\n    setIsPlay,\n    setIsInMidstOfSort,\n    setAnimationPercentage,\n    setIsReset,\n  } = useContext(VisualizerStateContext);\n\n  /**\n   * Event handler that trigger play, pause, replay functionality.\n   */\n  const handleThreeStateButtonClick = () => {\n    if (isReplay) {\n      setIsReplay(false);\n      setAnimationPercentage(0);\n      setIsReset(true);\n      setTimeout(() => setIsPlay(true), 300);\n    } else {\n      setIsPlay(!isPlay);\n    }\n    setIsInMidstOfSort(true);\n  };\n\n  return (\n    <button className=\"three-state-button-holder\" onClick={() => handleThreeStateButtonClick()}>\n      {isReplay ? (\n        <PlayPauseReplayButton type=\"replay\" />\n      ) : isPlay ? (\n        <PlayPauseReplayButton type=\"pause\" />\n      ) : (\n        <PlayPauseReplayButton type=\"play\" />\n      )}\n    </button>\n  );\n};\n\nexport default ThreeStateButton;\n","import React, { useContext } from 'react';\nimport './styles.css';\nimport { VisualizerStateContext } from '../../../Visualizer';\nimport { buckets } from '../../../util/CountingSortUtil';\nimport { stack } from '../../../util/RadixSortUtil';\nimport { arrayCopy, generateArray } from '../../../util/ArrayUtil';\n\n/**\n * A button to generate new data for the \"blocks\" for the sorting animation.\n *\n * @component\n * @category Button\n */\nconst NewDataButton = () => {\n  const {\n    isPlay,\n    dataSize,\n    setArrayData,\n    setIsInMidstOfSort,\n    setIsReplay,\n    setAnimationPercentage,\n    visualizerAlgorithm,\n    setCountArr,\n    setStackArr,\n    setIsReset,\n    setHistoryArr,\n  } = useContext(VisualizerStateContext);\n\n  /**\n   * Event handler to generate new data set for the sorting animation.\n   */\n  const handleNewDataButtonClick = () => {\n    if (!isPlay) {\n      setArrayData(generateArray(dataSize, visualizerAlgorithm));\n      setIsInMidstOfSort(false);\n      setAnimationPercentage(0);\n      setIsReplay(false);\n      setCountArr(arrayCopy(buckets));\n      setStackArr(arrayCopy(stack));\n      setHistoryArr([]);\n      setIsReset(true);\n    }\n  };\n\n  return (\n    <div className=\"new-data-box\" style={{ cursor: isPlay ? 'not-allowed' : 'pointer' }}>\n      <span onClick={() => handleNewDataButtonClick()}>New Data</span>\n    </div>\n  );\n};\n\nexport default NewDataButton;\n","import React, { useContext } from 'react';\nimport { IconContext } from 'react-icons';\nimport { AiOutlineRight } from 'react-icons/ai';\nimport './styles.css';\nimport { VisualizerStateContext } from '../../../Visualizer';\n\n/**\n * A button which executes one step forward for the sorting animation.\n *\n * @component\n * @category Button\n */\nconst ForwardButton = () => {\n  const { isPlay, animationPercentage, executeForwardAnimation, idx, animationArr } = useContext(\n    VisualizerStateContext\n  );\n\n  const isFull = animationPercentage === 100;\n\n  /**\n   * Event handler to trigger the forward animation.\n   */\n  const handleForwardButtonClick = () => {\n    if (idx < animationArr.length) {\n      executeForwardAnimation();\n    }\n  };\n\n  return (\n    <button\n      className=\"forward-back-button-holder\"\n      style={{\n        transform: 'translateX(10px)',\n        cursor: isFull ? '' : isPlay ? 'not-allowed' : 'pointer',\n      }}\n      onClick={isPlay ? () => {} : () => handleForwardButtonClick()}\n    >\n      <IconContext.Provider\n        value={{\n          className: 'forward-back-button',\n          style: { color: isFull ? 'white' : '#8789B5' },\n        }}\n      >\n        <AiOutlineRight />\n      </IconContext.Provider>\n    </button>\n  );\n};\n\nexport default ForwardButton;\n","import BackButton from './forwardbackbutton/BackButton';\nimport ThreeStateButton from './threestatebutton/ThreeStateButton';\nimport NewDataButton from './newdatabutton/NewDataButton';\nimport ForwardButton from './forwardbackbutton/ForwardButton';\nimport React from 'react';\nimport './styles.css';\n\n/**\n * A component which holds forward and backward button, as well as the play, pause and replay button.\n *\n * @component\n * @category Visualizer\n */\nconst ButtonBox = () => (\n  <div className=\"button-box\">\n    <BackButton />\n    <div className=\"play-reset-button-box\">\n      <ThreeStateButton />\n      <NewDataButton />\n    </div>\n    <ForwardButton />\n  </div>\n);\n\nexport default ButtonBox;\n","import BubbleSort from './bubbleSortEx';\nimport InsertionSort from './insertionSortEx';\nimport QuickSort from './quickSortEx';\nimport RadixSort from './radixSortEx';\nimport BucketSort from './bucketSortEx';\nimport CountingSort from './countingSortEx';\nimport SelectionSort from './selectionSortEx';\nimport MergeSort from './mergeSortEx';\nimport ShellSort from './shellSortEx';\nimport HeapSort from './heapSortEx';\n\n/**\n * Contains all the explanations for the sorting algorithms.\n *\n * @namespace Explanations\n * @type {Object}\n */\nconst explanations = {\n  'Bubble Sort': BubbleSort,\n  'Insertion Sort': InsertionSort,\n  'Quick Sort': QuickSort,\n  'Radix Sort': RadixSort,\n  'Bucket Sort': BucketSort,\n  'Counting Sort': CountingSort,\n  'Selection Sort': SelectionSort,\n  'Merge Sort': MergeSort,\n  'Shell Sort': ShellSort,\n  'Heap Sort': HeapSort,\n};\n\nexport default explanations;\n","/**\n * Bubble sort algorithm details.\n *\n * @memberOf Explanations\n * @see {@link https://www.geeksforgeeks.org/bubble-sort/|Geeks for Geeks}\n * @const {\n * {bestTime: string,\n * worstSpace: string,\n * additionalDesc: string,\n * averageTime: JSX.Element,\n * stable: boolean,\n * name: string,\n * worstTime: JSX.Element,\n * link: string,\n * description: string,\n * inPlace: boolean}\n * }\n */\nconst BubbleSort = {\n  name: 'Bubble',\n  description:\n    'Bubble Sort is the simplest sorting algorithm that works by ' +\n    'repeatedly swapping adjacent elements if they are in the wrong order. ' +\n    'This procedure is repeated until no swaps are required, indicating ' +\n    'that the list has been sorted.',\n  additionalDesc: '',\n  worstTime: (\n    <span>\n      N<sup>2</sup>\n    </span>\n  ),\n  averageTime: (\n    <span>\n      N<sup>2</sup>\n    </span>\n  ),\n  bestTime: 'N',\n  worstSpace: '1',\n  stable: true,\n  inPlace: true,\n  link: 'https://www.geeksforgeeks.org/bubble-sort/',\n};\n\nexport default BubbleSort;\n","/**\n * Insertion sort algorithm details.\n *\n * @memberOf Explanations\n * @see {@link https://www.geeksforgeeks.org/insertion-sort/|Geeks for Geeks}\n * @const {\n * {bestTime: string,\n * worstSpace: string,\n * additionalDesc: string,\n * averageTime: JSX.Element,\n * stable: boolean,\n * name: string,\n * worstTime: JSX.Element,\n * link: string,\n * description: string,\n * inPlace: boolean}\n * }\n */\nconst InsertionSort = {\n  name: 'Insertion',\n  description:\n    'Insertion Sort is a simple sorting algorithm that builds the final ' +\n    'sorted list one item at a time. The list is virtually split ' +\n    'into a sorted and an unsorted part. Values from the unsorted part are ' +\n    'picked and placed at the correct position in the sorted part.',\n  additionalDesc: '',\n  worstTime: (\n    <span>\n      N<sup>2</sup>\n    </span>\n  ),\n  averageTime: (\n    <span>\n      N<sup>2</sup>\n    </span>\n  ),\n  bestTime: 'N',\n  worstSpace: '1',\n  stable: true,\n  inPlace: true,\n  link: 'https://www.geeksforgeeks.org/insertion-sort/',\n};\n\nexport default InsertionSort;\n","/**\n * Quick sort algorithm details.\n *\n * @memberOf Explanations\n * @see {@link https://www.geeksforgeeks.org/quick-sort/|Geeks for Geeks}\n * @const {\n * {bestTime: string,\n * worstSpace: string,\n * additionalDesc: string,\n * averageTime: string,\n * stable: boolean,\n * name: string,\n * worstTime: JSX.Element,\n * link: string,\n * description: string,\n * inPlace: boolean}\n * }\n */\nconst QuickSort = {\n  name: 'Quick',\n  description:\n    'Quick Sort is a Divide and Conquer algorithm. It picks an element as pivot and partitions ' +\n    'the given array around the picked pivot. There are many different versions of Quick Sort that ' +\n    'pick pivot in different ways.',\n  additionalDesc: '',\n  worstTime: (\n    <span>\n      N<sup>2</sup>\n    </span>\n  ),\n  averageTime: 'NlogN',\n  bestTime: 'N',\n  worstSpace: 'N',\n  stable: false,\n  inPlace: true,\n  link: 'https://www.geeksforgeeks.org/quick-sort/',\n};\n\nexport default QuickSort;\n","/**\n * Radix sort algorithm details.\n *\n * @memberOf Explanations\n * @see {@link https://www.programiz.com/dsa/radix-sort|Programiz}\n * @const {\n * {bestTime: string,\n * worstSpace: string,\n * additionalDesc: string,\n * averageTime: string,\n * stable: boolean,\n * name: string,\n * worstTime: string,\n * link: string,\n * description: string,\n * inPlace: boolean}\n * }\n */\nconst RadixSort = {\n  name: 'Radix',\n  description:\n    'Radix sort works by sorting each digit from least significant digit to most significant ' +\n    \"digit. So in base 10 (the decimal system), radix sort would sort by the digits in the 1's \" +\n    'place, then the 10’s place, and so on. To do this, radix sort uses counting sort as a ' +\n    'subroutine to sort the digits in each place value.',\n  additionalDesc:\n    'd is the number of digits in the input numbers, b is the base for representing numbers,',\n  worstTime: 'd(n + b)',\n  averageTime: 'd(n + b)',\n  bestTime: 'd(n + b)',\n  worstSpace: 'n + b',\n  stable: true,\n  inPlace: false,\n  link: 'https://www.programiz.com/dsa/radix-sort',\n};\n\nexport default RadixSort;\n","/**\n * Bucket sort algorithm details.\n * Explanation adapted from CLRS Introduction to Algorithms textbook.\n *\n * @memberOf Explanations\n * @const {\n * {bestTime: string,\n * worstSpace: string,\n * additionalDesc: string,\n * averageTime: string,\n * stable: boolean,\n * name: string,\n * worstTime: JSX.Element,\n * link: string,\n * description: string,\n * inPlace: boolean}\n * }\n */\nconst BucketSort = {\n  name: 'Bucket',\n  description:\n    'Bucket sort assumes that the input is drawn from a uniform distribution of [0, 1). ' +\n    'The interval [0, 1) is divided into n equal-sized sub-intervals (buckets). Then, the input ' +\n    'array is distributed into these buckets. To produce ' +\n    'the output, we simply sort the numbers in each bucket and then go through the buckets in ' +\n    'order to list the elements.',\n  additionalDesc: '',\n  worstTime: (\n    <span>\n      N<sup>2</sup>\n    </span>\n  ),\n  averageTime: 'N',\n  bestTime: 'N',\n  worstSpace: 'N',\n  stable: true,\n  inPlace: false,\n  link: 'https://www.geeksforgeeks.org/bucket-sort-2/',\n};\n\nexport default BucketSort;\n","/**\n * Counting sort algorithm details.\n *\n * @memberOf Explanations\n * @see {@link https://www.geeksforgeeks.org/counting-sort/|Geeks for Geeks}\n * @const {\n * {bestTime: string,\n * worstSpace: string,\n * additionalDesc: string,\n * averageTime: string,\n * stable: boolean,\n * name: string,\n * worstTime: string,\n * link: string,\n * description: string,\n * inPlace: boolean}\n * }\n */\nconst CountingSort = {\n  name: 'Counting',\n  description:\n    'Counting sort is a sorting technique based on keys between a specific range. It works by ' +\n    'counting the number of objects having distinct key values (kind of hashing), and using ' +\n    'arithmetic on those counts to determine the positions of each key value in the output ' +\n    'sequence.',\n  additionalDesc: 'k is the range of the key values,',\n  worstTime: 'N + k',\n  averageTime: 'N + k',\n  bestTime: 'N + k',\n  worstSpace: 'N + k',\n  stable: true,\n  inPlace: false,\n  link: 'https://www.geeksforgeeks.org/counting-sort/',\n};\n\nexport default CountingSort;\n","/**\n * Selection sort algorithm details.\n *\n * @memberOf Explanations\n * @see {@link https://www.geeksforgeeks.org/selection-sort/|Geeks for Geeks}\n * @const {\n * {bestTime: JSX.Element,\n * worstSpace: string,\n * additionalDesc: string,\n * averageTime: JSX.Element,\n * stable: boolean,\n * name: string,\n * worstTime: JSX.Element,\n * link: string,\n * description: string,\n * inPlace: boolean}\n * }\n */\nconst SelectionSort = {\n  name: 'Selection',\n  description:\n    'Selection Sort algorithm sorts an array by repeatedly finding the minimum element ' +\n    '(considering ascending order) from unsorted part and putting it at the beginning. The ' +\n    'algorithm maintains two subarrays, a subarray which is sorted and the remaining array which' +\n    ' is unsorted',\n  additionalDesc: '',\n  worstTime: (\n    <span>\n      N<sup>2</sup>\n    </span>\n  ),\n  averageTime: (\n    <span>\n      N<sup>2</sup>\n    </span>\n  ),\n  bestTime: (\n    <span>\n      N<sup>2</sup>\n    </span>\n  ),\n  worstSpace: '1',\n  stable: false,\n  inPlace: true,\n  link: 'https://www.geeksforgeeks.org/selection-sort/',\n};\n\nexport default SelectionSort;\n","/**\n * Merge sort algorithm details.\n *\n * @memberOf Explanations\n * @see {@link https://www.geeksforgeeks.org/merge-sort/|Geeks for Geeks}\n * @const {\n * {bestTime: string,\n * worstSpace: string,\n * additionalDesc: string,\n * averageTime: string,\n * stable: boolean,\n * name: string,\n * worstTime: string,\n * link: string,\n * description: string,\n * inPlace: boolean}\n * }\n */\nconst MergeSort = {\n  name: 'Merge',\n  description:\n    'Merge Sort is a Divide and Conquer algorithm. It divides the input array into two halves, ' +\n    'calls itself for the two halves, and then merges the two sorted halves. The merge() function ' +\n    'is used for merging two halves. The merge(arr, l, m, r) is a key process that assumes that ' +\n    'arr[l..m] and arr[m+1..r] are sorted and merges the two sorted subarrays into one',\n  additionalDesc: '',\n  worstTime: 'NlogN',\n  averageTime: 'NlogN',\n  bestTime: 'NlogN',\n  worstSpace: 'N',\n  stable: true,\n  inPlace: false,\n  link: 'https://www.geeksforgeeks.org/merge-sort/',\n};\n\nexport default MergeSort;\n","/**\n * Shell sort algorithm details.\n *\n * @memberOf Explanations\n * @see {@link https://www.geeksforgeeks.org/shellsort/|Geeks for Geeks}\n * @const {\n * {bestTime: string,\n * worstSpace: string,\n * additionalDesc: string,\n * averageTime: string,\n * stable: boolean,\n * name: string,\n * worstTime: JSX.Element,\n * link: string,\n * description: string,\n * inPlace: boolean}\n * }\n */\nconst ShellSort = {\n  name: 'Shell',\n  description:\n    'Shell Sort is mainly a variation of Insertion Sort. The idea of Shell Sort is to allow exchange ' +\n    'of items far apart from each other, then progressively reducing the gap between elements ' +\n    'to be compared. In the last iteration of Shell Sort where gap equals 1, regular Insertion Sort ' +\n    'is performed on the resultant array.',\n  additionalDesc: '',\n  worstTime: (\n    <span>\n      N<sup>2</sup>\n    </span>\n  ),\n  averageTime: 'NlogN',\n  bestTime: 'NlogN',\n  worstSpace: '1',\n  stable: false,\n  inPlace: true,\n  link: 'https://www.geeksforgeeks.org/shellsort/',\n};\n\nexport default ShellSort;\n","/**\n * Heap sort algorithm details.\n *\n * @memberOf Explanations\n * @see {@link https://www.geeksforgeeks.org/heap-sort/|Geeks for Geeks}\n * @const {\n * {bestTime: string,\n * worstSpace: string,\n * additionalDesc: string,\n * averageTime: string,\n * stable: boolean,\n * name: string,\n * worstTime: string,\n * link: string,\n * description: string,\n * inPlace: boolean}\n * }\n */\nconst HeapSort = {\n  name: 'Heap',\n  description:\n    'Heap Sort is a comparison based sorting technique based on Binary Heap data structure.' +\n    ' It is similar to selection sort where we first find the maximum element and place the' +\n    ' maximum element at the end. We repeat the same process for the remaining elements.',\n  additionalDesc: '',\n  worstTime: 'NlogN',\n  averageTime: 'NlogN',\n  bestTime: 'NlogN',\n  worstSpace: '1',\n  stable: false,\n  inPlace: true,\n  link: 'https://www.geeksforgeeks.org/heap-sort/',\n};\n\nexport default HeapSort;\n","import { FaCheckCircle, FaTimesCircle } from 'react-icons/fa';\nimport React from 'react';\nimport './styles.css';\n\n/**\n * Performance section detailing the performance of the current sorting algorithm.\n *\n * @component\n * @category CodeExplanation\n * @returns {JSX.Element} Performance section component.\n */\nconst PerformanceSection = ({ sortDetails }) => {\n  /**\n   * Complexities terminologies used.\n   *\n   * @returns {JSX.Element} List of complexities component.\n   */\n  const ListOfComplexities = () => (\n    <div className=\"text\">\n      <p>Worst time complexity</p>\n      <p>Average time complexity</p>\n      <p>Best time complexity</p>\n      <p>Worst space complexity</p>\n    </div>\n  );\n\n  /**\n   * Complexities of the sorting algorithm.\n   *\n   * @returns {JSX.Element} Complexity component describing the complexities of the sorting\n   * algorithm.\n   */\n  const Complexity = () => (\n    <div className=\"complexity\">\n      <p>O({sortDetails.worstTime})</p>\n      <p>θ({sortDetails.averageTime})</p>\n      <p>Ω({sortDetails.bestTime})</p>\n      <p>O({sortDetails.worstSpace})</p>\n    </div>\n  );\n\n  /**\n   * General type with icon template, used for detailing whether the sorting algorithm used is\n   * stable and in-place.\n   *\n   * @param {string} type Input type.\n   * @param {boolean} isTick detailing whether the type is true or false.\n   * @returns {JSX.Element} Type with icon component.\n   */\n  const TypeWithIcon = ({ type, isTick }) => {\n    /**\n     * Icon type which describes whether the boolean is true or false. Returns the Tick symbol\n     * if boolean is true, otherwise it returns the Cross symbol.\n     *\n     * @returns {JSX.Element} IconType.\n     */\n    const IconType = () => {\n      return isTick ? (\n        <FaCheckCircle size=\"25\" color=\"#11C2C9\" />\n      ) : (\n        <FaTimesCircle size=\"25\" color=\"#FF4E4E\" />\n      );\n    };\n\n    return (\n      <div className=\"typeWithIcon\">\n        <p>{type}</p>\n        <IconType />\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"performance\">\n      <p className=\"explanation-para\">\n        {`Assuming N is the size of array, ` + sortDetails.additionalDesc}\n      </p>\n      <div className=\"row-container-one\">\n        <ListOfComplexities />\n        <Complexity />\n      </div>\n      <div className=\"row-container-two\">\n        <TypeWithIcon type={'Stable'} isTick={sortDetails.stable} />\n        <TypeWithIcon type={'In-place'} isTick={sortDetails.inPlace} />\n      </div>\n    </div>\n  );\n};\n\nexport default PerformanceSection;\n","import React, { useEffect, useState } from 'react';\nimport './styles.css';\nimport explanations from '../explanations/Explanations';\nimport PerformanceSection from './PerformanceSection';\n\n/**\n * CodeExplanation component which encapsulates the details for how the sorting algorithm works,\n * and the performance of the algorithm.\n *\n * @component\n * @category CodeExplanation\n * @param {string} algo Current algorithm selected.\n * @returns {JSX.Element} Code explanation component.\n */\nconst CodeExplanation = ({ algo }) => {\n  // Sort details of the algorithm.\n  const [sortDetails, setSortDetails] = useState(() => explanations[algo]);\n\n  useEffect(() => {\n    setSortDetails(explanations[algo]);\n  }, [algo]);\n\n  /**\n   * First header component for the explanation section.\n   *\n   * @returns {JSX.Element} First header component for the explanation section.\n   */\n  const HeaderOne = () => <header>How {sortDetails.name} Sort works</header>;\n\n  /**\n   * Explanation component detailing how the code works.\n   *\n   * @returns {JSX.Element} Explanation component detailing how the code works.\n   */\n  const Explanation = () => <p style={{ width: `112%` }}>{sortDetails.description}</p>;\n\n  /**\n   * Second header component for the performance section.\n   *\n   * @returns {JSX.Element} Second header component for the performance section.\n   */\n  const HeaderTwo = () => <header>Performance</header>;\n\n  /**\n   * Link component which provides a link to an external website for more information about the\n   * sorting algorithm used.\n   *\n   * @returns {JSX.Element} Link component.\n   */\n  const Link = () => (\n    <a className=\"link\" target=\"_blank\" rel=\"noopener noreferrer\" href={sortDetails.link}>\n      Click for more info\n    </a>\n  );\n\n  return (\n    <div className=\"main\">\n      <HeaderOne />\n      <Explanation />\n      <HeaderTwo />\n      <PerformanceSection sortDetails={sortDetails} />\n      <Link />\n    </div>\n  );\n};\n\nexport default CodeExplanation;\n","import BubbleSort from './bubbleSortTemplate';\nimport InsertionSort from './insertionSortTemplate';\nimport QuickSort from './quickSortTemplate';\nimport RadixSort from './radixSortTemplate';\nimport BucketSort from './bucketSortTemplate';\nimport CountingSort from './countingSortTemplate';\nimport SelectionSort from './selectionSortTemplate';\nimport MergeSort from './mergeSortTemplate';\nimport ShellSort from './shellSortTemplate';\nimport HeapSort from './heapSortTemplate';\n\n/**\n * Contains all the code templates for the sorting algorithms.\n *\n * @namespace Code templates\n * @type {Object}\n */\nconst templates = {\n  'Bubble Sort': BubbleSort,\n  'Insertion Sort': InsertionSort,\n  'Quick Sort': QuickSort,\n  'Radix Sort': RadixSort,\n  'Bucket Sort': BucketSort,\n  'Counting Sort': CountingSort,\n  'Selection Sort': SelectionSort,\n  'Merge Sort': MergeSort,\n  'Shell Sort': ShellSort,\n  'Heap Sort': HeapSort,\n};\n\nexport default templates;\n","/**\n * Bubble sort algorithm details.\n *\n * @memberOf Code templates\n * @const {{Java: string, 'C/C++': string, JavaScript: string, Python: string}}\n */\nconst BubbleSort = {\n  Java:\n    'void swap(int[] arr, int i, int j) {\\n' +\n    '    int temp = arr[i];\\n' +\n    '    arr[i] = arr[j];\\n' +\n    '    arr[j] = temp;\\n' +\n    '}\\n' +\n    '\\n' +\n    'void bubbleSort(int[] arr) {\\n' +\n    '    \\n' +\n    '    // Loop in the range of unsorted elements\\n' +\n    '    for (int i = arr.length - 1; i >= 0; i--) {\\n' +\n    '        boolean swapped = true;\\n' +\n    '        \\n' +\n    '        // Bubble largest element to the end\\n' +\n    '        for (int j = 0; j < i; j++) {\\n' +\n    '            if (arr[j] > arr[j + 1]) {\\n' +\n    '                swap(arr, j, j + 1);\\n' +\n    '                swapped = false;\\n' +\n    '            }\\n' +\n    '        }\\n' +\n    '        \\n' +\n    '        // Array is already sorted as there are no swaps in this iteration\\n' +\n    '        if (swapped) {\\n' +\n    '            break;\\n' +\n    '        }\\n' +\n    '    }\\n' +\n    '}\\n',\n  JavaScript:\n    'function bubbleSort(arr) {\\n\\n' +\n    '  // Loop in the range of unsorted elements\\n' +\n    '  for (let i = arr.length - 1; i >= 0; i--) {\\n' +\n    '    let swapped = true;\\n\\n' +\n    '    // Bubble largest element to the end\\n' +\n    '    for (let j = 0; j < i; j++) {\\n' +\n    '      if (arr[j] > arr[j + 1]) {\\n' +\n    '        [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\\n' +\n    '        swapped = false;\\n' +\n    '      }\\n' +\n    '    }\\n\\n' +\n    '    // Array is already sorted as there are no swaps in this iteration\\n' +\n    '    if (swapped) {\\n' +\n    '      break;\\n' +\n    '    }\\n' +\n    '  }\\n' +\n    '}\\n',\n  Python:\n    'def bubble_sort(arr):\\n' +\n    '\\n' +\n    '    # Loop in the range of unsorted elements\\n' +\n    '    for i in range(len(arr) - 1, 0, -1):\\n' +\n    '        swapped = True\\n' +\n    '\\n' +\n    '        # Bubble largest element to the end\\n' +\n    '        for j in range(i):\\n' +\n    '            if arr[j] > arr[j + 1]:\\n' +\n    '                arr[j], arr[j + 1] = arr[j + 1], arr[j]\\n' +\n    '                swapped = False\\n' +\n    '\\n' +\n    '        # Array is already sorted as there are no swaps in this iteration\\n' +\n    '        if swapped:\\n' +\n    '            break\\n',\n  'C/C++':\n    'void swap(int *a, int *b)\\n' +\n    '{\\n' +\n    '    int temp = *a;\\n' +\n    '    *a = *b;\\n' +\n    '    *b = temp;\\n' +\n    '}\\n' +\n    '\\n' +\n    'void bubbleSort(int arr[], int len)\\n' +\n    '{\\n' +\n    '    int i, j;\\n' +\n    '    bool swapped;\\n' +\n    '\\n' +\n    '    // Loop in the range of unsorted elements\\n' +\n    '    for (i = len - 1; i >= 0; --i)\\n' +\n    '    {\\n' +\n    '        swapped = true;\\n' +\n    '\\n' +\n    '        // Bubble largest element to the end\\n' +\n    '        for (j = 0; j < i; ++j)\\n' +\n    '        {\\n' +\n    '            if (arr[j] > arr[j + 1])\\n' +\n    '            {\\n' +\n    '                swap(&arr[j], &arr[j + 1]);\\n' +\n    '                swapped = false;\\n' +\n    '            }\\n' +\n    '        }\\n' +\n    '\\n' +\n    '        // Array is already sorted as there are no swaps in this iteration\\n' +\n    '        if (swapped)\\n' +\n    '        {\\n' +\n    '            break;\\n' +\n    '        }\\n' +\n    '    }\\n' +\n    '}\\n',\n};\n\nexport default BubbleSort;\n","/**\n * Insertion sort algorithm details.\n *\n * @see {@link https://www.geeksforgeeks.org/insertion-sort/|Geeks for Geeks}\n * @memberOf Code templates\n * @const {{Java: string, 'C/C++': string, JavaScript: string, Python: string}}\n */\nconst InsertionSort = {\n  Java:\n    'void insertionSort(int[] arr) {\\n' +\n    '\\n' +\n    '    // Elements from 0 to i - 1 are sorted\\n' +\n    '    for (int i = 1; i < arr.length; i++) {\\n' +\n    '\\n' +\n    '        int key = arr[i];\\n' +\n    '        int j = i - 1;\\n' +\n    '\\n' +\n    '        // Locate position of key to insert in the sorted region\\n' +\n    '        while (j >= 0 && arr[j] > key) {\\n' +\n    '            arr[j + 1] = arr[j];\\n' +\n    '            j -= 1;\\n' +\n    '        }\\n' +\n    '        arr[j + 1] = key;\\n' +\n    '    }\\n' +\n    '}\\n',\n  JavaScript:\n    'function insertionSort(arr) {\\n' +\n    '\\n' +\n    '  // Elements from 0 to i - 1 are sorted\\n' +\n    '  for (let i = 1; i < arr.length; i++) {\\n' +\n    '      \\n' +\n    '    const key = arr[i];\\n' +\n    '    let j = i - 1;\\n' +\n    '\\n' +\n    '    // Locate position of key to insert in the sorted region\\n' +\n    '    while (j >= 0 && arr[j] > key) {\\n' +\n    '      arr[j + 1] = arr[j];\\n' +\n    '      j -= 1;\\n' +\n    '    }\\n' +\n    '    arr[j + 1] = key;\\n' +\n    '  }\\n' +\n    '}\\n',\n  Python:\n    'def insertion_sort(arr):\\n' +\n    '\\n' +\n    '    # Elements from 0 to i - 1 are sorted\\n' +\n    '    for i in range(1, len(arr)):\\n' +\n    '\\n' +\n    '        key = arr[i]\\n' +\n    '        j = i - 1\\n' +\n    '\\n' +\n    '        # Locate position of key to insert in the sorted region\\n' +\n    '        while j >= 0 and arr[j] > key:\\n' +\n    '            arr[j + 1] = arr[j]\\n' +\n    '            j -= 1\\n' +\n    '        arr[j + 1] = key\\n',\n  'C/C++':\n    'void insertionSort(int arr[], int len)\\n' +\n    '{\\n' +\n    '    // Elements from 0 to i - 1 are sorted\\n' +\n    '    for (int i = 1; i < len; i++)\\n' +\n    '    {\\n' +\n    '\\n' +\n    '        int key = arr[i];\\n' +\n    '        int j = i - 1;\\n' +\n    '\\n' +\n    '        // Locate position of key to insert in the sorted region\\n' +\n    '        while (j >= 0 && arr[j] > key)\\n' +\n    '        {\\n' +\n    '            arr[j + 1] = arr[j];\\n' +\n    '            j -= 1;\\n' +\n    '        }\\n' +\n    '        arr[j + 1] = key;\\n' +\n    '    }\\n' +\n    '}\\n',\n};\n\nexport default InsertionSort;\n","/**\n * Quick sort algorithm details.\n *\n * @see {@link https://www.geeksforgeeks.org/quick-sort/|Geeks for Geeks}\n * @memberOf Code templates\n * @const {{Java: string, 'C/C++': string, JavaScript: string, Python: string}}\n */\nconst QuickSort = {\n  Java:\n    'void swap(int[] arr, int i, int j) {\\n' +\n    '    int temp = arr[i];\\n' +\n    '    arr[i] = arr[j];\\n' +\n    '    arr[j] = temp;\\n' +\n    '}\\n' +\n    '\\n' +\n    'int partition(int[] arr, int low, int high) {\\n' +\n    '    int pivot = arr[high];\\n' +\n    '    int i = low - 1; // index of smaller element \\n' +\n    '    for (int j = low; j < high; j++) {\\n' +\n    '        // If current element is smaller than the pivot \\n' +\n    '        if (arr[j] < pivot) {\\n' +\n    '            i++;\\n' +\n    '            swap(arr, i, j);\\n' +\n    '        }\\n' +\n    '    }\\n' +\n    '    swap(arr, i + 1, high);\\n' +\n    '    return i + 1;\\n' +\n    '}\\n' +\n    '\\n' +\n    '/* The main function that implements QuickSort() \\n' +\n    '  arr[] --> Array to be sorted, \\n' +\n    '  low  --> Starting index, \\n' +\n    '  high  --> Ending index */\\n' +\n    'void quickSortHelper(int[] arr, int low, int high) {\\n' +\n    '    if (low < high) { \\n' +\n    '        /* pi is partitioning index, arr[pi] is  \\n' +\n    '           now at right place */\\n' +\n    '        int pi = partition(arr, low, high);\\n' +\n    '        // Recursively sort elements before \\n' +\n    '        // partition and after partition \\n' +\n    '        quickSortHelper(arr, low, pi - 1);\\n' +\n    '        quickSortHelper(arr, pi + 1, high);\\n' +\n    '    }\\n' +\n    '}\\n' +\n    '\\n' +\n    'void quickSort(int[] arr) {\\n' +\n    '    quickSortHelper(arr, 0, arr.length - 1);\\n' +\n    '}\\n\\n',\n  JavaScript:\n    'function partition(arr, low, high) {\\n' +\n    '  // Take last element as the pivot\\n' +\n    '  let pivot = arr[high];\\n' +\n    '  let i = low - 1;\\n' +\n    '  for (let j = low; j < high; j++) {\\n' +\n    '    // If current element is smaller than the pivot\\n' +\n    '    if (arr[j] < pivot) {\\n' +\n    '      i++;\\n' +\n    '      [arr[j], arr[i]] = [arr[i], arr[j]];\\n' +\n    '    }\\n' +\n    '  }\\n' +\n    '  // Place pivot in the correct position in the partition\\n' +\n    '  [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\\n' +\n    '  return i + 1;\\n' +\n    '}\\n' +\n    '\\n' +\n    'function quickSortHelper(arr, low, high) {\\n' +\n    '  if (low < high) {\\n' +\n    '    /* pi is partitioning index, arr[pi] is  \\n' +\n    '       now at right place */\\n' +\n    '    let pi = partition(arr, low, high);\\n' +\n    '    // Recursively sort elements before \\n' +\n    '    // partition and after partition \\n' +\n    '    quickSortHelper(arr, low, pi - 1);\\n' +\n    '    quickSortHelper(arr, pi + 1, high);\\n' +\n    '  }\\n' +\n    '}\\n' +\n    '\\n' +\n    'function quickSort(arr) {\\n' +\n    '  quickSortHelper(arr, 0, arr.length - 1);\\n' +\n    '}\\n\\n',\n  Python:\n    'def partition(arr, low, high):\\n' +\n    '    i = low - 1\\n' +\n    '\\n' +\n    '    # Take last element as the pivot\\n' +\n    '    pivot = arr[high]\\n' +\n    '    for j in range(low, high):\\n' +\n    '\\n' +\n    '        # If current element is smaller than the pivot\\n' +\n    '        if arr[j] < pivot:\\n' +\n    '        i = i + 1\\n' +\n    '        arr[i], arr[j] = arr[j], arr[i]\\n' +\n    '\\n' +\n    '    # Place pivot in the correct position in the partition\\n' +\n    '    arr[i + 1], arr[high] = arr[high], arr[i + 1]\\n' +\n    '    return i + 1\\n' +\n    '\\n' +\n    '\\n' +\n    'def quick_sort_helper(arr, low, high):\\n' +\n    '    while low < high:\\n' +\n    '\\n' +\n    '        pi = partition(arr, low, high)\\n' +\n    '        # pi is partitioning index, arr[pi] is  \\n' +\n    '        # now at right place */\\n' +\n    '        if low < high:\\n' +\n    '             int pi = partition(arr, low, high)\\n' +\n    '             quick_sort_helper(arr, low, pi - 1)\\n' +\n    '             quick_sort_helper(arr, pi + 1, high)\\n' +\n    '\\n' +\n    '\\n' +\n    'def quick_sort(arr):\\n' +\n    '    quick_sort_helper(arr, 0, len(arr) - 1)\\n' +\n    '\\n\\n',\n  'C/C++':\n    'void swap(int *a, int *b)\\n' +\n    '{\\n' +\n    '    int temp = *a;\\n' +\n    '    *a = *b;\\n' +\n    '    *b = temp;\\n' +\n    '}\\n' +\n    '\\n' +\n    'int partition(int arr[], int low, int high)\\n' +\n    '{\\n' +\n    '    // Take last element as the pivot\\n' +\n    '    int pivot = arr[high];\\n' +\n    '    int i = low - 1;\\n' +\n    '    for (int j = low; j <= high - 1; ++j)\\n' +\n    '    {\\n' +\n    '        // If current element is smaller than the pivot\\n' +\n    '        if (arr[j] <= pivot)\\n' +\n    '        {\\n' +\n    '            ++i;\\n' +\n    '            swap(&arr[i], &arr[j]);\\n' +\n    '        }\\n' +\n    '    }\\n' +\n    '    // Place pivot in the correct position in the partition\\n' +\n    '    swap(&arr[i + 1], &arr[high]);\\n' +\n    '    return i + 1;\\n' +\n    '}\\n' +\n    '\\n' +\n    'void quickSortHelper(int arr[], int low, int high)\\n' +\n    '{\\n' +\n    '    if (low < high)\\n' +\n    '    {\\n' +\n    '        int pi = partition(arr, low, high);\\n' +\n    '\\n' +\n    '        quickSortHelper(arr, low, pi - 1);\\n' +\n    '        quickSortHelper(arr, pi + 1, high);\\n' +\n    '    }\\n' +\n    '}\\n' +\n    '\\n' +\n    'void quickSort(int arr[], int len)\\n' +\n    '{\\n' +\n    '    quickSortHelper(arr, 0, len - 1);\\n' +\n    '}\\n\\n',\n};\n\nexport default QuickSort;\n","/**\n * Radix sort algorithm details.\n *\n * @memberOf Code templates\n * @const {{Java: string, 'C/C++': string, JavaScript: string, Python: string}}\n */\nconst RadixSort = {\n  Java:\n    'void radixSort(int[] arr) {\\n' +\n    '\\n' +\n    '    // Find the max number and multiply it by 10 to get a number\\n' +\n    '    // with no. of digits of max + 1\\n' +\n    '    int maxNum = arr[0];\\n' +\n    '    for (int num : arr) {\\n' +\n    '        maxNum = Math.max(num, maxNum);\\n' +\n    '    }\\n' +\n    '    maxNum *= 10;\\n' +\n    '    int divisor = 10;\\n' +\n    '    while (divisor < maxNum) {\\n' +\n    '\\n' +\n    '        // Create bucket arrays for each of 0-9\\n' +\n    '        ArrayList<ArrayList<Integer>> buckets = new ArrayList<>(10);\\n' +\n    '        for (int i = 0; i < 10; i++) {\\n' +\n    '            buckets.add(new ArrayList<>());\\n' +\n    '        }\\n' +\n    '\\n' +\n    '        // For each number, get the current significant digit and put it in\\n' +\n    '        // the respective bucket\\n' +\n    '        for (int num : arr) {\\n' +\n    '            int index = (num % divisor) / (divisor / 10);\\n' +\n    '            ArrayList<Integer> currentBucket = buckets.get(index);\\n' +\n    '            currentBucket.add(num);\\n' +\n    '        }\\n' +\n    '\\n' +\n    '        // Reconstruct the array by concatenating all sub arrays\\n' +\n    '        int idx = 0;\\n' +\n    '        for (ArrayList<Integer> bucket : buckets) {\\n' +\n    '            for (int num : bucket) {\\n' +\n    '                arr[idx] = num;\\n' +\n    '                idx++;\\n' +\n    '            }\\n' +\n    '        }\\n\\n' +\n    '        // Move to the next significant digit\\n' +\n    '        divisor *= 10;\\n' +\n    '    }\\n' +\n    '}\\n',\n  JavaScript:\n    'function radixSort(arr) {\\n' +\n    '\\n' +\n    '  // Find the max number and multiply it by 10 to get a number\\n' +\n    '  // with no. of digits of max + 1\\n' +\n    '  const maxNum = Math.max(...arr) * 10;\\n' +\n    '  let divisor = 10;\\n' +\n    '\\n' +\n    '  while (divisor < maxNum) {\\n' +\n    '      \\n' +\n    '    // Create bucket arrays for each of 0-9\\n' +\n    '    let buckets = [...Array(10)].map(() => []);\\n' +\n    '\\n' +\n    '    // For each number, get the current significant digit and put it in\\n' +\n    '    // the respective bucket\\n' +\n    '    for (let num of arr) {\\n' +\n    '      buckets[Math.floor((num % divisor) / (divisor / 10))].push(num);\\n' +\n    '    }\\n' +\n    '\\n' +\n    '    // Reconstruct the array by concatenating all sub arrays\\n' +\n    '    arr = [].concat.apply([], buckets);\\n' +\n    '\\n' +\n    '    // Move to the next significant digit\\n' +\n    '    divisor *= 10;\\n' +\n    '  }\\n\\n' +\n    '  return arr;\\n' +\n    '}\\n',\n  Python:\n    'def radix_sort(arr):\\n' +\n    '\\n' +\n    '    # Find the max number and multiply it by 10 to get a number\\n' +\n    '    # with no. of digits of max + 1\\n' +\n    '    max_num = max(arr) * 10\\n' +\n    '    divisor = 10\\n' +\n    '\\n' +\n    '    while divisor < max_num:\\n' +\n    '\\n' +\n    '        # Create bucket arrays for each of 0-9\\n' +\n    '        buckets = [None] * 10\\n' +\n    '        for i in range(10):\\n' +\n    '            buckets[i] = []\\n' +\n    '\\n' +\n    '        # For each number, get the current significant digit and put it in\\n' +\n    '        # the respective bucket\\n' +\n    '        for num in arr:\\n' +\n    '            buckets[math.floor((num % divisor) / (divisor / 10))].append(num)\\n' +\n    '\\n' +\n    '        # Reconstruct the array by concatenating all sub arrays\\n' +\n    '        arr = []\\n' +\n    '        for bucket in buckets:\\n' +\n    '            arr.extend(bucket)\\n' +\n    '        divisor *= 10\\n' +\n    '\\n' +\n    '    return arr\\n',\n  'C/C++':\n    'void radixSort(int arr[], int len)\\n' +\n    '{\\n' +\n    '\\n' +\n    '    int maxNum = arr[0];\\n' +\n    '    int i, j, k, divisor = 10;\\n' +\n    '\\n' +\n    '    // Assume that our bucket size is capped at 10 for simplicity\\n' +\n    '    int buckets[10][10];\\n' +\n    '    int bucketCount[10];\\n' +\n    '\\n' +\n    '    // Find the max number and multiply it by 10 to get a number\\n' +\n    '    // with no. of digits of max + 1\\n' +\n    '    for (i = 0; i < len; ++i)\\n' +\n    '    {\\n' +\n    '        if (arr[i] > maxNum)\\n' +\n    '        {\\n' +\n    '            maxNum = arr[i];\\n' +\n    '        }\\n' +\n    '    }\\n' +\n    '    maxNum *= 10;\\n' +\n    '\\n' +\n    '    while (divisor < maxNum)\\n' +\n    '    {\\n' +\n    '        // Initialize bucket arrays for each of 0-9\\n' +\n    '        for (int i = 0; i < 10; ++i)\\n' +\n    '        {\\n' +\n    '            bucketCount[i] = 0;\\n' +\n    '        }\\n' +\n    '\\n' +\n    '        // For each number, get the current significant digit and put it in\\n' +\n    '        // the respective bucket\\n' +\n    '        for (i = 0; i < len; ++i)\\n' +\n    '        {\\n' +\n    '            int num = arr[i];\\n' +\n    '            int index = (num % divisor) / (divisor / 10);\\n' +\n    '            buckets[index][bucketCount[index]] = num;\\n' +\n    '            bucketCount[index]++;\\n' +\n    '        }\\n' +\n    '\\n' +\n    '        // Reconstruct the array by concatenating all sub arrays\\n' +\n    '        i = 0;\\n' +\n    '        for (j = 0; j < 10; ++j)\\n' +\n    '        {\\n' +\n    '            for (k = 0; k < bucketCount[j]; ++k)\\n' +\n    '            {\\n' +\n    '                arr[i] = buckets[j][k];\\n' +\n    '                i++;\\n' +\n    '            }\\n' +\n    '        }\\n' +\n    '\\n' +\n    '        // Move to the next significant digit\\n' +\n    '        divisor *= 10;\\n' +\n    '    }\\n' +\n    '}\\n',\n};\n\nexport default RadixSort;\n","/**\n * Bucket sort algorithm details.\n *\n * @memberOf Code templates\n * @const {{Java: string, 'C/C++': string, JavaScript: string, Python: string}}\n */\nconst BucketSort = {\n  Java:\n    'void bucketSort(double[] arr) {\\n' +\n    '\\n' +\n    '    int totalSlots = 10;\\n' +\n    '    ArrayList<ArrayList<Double>> buckets = new ArrayList<>(totalSlots);\\n' +\n    '\\n' +\n    '    // Create bucket arrays for each of 0-9\\n' +\n    '    for (int i = 0; i < totalSlots; i++) {\\n' +\n    '        buckets.add(new ArrayList<>());\\n' +\n    '    }\\n' +\n    '\\n' +\n    '    // For each number, get the digit in the tenth place and put it in\\n' +\n    '    // the respective bucket\\n' +\n    '    for (double num : arr) {\\n' +\n    '        int bucket_idx = (int) (totalSlots * num);\\n' +\n    '        buckets.get(bucket_idx).add(num);\\n' +\n    '    }\\n' +\n    '\\n' +\n    '    // Sort each bucket in the list of buckets\\n' +\n    '    for (ArrayList<Double> bucket : buckets) {\\n' +\n    '        Collections.sort(bucket);\\n' +\n    '    }\\n' +\n    '\\n' +\n    '    // Reconstruct the array by concatenating all sub arrays\\n' +\n    '    int index = 0;\\n' +\n    '    for (ArrayList<Double> bucket : buckets) {\\n' +\n    '        for (double item : bucket) {\\n' +\n    '            arr[index] = item;\\n' +\n    '            index++;\\n' +\n    '        }\\n' +\n    '    }\\n' +\n    '}\\n',\n  JavaScript:\n    'function bucketSort(arr) {\\n' +\n    '    \\n' +\n    '  const totalSlots = 10;\\n' +\n    '\\n' +\n    '  // Create bucket arrays for each of 0-9\\n' +\n    '  let buckets = [...Array(10)].map(() => []);\\n' +\n    '\\n' +\n    '  // For each number, get the digit in the tenth place and put it in\\n' +\n    '  // the respective bucket\\n' +\n    '  for (const num of arr) {\\n' +\n    '    const bucket_idx = Math.floor(totalSlots * num);\\n' +\n    '    buckets[bucket_idx].push(num);\\n' +\n    '  }\\n' +\n    '\\n' +\n    '  // Sort each bucket in the list of buckets\\n' +\n    '  for (const bucket of buckets) {\\n' +\n    '    bucket.sort();\\n' +\n    '  }\\n' +\n    '\\n' +\n    '  // Reconstruct the array by concatenating all sub arrays\\n' +\n    '  return [].concat.apply([], buckets);\\n' +\n    '}\\n',\n  Python:\n    'def bucket_sort(arr):\\n' +\n    '\\n' +\n    '    total_slots = 10\\n' +\n    '    buckets = []\\n' +\n    '\\n' +\n    '    # Create bucket arrays for each of 0-9\\n' +\n    '    for i in range(total_slots):\\n' +\n    '        buckets.append([])\\n' +\n    '\\n' +\n    '    # For each number, get the digit in the tenth place and put it in\\n' +\n    '    # the respective bucket\\n' +\n    '    for num in arr:\\n' +\n    '        bucket_idx = int(total_slots * num)\\n' +\n    '        buckets[bucket_idx].append(num)\\n' +\n    '\\n' +\n    '    # Sort each bucket in the list of buckets\\n' +\n    '    for bucket in buckets:\\n' +\n    '        bucket.sort()\\n' +\n    '\\n' +\n    '    # Reconstruct the array by concatenating all sub arrays\\n' +\n    '    index = 0\\n' +\n    '    for bucket in buckets:\\n' +\n    '        for item in bucket:\\n' +\n    '            arr[index] = item\\n' +\n    '            index += 1\\n',\n  'C/C++':\n    'void bucketSort(double arr[], int len)\\n' +\n    '{\\n' +\n    '    int i, j, k;\\n' +\n    '\\n' +\n    '    // Assume that our bucket size is capped at 10 for simplicity\\n' +\n    '    int buckets[10][10];\\n' +\n    '    int bucketCount[10];\\n' +\n    '\\n' +\n    '    // For each number, get the digit in the tenth place and put it in\\n' +\n    '    // the respective bucket\\n' +\n    '    for (i = 0; i < len; ++i)\\n' +\n    '    {\\n' +\n    '        double num = arr[i];\\n' +\n    '        int index = floor(num * 10);\\n' +\n    '        buckets[index][bucketCount[index]] = num;\\n' +\n    '        bucketCount[index]++;\\n' +\n    '    }\\n' +\n    '\\n' +\n    '    // Sort each bucket in the list of buckets\\n' +\n    '    for (i = 0; i < 10; ++i)\\n' +\n    '    {\\n' +\n    '        sort(buckets[i]);\\n' +\n    '    }\\n' +\n    '\\n' +\n    '    // Reconstruct the array by concatenating all sub arrays\\n' +\n    '    i = 0;\\n' +\n    '    for (j = 0; j < 10; ++j)\\n' +\n    '    {\\n' +\n    '        for (k = 0; k < bucketCount[j]; ++k)\\n' +\n    '        {\\n' +\n    '            arr[i] = buckets[j][k];\\n' +\n    '            i++;\\n' +\n    '        }\\n' +\n    '    }\\n' +\n    '}\\n',\n};\n\nexport default BucketSort;\n","/**\n * Counting sort algorithm details.\n *\n * @memberOf Code templates\n * @const {{Java: string, 'C/C++': string, JavaScript: string, Python: string}}\n */\nconst CountingSort = {\n  Java:\n    '// Assume array contains only non-zero digits\\n' +\n    'void countingSort(int[] arr) {\\n' +\n    '\\n' +\n    '    int maxElement = arr[0];\\n' +\n    '    // Get max element\\n' +\n    '    for (int i = 1; i < arr.length; i++) {\\n' +\n    '        maxElement = Math.max(maxElement, arr[i]);\\n' +\n    '    }\\n' +\n    '\\n' +\n    '    // Create count array of length maxElement + 1\\n' +\n    '    int[] countArr = new int[maxElement + 1];\\n' +\n    '\\n' +\n    '    // Fill in count arr\\n' +\n    '    for (int i = 0; i < arr.length; i++) {\\n' +\n    '        countArr[arr[i]]++;\\n' +\n    '    }\\n' +\n    '\\n' +\n    '    // Insert elements back into original array\\n' +\n    '    int index = 0;\\n' +\n    '    for (int i = 0; i < countArr.length; i++) {\\n' +\n    '        while (countArr[i] != 0) {\\n' +\n    '            arr[index] = i;\\n' +\n    '            index++;\\n' +\n    '            countArr[i]--;\\n' +\n    '        }\\n' +\n    '    }\\n' +\n    '}\\n',\n  JavaScript:\n    '// Assume array contains only non-zero digits\\n' +\n    'function countingSort(arr) {\\n' +\n    '  // Get max element\\n' +\n    '  const maxElement = Math.max(...arr);\\n' +\n    '\\n' +\n    '  // Create count array of length maxElement + 1\\n' +\n    '  const countArr = new Array(maxElement + 1);\\n' +\n    '  countArr.fill(0);\\n' +\n    '\\n' +\n    '  // Fill in count arr\\n' +\n    '  for (let i = 0; i < arr.length; i++) {\\n' +\n    '    countArr[arr[i]]++;\\n' +\n    '  }\\n' +\n    '\\n' +\n    '  // Insert elements back into original array\\n' +\n    '  let index = 0;\\n' +\n    '  for (let i = 0; i < countArr.length; i++) {\\n' +\n    '    while (countArr[i] != 0) {\\n' +\n    '      arr[index] = i;\\n' +\n    '      index++;\\n' +\n    '      countArr[i]--;\\n' +\n    '    }\\n' +\n    '  }\\n' +\n    '}\\n',\n  Python:\n    '# Assume array contains only non-zero digits\\n' +\n    'def counting_sort(arr):\\n' +\n    '    # Get max element\\n' +\n    '    max_element = max(arr)\\n' +\n    '\\n' +\n    '    # Create count array of length max_element + 1\\n' +\n    '    count_arr = [0] * (max_element + 1)\\n' +\n    '\\n' +\n    '    # Fill in count arr\\n' +\n    '    for i in range(len(arr)):\\n' +\n    '        count_arr[arr[i]] += 1\\n' +\n    '\\n' +\n    '    # Insert elements back into original array\\n' +\n    '    index = 0\\n' +\n    '    for i in range(len(count_arr)):\\n' +\n    '        while count_arr[i] is not 0:\\n' +\n    '            arr[index] = i\\n' +\n    '            index += 1\\n' +\n    '            count_arr[i] -= 1\\n',\n  'C/C++':\n    '// Assume array contains only non-zero digits\\n' +\n    'void countingSort(int arr[], int len)\\n' +\n    '{\\n' +\n    '    int i;\\n' +\n    '    int maxElement = arr[0];\\n' +\n    '    // Get max element\\n' +\n    '    for (i = 1; i < len; ++i)\\n' +\n    '    {\\n' +\n    '        if (arr[i] > maxElement)\\n' +\n    '        {\\n' +\n    '            maxElement = arr[i];\\n' +\n    '        }\\n' +\n    '    }\\n' +\n    '\\n' +\n    '    // Create array with length maxElement + 1\\n' +\n    '    int countArrLength = maxElement + 1;\\n' +\n    '    int *countArr = (int *)malloc(countArrLength * sizeof(int));\\n' +\n    '\\n' +\n    '    for (i = 0; i < countArrLength; ++i)\\n' +\n    '    {\\n' +\n    '        countArr[i] = 0;\\n' +\n    '    }\\n' +\n    '\\n' +\n    '    // Fill in count arr\\n' +\n    '    for (i = 0; i < len; ++i)\\n' +\n    '    {\\n' +\n    '        countArr[arr[i]]++;\\n' +\n    '    }\\n' +\n    '\\n' +\n    '    // Insert elements back into original array\\n' +\n    '    int index = 0;\\n' +\n    '    for (i = 0; i < countArrLength; ++i)\\n' +\n    '    {\\n' +\n    '        while (countArr[i] != 0)\\n' +\n    '        {\\n' +\n    '            arr[index] = i;\\n' +\n    '            ++index;\\n' +\n    '            countArr[i]--;\\n' +\n    '        }\\n' +\n    '    }\\n' +\n    '}\\n\\n',\n};\n\nexport default CountingSort;\n","/**\n * Selection sort algorithm details.\n *\n * @see {@link https://www.geeksforgeeks.org/selection-sort/|Geeks for Geeks}\n * @see {@link https://stackabuse.com/selection-sort-in-javascript/|StackAbuse}\n * @see {@link https://stackabuse.com/selection-sort-in-python/|StackAbuse}\n * @memberOf Code templates\n * @const {{Java: string, 'C/C++': string, JavaScript: string, Python: string}}\n */\nconst SelectionSort = {\n  Java:\n    'void sort(int[] arr) {\\n' +\n    '    int n = arr.length;\\n' +\n    '    // One by one move boundary of unsorted subarray \\n' +\n    '    for (int i = 0; i < n - 1; i++) {\\n' +\n    '        // Find the minimum element in unsorted array \\n' +\n    '        int minIdx = i;\\n' +\n    '        for (int j = i + 1; j < n; j++) {\\n' +\n    '            if (arr[j] < arr[min_idx]) {\\n' +\n    '                minIdx = j;\\n' +\n    '            }\\n' +\n    '        }\\n' +\n    '        // Swap the found minimum element with the first element \\n' +\n    '        int temp = arr[minIdx];\\n' +\n    '        arr[minIdx] = arr[i];\\n' +\n    '        arr[i] = temp;\\n' +\n    '    }\\n' +\n    '} \\n',\n  JavaScript:\n    'function selectionSort(inputArr) {\\n' +\n    '  let n = inputArr.length;\\n' +\n    '  for (let i = 0; i < n - 1; i++) {\\n' +\n    '    // Finding the smallest number in the subarray\\n' +\n    '    let min = i;\\n' +\n    '    for (let j = i + 1; j < n; j++) {\\n' +\n    '      if (inputArr[j] < inputArr[min]) {\\n' +\n    '        min = j;\\n' +\n    '      }\\n' +\n    '    }\\n' +\n    '    if (min != i) {\\n' +\n    '      // Swapping the elements\\n' +\n    '      let tmp = inputArr[i];\\n' +\n    '      inputArr[i] = inputArr[min];\\n' +\n    '      inputArr[min] = tmp;\\n' +\n    '    }\\n' +\n    '  }\\n' +\n    '  return inputArr;\\n' +\n    '}\\n',\n  Python:\n    'def selection_sort(L):\\n' +\n    '    # i indicates how many items were sorted\\n' +\n    '    for i in range(len(L) - 1):\\n' +\n    '        # To find the minimum value of the unsorted segment\\n' +\n    '        # We first assume that the first element is the lowest\\n' +\n    '        min_index = i\\n' +\n    '        # We then use j to loop through the remaining elements\\n' +\n    '        for j in range(i + 1, len(L) - 1):\\n' +\n    '            # Update the min_index if the element at j is lower than it\\n' +\n    '            if L[j] < L[min_index]:\\n' +\n    '                min_index = j\\n' +\n    '        # After finding the lowest item of the unsorted regions,\\n' +\n    '        # swap with the first unsorted item\\n' +\n    '        L[i], L[min_index] = L[min_index], L[i]\\n',\n  'C/C++':\n    'void selectionSort(int arr[], int n)\\n' +\n    '{\\n' +\n    '    int i, j, minIdx;\\n' +\n    '    // One by one move boundary of unsorted subarray \\n' +\n    '    for (i = 0; i < n - 1; i++)\\n' +\n    '    {\\n' +\n    '        // Find the minimum element in unsorted array \\n' +\n    '        minIdx = i;\\n' +\n    '        for (j = i + 1; j < n; j++) \\n' +\n    '        {\\n' +\n    '            if (arr[j] < arr[min_idx]) \\n' +\n    '            {\\n' +\n    '                minIdx = j;\\n' +\n    '            }\\n' +\n    '        }\\n' +\n    '        // Swap the found minimum element with the first element \\n' +\n    '        swap(&arr[minIdx], &arr[i]);\\n' +\n    '    }\\n' +\n    '} \\n',\n};\n\nexport default SelectionSort;\n","/**\n * Merge sort algorithm details.\n *\n * @see {@link https://www.geeksforgeeks.org/merge-sort/|Geeks for Geeks}\n * @see {@link https://stackabuse.com/merge-sort-in-javascript/|StackAbuse}\n * @memberOf Code templates\n * @const {{Java: string, 'C/C++': string, JavaScript: string, Python: string}}\n */\nconst MergeSort = {\n  Java:\n    '/* Merges two subarrays of arr[]. First subarray is arr[l..m]\\n' +\n    ' * Second subarray is arr[m+1..r] */\\n' +\n    'void merge(int[] arr, int left, int mid, int right) {\\n' +\n    '    // Find sizes of two subarrays to be merged\\n' +\n    '    int n1 = mid - left + 1;\\n' +\n    '    int n2 = right - mid;\\n' +\n    '\\n' +\n    '    // Create temp arrays\\n' +\n    '    int[] leftArray = new int[n1];\\n' +\n    '    int[] rightArray = new int[n2];\\n' +\n    '\\n' +\n    '    // Copy data to temp arrays\\n' +\n    '    for (int i = 0; i < n1; i++) {\\n' +\n    '        leftArray[i] = arr[left + i];\\n' +\n    '    }\\n' +\n    '\\n' +\n    '    for (int j = 0; j < n2; j++) {\\n' +\n    '        rightArray[j] = arr[mid + 1 + j];\\n' +\n    '    }\\n' +\n    '\\n' +\n    '    // Initial indexes of first and second subarrays\\n' +\n    '    int i = 0, j = 0;\\n' +\n    '\\n' +\n    '    // Initial index of merged subarray array\\n' +\n    '    int k = left;\\n' +\n    '    // Merge the arrays\\n' +\n    '    while (i < n1 && j < n2) {\\n' +\n    '        if (leftArray[i] <= rightArray[j]) {\\n' +\n    '            arr[k++] = leftArray[i++];\\n' +\n    '        } else {\\n' +\n    '            arr[k++] = rightArray[j++];\\n' +\n    '        }\\n' +\n    '    }\\n' +\n    '\\n' +\n    '    // Copy remaining elements of leftArray if any\\n' +\n    '    while (i < n1) {\\n' +\n    '        arr[k++] = leftArray[i++];\\n' +\n    '    }\\n' +\n    '\\n' +\n    '    // Copy remaining elements of rightArray if any\\n' +\n    '    while (j < n2) {\\n' +\n    '        arr[k++] = rightArray[j++];\\n' +\n    '    }\\n' +\n    '}\\n' +\n    '\\n' +\n    '// Main function that sorts arr[l..r] using merge()\\n' +\n    'void mergeSortHelper(int[] arr, int left, int right) {\\n' +\n    '    if (left < right) {\\n' +\n    '        // Find the middle point\\n' +\n    '        int mid = (left + right) / 2;\\n' +\n    '\\n' +\n    '        // Sort first and second halves\\n' +\n    '        mergeSortHelper(arr, left, mid);\\n' +\n    '        mergeSortHelper(arr, mid + 1, right);\\n' +\n    '\\n' +\n    '        // Merge the sorted halves\\n' +\n    '        merge(arr, left, mid, right);\\n' +\n    '    }\\n' +\n    '}\\n' +\n    '\\n' +\n    'void mergeSort(int[] arr) {\\n' +\n    '    mergeSortHelper(arr, 0, arr.length - 1);\\n' +\n    '}\\n',\n  JavaScript:\n    'function merge(left, right) {\\n' +\n    '  let arr = []\\n' +\n    '  // Break out of loop if any one of the array gets empty\\n' +\n    '  while (left.length && right.length) {\\n' +\n    '    // Pick the smaller element of left and right sub arrays \\n' +\n    '    if (left[0] < right[0]) {\\n' +\n    '      arr.push(left.shift())\\n' +\n    '    } else {\\n' +\n    '      arr.push(right.shift())\\n' +\n    '    }\\n' +\n    '  }\\n' +\n    '\\n' +\n    '  /* Concatenating the leftover elements\\n' +\n    \"   * (in case we didn't go through the entire left or right array) */\\n\" +\n    '  return [ ...arr, ...left, ...right ]\\n' +\n    '}\\n' +\n    '\\n' +\n    'function mergeSort(array) {\\n' +\n    '  const half = array.length / 2;\\n' +\n    '\\n' +\n    '  // Base case or terminating case\\n' +\n    '  if (array.length < 2) {\\n' +\n    '    return array;\\n' +\n    '  }\\n' +\n    '\\n' +\n    '  const left = array.splice(0, half);\\n' +\n    '  return merge(mergeSort(left), mergeSort(array));\\n' +\n    '}\\n',\n  Python:\n    'def mergeSort(arr):\\n' +\n    '    if len(arr) > 1:\\n' +\n    '        # Finding the mid of the array\\n' +\n    '        mid = len(arr)//2\\n' +\n    '        # Dividing the array elements\\n' +\n    '        left_array = arr[:mid]\\n' +\n    '        # into 2 halves\\n' +\n    '        right_array = arr[mid:]\\n' +\n    '        # Sorting the first half\\n' +\n    '        mergeSort(left_array)\\n' +\n    '        # Sorting the second half\\n' +\n    '        mergeSort(right_array)\\n' +\n    '\\n' +\n    '        i = j = k = 0\\n' +\n    '\\n' +\n    '        # Copy data to temp arrays left_array and right_array\\n' +\n    '        while i < len(left_array) and j < len(right_array):\\n' +\n    '            if left_array[i] < right_array[j]:\\n' +\n    '                arr[k] = left_array[i]\\n' +\n    '                i += 1\\n' +\n    '            else:\\n' +\n    '                arr[k] = right_array[j]\\n' +\n    '                j += 1\\n' +\n    '            k += 1\\n' +\n    '\\n' +\n    '        # Checking if any element was left\\n' +\n    '        while i < len(left_array):\\n' +\n    '            arr[k] = left_array[i]\\n' +\n    '            i += 1\\n' +\n    '            k += 1\\n' +\n    '\\n' +\n    '        while j < len(right_array):\\n' +\n    '            arr[k] = right_array[j]\\n' +\n    '            j += 1\\n' +\n    '            k += 1\\n',\n  'C/C++':\n    '// Merges two subarrays of arr[]. First subarray is arr[l..m] \\n' +\n    '// Second subarray is arr[m+1..r] \\n' +\n    'void merge(int arr[], int left, int mid, int right)\\n' +\n    '{\\n' +\n    '    int i, j, k;\\n' +\n    '    int n1 = mid - left + 1;\\n' +\n    '    int n2 = right - mid;\\n' +\n    '\\n' +\n    '    // create temp arrays\\n' +\n    '    int leftArray[n1], rightArray[n2];\\n' +\n    '\\n' +\n    '    // Copy data to temp arrays leftArray and rightArray\\n' +\n    '    for (i = 0; i < n1; ++i) \\n' +\n    '    {\\n' +\n    '        leftArray[i] = arr[l + i];\\n' +\n    '    }\\n' +\n    '\\n' +\n    '    for (j = 0; j < n2; ++j) \\n' +\n    '    {\\n' +\n    '        rightArray[j] = arr[m + 1 + j];\\n' +\n    '    }\\n' +\n    '\\n' +\n    '    // Merge the temp arrays back into arr[l..r]\\n' +\n    '    i = 0; // Initial index of first subarray\\n' +\n    '    j = 0; // Initial index of second subarray\\n' +\n    '    k = left; // Initial index of merged subarray\\n' +\n    '    while (i < n1 && j < n2) \\n' +\n    '    {\\n' +\n    '        if (leftArray[i] <= rightArray[j]) \\n' +\n    '        {\\n' +\n    '            arr[k++] = leftArray[i++];\\n' +\n    '        }\\n' +\n    '        else \\n' +\n    '        {\\n' +\n    '            arr[k++] = rightArray[j++];\\n' +\n    '        }\\n' +\n    '    }\\n' +\n    '\\n' +\n    '    // Copy the remaining elements of leftArray, if there are any\\n' +\n    '    while (i < n1) \\n' +\n    '    {\\n' +\n    '        arr[k++] = leftArray[i++];\\n' +\n    '    }\\n' +\n    '\\n' +\n    '    // Copy the remaining elements of rightArray, if there are any \\n' +\n    '    while (j < n2) \\n' +\n    '    {\\n' +\n    '        arr[k++] = rightArray[j++];\\n' +\n    '    }\\n' +\n    '}\\n' +\n    '\\n' +\n    '// left is for left index and right is right index \\n' +\n    '// of the sub-array of arr to be sorted \\n' +\n    'void mergeSort(int arr[], int left, int right)\\n' +\n    '{\\n' +\n    '    if (left < right) \\n' +\n    '    {\\n' +\n    '        // Same as (left + right) / 2, \\n' +\n    '        // but avoids overflow for large left and right \\n' +\n    '        int mid = left + (right - left) / 2;\\n' +\n    '\\n' +\n    '        // Sort first and second halves\\n' +\n    '        mergeSort(arr, left, mid);\\n' +\n    '        mergeSort(arr, mid + 1, right);\\n' +\n    '\\n' +\n    '        merge(arr, left, mid, right);\\n' +\n    '    }\\n' +\n    '}\\n',\n};\n\nexport default MergeSort;\n","/**\n * Shell sort algorithm details.\n *\n * @see {@link https://levelup.gitconnected.com/shell-sort-in-javascript-c8a487041cdb|GitConnected}\n * @see {@link https://www.geeksforgeeks.org/shellsort/|Geeks for Geeks}\n * @memberOf Code templates\n * @const {{Java: string, 'C/C++': string, JavaScript: string, Python: string}}\n */\nconst ShellSort = {\n  Java:\n    'void shellSort(int[] arr) { \\n' +\n    '    int n = arr.length; \\n' +\n    '\\n' +\n    '    // Start with a big gap, then reduce the gap \\n' +\n    '    for (int gap = n / 2; gap > 0; gap /= 2) { \\n' +\n    '\\n' +\n    '    // Do a gapped insertion sort for this gap size \\n' +\n    '        for (int i = gap; i < n; i += 1) { \\n' +\n    '        int temp = arr[i]; \\n' +\n    '\\n' +\n    '        // Shift earlier gap-sorted elements up until \\n' +\n    '        // the correct location for a[i] is found \\n' +\n    '        int j; \\n' +\n    '        for (j = i; j >= gap && arr[j - gap] > temp; j -= gap) { \\n' +\n    '            arr[j] = arr[j - gap]; \\n' +\n    '\\n' +\n    '            // Put temp (the original a[i]) in its correct location \\n' +\n    '            arr[j] = temp; \\n' +\n    '        } \\n' +\n    '    } \\n' +\n    '} \\n',\n  JavaScript:\n    'function shellSort(arr) {\\n' +\n    '  let n = arr.length;\\n' +\n    '  \\n' +\n    \"  // Start with a really large gap, and then reduce the gap until there isn't any. \\n\" +\n    '  // With this, the gap starts as half of the array length, and then half of that \\n' +\n    '  // every time \\n' +\n    '  for (let gap = Math.floor(n / 2); gap > 0; gap = Math.floor(gap / 2)) { \\n' +\n    '  \\n' +\n    '    // Do a insertion sort for each of the section the gap ends up dividing \\n' +\n    '    for (let i = gap; i < n; i += 1) { \\n' +\n    '  \\n' +\n    '      // We store the current variable \\n' +\n    '      let temp = arr[i]; \\n' +\n    '  \\n' +\n    '      // This is the insertion sort to sort the section into order \\n' +\n    '      let j; \\n' +\n    '      for (j = i; j >= gap && arr[j - gap] > temp; j -= gap) { \\n' +\n    '        arr[j] = arr[j - gap]; \\n' +\n    '      }\\n' +\n    '      arr[j] = temp;\\n' +\n    '    } \\n' +\n    '  } \\n' +\n    '  return arr;\\n' +\n    '} \\n',\n  Python:\n    'def shellSort(arr): \\n' +\n    '\\n' +\n    '    # Start with a big gap, then reduce the gap \\n' +\n    '    n = len(arr) \\n' +\n    '    gap = n // 2\\n' +\n    '\\n' +\n    '    # Do a gapped insertion sort for this gap size' +\n    '    while gap > 0: \\n' +\n    '        for i in range(gap, n): \\n' +\n    '            temp = arr[i] \\n' +\n    '  \\n' +\n    '            # Shift earlier gap-sorted elements up until the correct \\n' +\n    '            # location for a[i] is found \\n' +\n    '            j = i \\n' +\n    '            while  j >= gap and arr[j - gap] > temp: \\n' +\n    '                arr[j] = arr[j - gap] \\n' +\n    '                j -= gap \\n' +\n    '  \\n' +\n    '            # Put temp (the original a[i]) in its correct location \\n' +\n    '            arr[j] = temp \\n' +\n    '        gap //= 2 \\n',\n  'C/C++':\n    'int shellSort(int arr[], int n) \\n' +\n    '{ \\n' +\n    '    // Start with a big gap, then reduce the gap \\n' +\n    '    for (int gap = n / 2; gap > 0; gap /= 2) \\n' +\n    '    { \\n' +\n    '        // Do a gapped insertion sort for this gap size \\n' +\n    '        for (int i = gap; i < n; i += 1) \\n' +\n    '        { \\n' +\n    '            int temp = arr[i]; \\n' +\n    '  \\n' +\n    '            // Shift earlier gap-sorted elements up until the correct  \\n' +\n    '            // location for a[i] is found \\n' +\n    '            int j; \\n' +\n    '            for (j = i; j >= gap && arr[j - gap] > temp; j -= gap) {\\n' +\n    '                arr[j] = arr[j - gap]; \\n' +\n    '            } \\n' +\n    '  \\n' +\n    '            // Put temp (the original a[i]) in its correct location \\n' +\n    '            arr[j] = temp; \\n' +\n    '        } \\n' +\n    '    } \\n' +\n    '    return 0; \\n' +\n    '} \\n',\n};\n\nexport default ShellSort;\n","/**\n * Heap sort algorithm details.\n *\n * @see {@link https://www.geeksforgeeks.org/heap-sort/|Geeks for Geeks}\n * @see {@link https://www.w3resource.com/javascript-exercises/searching-and-sorting-algorithm/searching-and-sorting-algorithm-exercise-3.php|w3resource}\n * @memberOf Code templates\n * @const {{Java: string, 'C/C++': string, JavaScript: string, Python: string}}\n */\nconst HeapSort = {\n  Java:\n    '// To heapify a sub-tree rooted with node i which is \\n' +\n    '// an index in arr[]. n is size of heap \\n' +\n    'void heapify(int[] arr, int n, int i) { \\n' +\n    '    int largest = i; // Initialize largest as root \\n' +\n    '    int l = 2 * i + 1; // left = 2 * i + 1 \\n' +\n    '    int r = 2 * i + 2; // right = 2 * i + 2 \\n' +\n    ' \\n' +\n    '    // If left child is larger than root \\n' +\n    '    if (l < n && arr[l] > arr[largest]) \\n' +\n    '        largest = l; \\n' +\n    ' \\n' +\n    '    // If right child is larger than largest so far \\n' +\n    '    if (r < n && arr[r] > arr[largest]) \\n' +\n    '        largest = r; \\n' +\n    ' \\n' +\n    '    // If largest is not root \\n' +\n    '    if (largest != i) { \\n' +\n    '        int swap = arr[i]; \\n' +\n    '        arr[i] = arr[largest]; \\n' +\n    '        arr[largest] = swap; \\n' +\n    ' \\n' +\n    '        // Recursively heapify the affected sub-tree \\n' +\n    '        heapify(arr, n, largest); \\n' +\n    '    }\\n' +\n    '} \\n' +\n    ' \\n' +\n    'void sort(int[] arr) {\\n' +\n    '    int n = arr.length;\\n' +\n    ' \\n' +\n    '    // Build heap (rearrange array) \\n' +\n    '    for (int i = n / 2 - 1; i >= 0; i--) { \\n' +\n    '        heapify(arr, n, i); \\n' +\n    '    } \\n' +\n    ' \\n' +\n    '    // One by one extract an element from heap\\n' +\n    '    for (int i = n - 1; i > 0; i--) { \\n' +\n    ' \\n' +\n    '        // Move current root to end \\n' +\n    '        int temp = arr[0]; \\n' +\n    '        arr[0] = arr[i]; \\n' +\n    '        arr[i] = temp; \\n' +\n    ' \\n' +\n    '        // Call max heapify on the reduced heap \\n' +\n    '        heapify(arr, i, 0); \\n' +\n    '    } \\n' +\n    '} \\n',\n  JavaScript:\n    'let array_length; \\n' +\n    '\\n' +\n    '// To heapify a sub-tree rooted with node i which is \\n' +\n    '// an index in arr[] \\n' +\n    'function heap_root(input, i) { \\n' +\n    '  let left = 2 * i + 1; \\n' +\n    '  let right = 2 * i + 2; \\n' +\n    '  let max = i; \\n' +\n    '\\n' +\n    '  // If left child is larger than root \\n' +\n    '  if (left < array_length && input[left] > input[max]) { \\n' +\n    '    max = left;\\n' +\n    '  }\\n' +\n    '\\n' +\n    '  // If right child is larger than largest so far \\n' +\n    '  if (right < array_length && input[right] > input[max])     { \\n' +\n    '    max = right; \\n' +\n    '  } \\n' +\n    '\\n' +\n    '  // If largest is not root \\n' +\n    '  if (max != i) { \\n' +\n    '    swap(input, i, max); \\n' +\n    '\\n' +\n    '    // Recursively heapify the affected sub-tree \\n' +\n    '    heap_root(input, max); \\n' +\n    '  } \\n' +\n    '} \\n' +\n    '\\n' +\n    'function swap(input, index_A, index_B) { \\n' +\n    '  let temp = input[index_A]; \\n' +\n    '\\n' +\n    '  input[index_A] = input[index_B]; \\n' +\n    '  input[index_B] = temp; \\n' +\n    '} \\n' +\n    '\\n' +\n    'function heapSort(arr) { \\n' +\n    '    \\n' +\n    '  array_length = arr.length; \\n' +\n    '\\n' +\n    '  // Build heap (rearrange array) \\n' +\n    '  for (let i = Math.floor(array_length / 2); i >= 0; i -= 1) {\\n' +\n    '    heap_root(arr, i); \\n' +\n    '  } \\n' +\n    '\\n' +\n    '  // One by one extract an element from heap\\n' +\n    '  for (i = arr.length - 1; i > 0; i--) { \\n' +\n    '    // Move current root to end \\n' +\n    '    swap(arr, 0, i); \\n' +\n    '    array_length--; \\n' +\n    '\\n' +\n    '    // Call max heapify on the reduced heap \\n' +\n    '    heap_root(arr, 0); \\n' +\n    '  }\\n' +\n    '} \\n',\n  Python:\n    '# To heapify sub-tree rooted at index i. n is size of heap \\n' +\n    'def heapify(arr, n, i): \\n' +\n    '    largest = i  # Initialize largest as root \\n' +\n    '    l = 2 * i + 1     # left = 2 * i + 1 \\n' +\n    '    r = 2 * i + 2     # right = 2 * i + 2 \\n' +\n    ' \\n' +\n    '    # See if left child of root exists and is \\n' +\n    '    # greater than root \\n' +\n    '    if l < n and arr[largest] < arr[l]: \\n' +\n    '        largest = l \\n' +\n    ' \\n' +\n    '    # See if right child of root exists and is \\n' +\n    '    # greater than root \\n' +\n    '    if r < n and arr[largest] < arr[r]: \\n' +\n    '        largest = r \\n' +\n    ' \\n' +\n    '    # Change root, if needed \\n' +\n    '    if largest != i:\\n' +\n    '        arr[i], arr[largest] = arr[largest], arr[i]  # swap\\n' +\n    ' \\n' +\n    '        # Heapify the root \\n' +\n    '        heapify(arr, n, largest)\\n' +\n    ' \\n' +\n    'def heapSort(arr): \\n' +\n    '    n = len(arr) \\n' +\n    ' \\n' +\n    '    # Build a maxheap \\n' +\n    '    for i in range(n//2 - 1, -1, -1): \\n' +\n    '        heapify(arr, n, i) \\n' +\n    ' \\n' +\n    '    # One by one extract elements \\n' +\n    '    for i in range(n-1, 0, -1): \\n' +\n    '        // Move current root to end \\n' +\n    '        arr[i], arr[0] = arr[0], arr[i] \\n' +\n    '        heapify(arr, i, 0) \\n',\n  'C/C++':\n    '#include <iostream> \\n' +\n    ' \\n' +\n    '// To heapify a sub-tree rooted with node i which is\\n' +\n    '// an index in arr[]. n is size of heap\\n' +\n    'void heapify(int arr[], int n, int i) \\n' +\n    '{ \\n' +\n    '    int largest = i; // Initialize largest as root\\n' +\n    '    int l = 2 * i + 1; // left = 2 * i + 1 \\n' +\n    '    int r = 2 * i + 2; // right = 2 * i + 2 \\n' +\n    ' \\n' +\n    '    // If left child is larger than root \\n' +\n    '    if (l < n && arr[l] > arr[largest]) \\n' +\n    '        largest = l; \\n' +\n    ' \\n' +\n    '    // If right child is larger than largest so far \\n' +\n    '    if (r < n && arr[r] > arr[largest])\\n' +\n    '        largest = r;\\n' +\n    ' \\n' +\n    '    // If largest is not root\\n' +\n    '    if (largest != i) { \\n' +\n    '        swap(arr[i], arr[largest]); \\n' +\n    ' \\n' +\n    '        // Recursively heapify the affected sub-tree \\n' +\n    '        heapify(arr, n, largest); \\n' +\n    '    } \\n' +\n    '} \\n' +\n    ' \\n' +\n    'void heapSort(int arr[], int n) \\n' +\n    '{ \\n' +\n    '    // Build heap (rearrange array) \\n' +\n    '    for (int i = n / 2 - 1; i >= 0; i--) \\n' +\n    '        heapify(arr, n, i);\\n' +\n    ' \\n' +\n    '    // One by one extract an element from heap \\n' +\n    '    for (int i = n - 1; i > 0; i--) { \\n' +\n    '        // Move current root to end \\n' +\n    '        swap(arr[0], arr[i]);\\n' +\n    ' \\n' +\n    '        // Call max heapify on the reduced heap \\n' +\n    '        heapify(arr, i, 0); \\n' +\n    '    }\\n' +\n    '} \\n',\n};\n\nexport default HeapSort;\n","import React from 'react';\nimport './styles.css';\n\n/**\n * Selector component which allows the users to select the code corresponding to the programming\n * language.\n *\n * @component\n * @category CodeTemplate\n * @returns {JSX.Element} Selector component.\n */\nconst Selector = ({ selected, setSelected }) => {\n  /**\n   * Select button for users to choose the programming language.\n   *\n   * @param language Programming language.\n   * @returns {JSX.Element} Select button.\n   */\n  const Select = ({ language }) => (\n    <p\n      className=\"select\"\n      style={{\n        background: selected === language ? `linear-gradient(0deg, #7c89f8, #5466ff)` : `#A5BBC9`,\n      }}\n      onClick={() => setSelected(language)}\n    >\n      {language}\n    </p>\n  );\n\n  return (\n    <div className=\"selector\">\n      <Select language={'Java'} />\n      <Select language={'JavaScript'} />\n      <Select language={'Python'} />\n      <Select language={'C/C++'} />\n    </div>\n  );\n};\n\nexport default Selector;\n","import React, { useEffect, useState } from 'react';\nimport templates from '../templates/Templates';\nimport Selector from './Selector';\nimport './styles.css';\nimport AceEditor from 'react-ace';\nimport 'ace-builds/webpack-resolver';\nimport 'ace-builds/src-noconflict/mode-java';\nimport 'ace-builds/src-noconflict/mode-python';\nimport 'ace-builds/src-noconflict/mode-c_cpp';\nimport 'ace-builds/src-noconflict/mode-javascript';\nimport 'ace-builds/src-noconflict/theme-textmate';\n\n/**\n * Code template which encapsulates the details for the programming language selectors and code\n * editor.\n *\n * @component\n * @category CodeTemplate\n * @param {string} algo Current algorithm selected.\n * @returns {JSX.Element} Code template component.\n */\nconst CodeTemplate = ({ algo }) => {\n  // Code templates used of this algorithm\n  const [template, setTemplate] = useState(() => templates[algo]);\n\n  // Current programming language selected\n  const [selected, setSelected] = useState('Java');\n\n  useEffect(() => {\n    setTemplate(templates[algo]);\n  }, [algo]);\n\n  /**\n   * Gets the current mode corresponding to the programming language selected.\n   *\n   * @returns {string} Current mode.\n   */\n  const getMode = () => (selected === 'C/C++' ? 'c_cpp' : selected.toLowerCase());\n\n  return (\n    <div className=\"code-template\">\n      <Selector selected={selected} setSelected={setSelected} />\n      <AceEditor\n        className=\"editor\"\n        mode={getMode()}\n        theme=\"textmate\"\n        fontSize={14}\n        name=\"UNIQUE_ID_OF_DIV\"\n        editorProps={{ $blockScrolling: true }}\n        value={template[selected]}\n        readOnly={true}\n      />\n    </div>\n  );\n};\n\nexport default CodeTemplate;\n","import CodeExplanation from './codeexplaination/CodeExplanation';\nimport CodeTemplate from './codetemplate/CodeTemplate';\nimport React from 'react';\nimport './styles.css';\n\n/**\n * Code information component which provides information on the current sorting algorithm.\n *\n * @component\n * @category App Body\n * @param {string} visualizerAlgorithm Current sorting algorithm selected.\n * @returns {JSX.Element} Code information component which provides information on the current sorting algorithm.\n */\nconst CodeInformation = ({ visualizerAlgorithm }) => (\n  <div className=\"code\">\n    <CodeExplanation algo={visualizerAlgorithm} />\n    <CodeTemplate algo={visualizerAlgorithm} />\n  </div>\n);\n\nexport default CodeInformation;\n","import React, { useEffect, useState } from 'react';\nimport Legend from './component/legend/Legend';\nimport SectionHeader from '../../component/header/SectionHeader';\nimport AlgorithmSelector from './component/selectors/algorithmselector/AlgorithmSelector';\nimport SpeedSelector from './component/selectors/sliderselector/SliderSelector';\nimport DataSizeSelector from './component/selectors/sliderselector/SliderSelector';\nimport './styles.css';\nimport {\n  isBucketSort,\n  isCountingSort,\n  isMergeSort,\n  isQuickSort,\n  isRadixSort,\n} from './util/GeneralUtil';\nimport { roundToTwoDp } from './util/MathUtil';\nimport { executeGenericSort } from './util/SwappingAlgoUtil';\nimport { executeMergeSortBackward, executeMergeSortForward } from './util/MergeSortUtil';\nimport { executeQuickSort } from './util/QuickSortUtil';\nimport { buckets, executeCountSort } from './util/CountingSortUtil';\nimport { executeRadixSort, stack } from './util/RadixSortUtil';\nimport {\n  DataSizeSelectorProps,\n  SpeedSelectorProps,\n} from './component/selectors/sliderselector/SelectorProps';\nimport AnimationProgressBar from './component/animationprogressbar/AnimationProgressBar';\nimport AnimationScreen from './component/animationscreen/AnimationScreen';\nimport StepByStep from './component/stepbystep/StepByStep';\nimport bubbleSort from '../algorithm/sortingalgorithms/bubbleSort';\nimport { executeBucketSort } from './util/BucketSortUtil';\nimport ButtonBox from './component/button/ButtonBox';\nimport CodeInformation from '../codeinformation/CodeInformation';\nimport { arrayCopy, generateArray, getAnimationArr, resetArray } from './util/ArrayUtil';\n\nconst VisualizerStateContext = React.createContext({ isPlay: false, isReplay: false });\n\n/**\n * Encapsulates the fields and methods of the Visualizer Component.\n *\n * @category App Body\n * @component\n * @returns {JSX.Element} Visualizer Component.\n */\nconst Visualizer = () => {\n  // isPlay and isReplay simulate the 3 states\n  const [isPlay, setIsPlay] = useState(false);\n  const [isReplay, setIsReplay] = useState(false);\n\n  // this is to ensure we can click back arrow without trigger any new re-rendering of data\n  const [isReset, setIsReset] = useState(false);\n\n  const [isInMidstOfSort, setIsInMidstOfSort] = useState(false);\n  const [speed, setSpeed] = useState(5);\n  const [dataSize, setDataSize] = useState(15);\n  const [visualizerAlgorithm, setVisualizerAlgorithm] = useState('Bubble Sort');\n\n  // Original state of the array\n  const [arrayData, setArrayData] = useState(() => generateArray(dataSize, visualizerAlgorithm));\n\n  // Reference array used to display the array being animated\n  const [referenceArray, setReferenceArray] = useState(() => arrayCopy(arrayData));\n\n  // Animation array which contains the steps of the entire animation\n  const [animationArr, setAnimationArr] = useState(() => bubbleSort(arrayCopy(arrayData)));\n\n  // Animation percentage used to describe the percentage of animation completed for the sorting\n  // algorithm\n  const [animationPercentage, setAnimationPercentage] = useState(0);\n\n  // Index of the current animation\n  const [idx, setIdx] = useState(0);\n\n  // Count array used for counting sort\n  const [countArr, setCountArr] = useState(() => arrayCopy(buckets));\n\n  // Stack array used for radix and bucket sort\n  const [stackArr, setStackArr] = useState(() => arrayCopy(stack));\n\n  // This is introduced to simplify the back animation for MergeSort\n  const [historyArr, setHistoryArr] = useState([]);\n\n  useEffect(() => {\n    if (isPlay === false) {\n      setAnimationArr(getAnimationArr(visualizerAlgorithm, arrayCopy(arrayData)));\n    }\n  }, [isPlay, speed, dataSize, visualizerAlgorithm, arrayData]);\n\n  /**\n   * Changes the number of \"block\" or \"ovals\" for the sorting animation.\n   *\n   * @param {number} val The number of \"block\" or \"ovals\" for sorting animation.\n   */\n  const changeDataSize = (val) => {\n    if (val !== dataSize) {\n      setDataSize(val);\n      setArrayData(generateArray(val, visualizerAlgorithm));\n      setCountArr(arrayCopy(buckets));\n      setStackArr(arrayCopy(stack));\n      setIsReplay(false);\n      setAnimationPercentage(0);\n      setIsReset(true);\n    }\n  };\n\n  /**\n   * Executes one step of the sorting animation in the forward direction,\n   * depending on the selected algorithm.\n   */\n  const executeForwardAnimation = () => {\n    let currentAnimation = animationArr[idx];\n    const animationPx = roundToTwoDp(((idx + 1) / animationArr.length) * 100);\n    let nextReferenceArray;\n    if (isCountingSort(visualizerAlgorithm)) {\n      nextReferenceArray = executeCountSort(\n        currentAnimation,\n        referenceArray,\n        animationPx,\n        countArr,\n        true\n      );\n    } else if (isRadixSort(visualizerAlgorithm)) {\n      nextReferenceArray = executeRadixSort(currentAnimation, referenceArray, stackArr, true);\n    } else if (isBucketSort(visualizerAlgorithm)) {\n      nextReferenceArray = executeBucketSort(currentAnimation, referenceArray, stackArr, true);\n    } else if (isMergeSort(visualizerAlgorithm)) {\n      nextReferenceArray = executeMergeSortForward(\n        currentAnimation,\n        referenceArray,\n        historyArr,\n        setReferenceArray\n      );\n    } else if (isQuickSort(visualizerAlgorithm)) {\n      nextReferenceArray = executeQuickSort(\n        currentAnimation,\n        referenceArray,\n        visualizerAlgorithm,\n        setReferenceArray\n      );\n    } else {\n      // Generic Sort refers to Insertion, Bubble, Selection, Shell Sort\n      nextReferenceArray = executeGenericSort(\n        currentAnimation,\n        referenceArray,\n        visualizerAlgorithm,\n        setReferenceArray\n      );\n    }\n\n    if (idx + 1 >= animationArr.length) {\n      resetDataWhenAnimationFinish(nextReferenceArray);\n    }\n    setIdx(idx + 1);\n    setAnimationPercentage(animationPx);\n  };\n\n  /**\n   * Executes one step of the sorting animation in the reverse direction,\n   * depending on the sorting algorithm.\n   */\n  const executeBackwardAnimation = () => {\n    // this occurs if the users click too fast\n    if (idx - 1 < 0) {\n      setIdx(0);\n      return;\n    }\n    let currentAnimation = animationArr[idx - 1];\n    const animationPx = roundToTwoDp(((idx - 1) / animationArr.length) * 100);\n\n    if (isCountingSort(visualizerAlgorithm)) {\n      executeCountSort(currentAnimation, referenceArray, animationPx, countArr, false);\n    } else if (isRadixSort(visualizerAlgorithm)) {\n      executeRadixSort(currentAnimation, referenceArray, stackArr, false);\n    } else if (isBucketSort(visualizerAlgorithm)) {\n      executeBucketSort(currentAnimation, referenceArray, stackArr, false);\n    } else if (isMergeSort(visualizerAlgorithm)) {\n      executeMergeSortBackward(historyArr, setReferenceArray);\n    } else if (isQuickSort(visualizerAlgorithm)) {\n      executeQuickSort(currentAnimation, referenceArray, visualizerAlgorithm, setReferenceArray);\n    } else {\n      executeGenericSort(currentAnimation, referenceArray, visualizerAlgorithm, setReferenceArray);\n    }\n\n    if (idx === animationArr.length) {\n      setIsReplay(false);\n    }\n    setIdx(idx - 1);\n    setAnimationPercentage(animationPx);\n  };\n\n  /**\n   * Resets the states of the \"blocks\" or \"oval\" when the sorting animation is done.\n   *\n   * @param {Object[]} finalReferenceArray The end state of the array holding the states of each block.\n   */\n  const resetDataWhenAnimationFinish = (finalReferenceArray) => {\n    setIsPlay(false);\n    setIsReplay(true);\n    setReferenceArray(resetArray(visualizerAlgorithm, finalReferenceArray));\n  };\n\n  /**\n   * ContextProviderValue object contains different values and methods to be passed around the other components\n   * via React's context.\n   *\n   * @const {Object}\n   */\n  const value = {\n    isPlay,\n    isReplay,\n    speed,\n    arrayData,\n    referenceArray,\n    animationArr,\n    countArr,\n    stackArr,\n    isInMidstOfSort,\n    dataSize,\n    setDataSize,\n    visualizerAlgorithm,\n    animationPercentage,\n    idx,\n    isReset,\n    setIsReset,\n    setIsReplay,\n    setIsPlay,\n    setIsInMidstOfSort,\n    setVisualizerAlgorithm,\n    setArrayData,\n    setAnimationPercentage,\n    setAnimationArr,\n    setIdx,\n    setReferenceArray,\n    setCountArr,\n    setStackArr,\n    setHistoryArr,\n    executeForwardAnimation,\n    executeBackwardAnimation,\n    resetDataWhenAnimationFinish,\n  };\n\n  return (\n    <div id=\"visualizer\">\n      <VisualizerStateContext.Provider value={{ ...value }}>\n        <div className=\"visualizer\">\n          <div className=\"visualizer-header-box\">\n            <SectionHeader sectionHeader=\"Visualizer\" translateX=\"translate(25px)\" />\n            <AlgorithmSelector />\n          </div>\n          <div className=\"visualizer-box\">\n            <AnimationScreen />\n          </div>\n          <StepByStep />\n          <AnimationProgressBar />\n          <div className=\"controller-box\">\n            <div className=\"speed-selector-box\">\n              <SpeedSelector setData={(val) => setSpeed(val)} {...SpeedSelectorProps} />\n              <DataSizeSelector setData={(val) => changeDataSize(val)} {...DataSizeSelectorProps} />\n            </div>\n            <ButtonBox />\n            <Legend />\n          </div>\n        </div>\n      </VisualizerStateContext.Provider>\n      <CodeInformation visualizerAlgorithm={visualizerAlgorithm} />\n    </div>\n  );\n};\n\nexport { VisualizerStateContext };\nexport default Visualizer;\n","import React from 'react';\nimport './styles.css';\n\n/**\n * Sort-Algo logo used in Navigation Menu.\n *\n * @component\n * @category Navigation Menu\n */\nconst Logo = () => {\n  return (\n    <a href=\"#home\" className=\"logo\">\n      <div className=\"logo-block-one\" />\n      <div className=\"logo-block-two\" />\n      <div className=\"logo-block-three\" />\n    </a>\n  );\n};\n\nexport default Logo;\n","import React from 'react';\nimport './styles.css';\n\nimport Logo from '../logo/logo';\n\n/**\n * Navigation Menu of the app.\n *\n * @component\n * @category App header\n */\nconst NavigationMenu = () => {\n  return (\n    <nav className=\"nav-bar\">\n      <div className=\"nav-logo\">\n        <Logo />\n        <a href=\"#home\">Sorting Visualizer</a>\n      </div>\n      <ul className=\"nav-menu\">\n        <li>\n          <a className=\"active\" href=\"#home\">\n            Home\n          </a>\n        </li>\n        <li>\n          <a href=\"#howItWorks\">Steps To Be Used</a>\n        </li>\n        <li>\n          <a href=\"#visualizer\">Visualizer</a>\n        </li>\n        <li>\n          <a href=\"#team\">Team</a>\n        </li>\n        <li>\n          <a href=\"#contactUs\">Contact Us</a>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default NavigationMenu;\n","import React from 'react';\nimport './App.css';\n\nimport HowItWorks from '../howitworks/HowItWorks';\nimport ContactUs from '../contactus/ContactUs';\nimport Home from '../home/Home';\nimport Team from '../team/Team';\nimport Visualizer from '../visualizer/sortingvisualizer/Visualizer';\nimport NavigationMenu from '../component/navigationMenu/NavigationMenu';\n\n/**\n * Main controller of the App. Contains a navigation menu and its corresponding sections.\n *\n * @component\n * @category Main App\n */\nfunction App() {\n  return (\n    <div className=\"app\">\n      <NavigationMenu />\n      <div className=\"app-container\">\n        <Home />\n        <HowItWorks />\n        <Visualizer />\n        <Team />\n        <ContactUs />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport reportWebVitals from './reportWebVitals';\n\n/**\n * Listener to show current navigation window/menu.\n */\nwindow.addEventListener('scroll', (event) => {\n  let navigationLinks = document.querySelectorAll('nav ul li a');\n  let fromTop = window.scrollY + 60 + window.innerHeight * 0.05;\n  let navigationMenu = document.querySelector('nav');\n  let menuHeaders = document.querySelectorAll('nav div a div');\n\n  // Header transits to the next state when scrollY > 0 (upon scrolling from the top)\n  navigationMenu.classList.toggle('sticky', window.scrollY > 0);\n  menuHeaders.forEach((link) => {\n    link.classList.toggle('sticky', window.scrollY > 0);\n  });\n\n  navigationLinks.forEach((link) => {\n    let section = document.querySelector(link.hash);\n\n    if (section.offsetTop <= fromTop && section.offsetTop + section.offsetHeight > fromTop) {\n      link.classList.add('active');\n    } else {\n      link.classList.remove('active');\n    }\n  });\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}